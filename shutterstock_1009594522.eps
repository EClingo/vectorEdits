%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Eastern European
%%Title: octopus3.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Zsolti
%%CreationDate: 1/17/2018
%%BoundingBox: 0 0 905 905
%%HiResBoundingBox: 0 0 904.6153 904.6153
%%CropBox: 0 0 904.6153 904.6153
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.2 x399 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2018-01-17T13:20:59+01:00</xmp:CreateDate>
         <xmp:MetadataDate>2018-01-17T13:21+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-01-17T13:21+01:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9E4UOxVsDFV4XFV4XFV4&#xA;XFK4Liq4DAq4DFWwMVbpirdMVbpirdMVdTFXUxV1MVdTFXUxVqmKtUxVqmKtEYq0Riq0jFVpXCq0&#xA;riqwrihYVxVYRirWKuxV2KtgYqvVcVVAuKrgMUrwMVXAYFXAYquAxVumKt0xVumKupirdMVdTFW6&#xA;Yq6mKtUxV1MVdTFWqYq1TFWqYq0Riq0jFWiMVWEYVWkYqsK4oWMuKqZGKtYq2Biq9VxVUAxSvAxV&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>904.615234</stDim:w>
            <stDim:h>904.615234</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Red</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Yellow</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Green</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>166</xmpG:green>
                           <xmpG:blue>81</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Cyan</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>174</xmpG:green>
                           <xmpG:blue>239</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Blue</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>46</xmpG:red>
                           <xmpG:green>49</xmpG:green>
                           <xmpG:blue>146</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>CMYK Magenta</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>236</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>140</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=15 M=100 Y=90 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>190</xmpG:red>
                           <xmpG:green>30</xmpG:green>
                           <xmpG:blue>45</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=90 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>239</xmpG:red>
                           <xmpG:green>65</xmpG:green>
                           <xmpG:blue>54</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=80 Y=95 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>90</xmpG:green>
                           <xmpG:blue>41</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>247</xmpG:red>
                           <xmpG:green>148</xmpG:green>
                           <xmpG:blue>30</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=35 Y=85 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>64</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=5 M=0 Y=90 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>237</xmpG:green>
                           <xmpG:blue>50</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>215</xmpG:red>
                           <xmpG:green>223</xmpG:green>
                           <xmpG:blue>35</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>141</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>63</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>57</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>74</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 Y=100 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>148</xmpG:green>
                           <xmpG:blue>68</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=90 M=30 Y=95 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>104</xmpG:green>
                           <xmpG:blue>56</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 Y=75 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>43</xmpG:red>
                           <xmpG:green>182</xmpG:green>
                           <xmpG:blue>115</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=80 M=10 Y=45 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>167</xmpG:green>
                           <xmpG:blue>157</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=70 M=15 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>39</xmpG:red>
                           <xmpG:green>170</xmpG:green>
                           <xmpG:blue>225</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=50 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>28</xmpG:red>
                           <xmpG:green>117</xmpG:green>
                           <xmpG:blue>188</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=95 Y=5 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>43</xmpG:red>
                           <xmpG:green>57</xmpG:green>
                           <xmpG:blue>144</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=100 Y=25 K=25</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>38</xmpG:red>
                           <xmpG:green>34</xmpG:green>
                           <xmpG:blue>98</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>45</xmpG:green>
                           <xmpG:blue>145</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>146</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>143</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=100 Y=35 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>158</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>99</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=10 M=100 Y=50 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>218</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>92</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=95 Y=20 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>238</xmpG:red>
                           <xmpG:green>42</xmpG:green>
                           <xmpG:blue>123</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=25 Y=40 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>194</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>155</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=45 Y=50 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>155</xmpG:red>
                           <xmpG:green>133</xmpG:green>
                           <xmpG:blue>121</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=50 Y=60 K=25</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>114</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>88</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=55 M=60 Y=65 K=40</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>89</xmpG:red>
                           <xmpG:green>74</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=40 Y=65 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>196</xmpG:red>
                           <xmpG:green>154</xmpG:green>
                           <xmpG:blue>108</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=30 M=50 Y=75 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>169</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>80</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=60 Y=80 K=25</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>139</xmpG:red>
                           <xmpG:green>94</xmpG:green>
                           <xmpG:blue>60</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=65 Y=90 K=35</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>117</xmpG:red>
                           <xmpG:green>76</xmpG:green>
                           <xmpG:blue>41</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 Y=100 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>57</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=70 Y=80 K=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>60</xmpG:red>
                           <xmpG:green>36</xmpG:green>
                           <xmpG:blue>21</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>65</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>88</xmpG:red>
                           <xmpG:green>89</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>109</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>113</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>130</xmpG:green>
                           <xmpG:blue>133</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>147</xmpG:red>
                           <xmpG:green>149</xmpG:green>
                           <xmpG:blue>152</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>167</xmpG:red>
                           <xmpG:green>169</xmpG:green>
                           <xmpG:blue>172</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>188</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>192</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>209</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>212</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>231</xmpG:green>
                           <xmpG:blue>232</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=100 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>237</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>36</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=75 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>101</xmpG:green>
                           <xmpG:blue>34</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=10 Y=95 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>222</xmpG:green>
                           <xmpG:blue>23</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 Y=100 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>161</xmpG:green>
                           <xmpG:blue>75</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>33</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>154</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=60 M=90 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>127</xmpG:red>
                           <xmpG:green>63</xmpG:green>
                           <xmpG:blue>152</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:CA6D1340DEA8E611B69FDB44A01BB5DE</stEvt:instanceID>
                  <stEvt:when>2016-11-12T15:48:52+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3379EA7D91ABE611B69FDB44A01BB5DE</stEvt:instanceID>
                  <stEvt:when>2016-11-17T01:06:49+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4F85D80889F4E711B662B12E0D7A1F78</stEvt:instanceID>
                  <stEvt:when>2018-01-17T13:14:08+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5085D80889F4E711B662B12E0D7A1F78</stEvt:instanceID>
                  <stEvt:when>2018-01-17T13:16:14+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5185D80889F4E711B662B12E0D7A1F78</stEvt:instanceID>
                  <stEvt:when>2018-01-17T13:21+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DocumentID>xmp.did:5185D80889F4E711B662B12E0D7A1F78</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:5185D80889F4E711B662B12E0D7A1F78</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:CA6D1340DEA8E611B69FDB44A01BB5DE</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:5085D80889F4E711B662B12E0D7A1F78</stRef:instanceID>
            <stRef:documentID>xmp.did:5085D80889F4E711B662B12E0D7A1F78</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:CA6D1340DEA8E611B69FDB44A01BB5DE</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -904.615 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 904.615 li
904.615 904.615 li
904.615 0 li
cp
clp
[1 0 0 1 0 0 ]ct
904.615 904.615 mo
0 904.615 li
0 0 li
904.615 0 li
904.615 904.615 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[583.793 0 0 583.793 452.308 452.308 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 1 1 ]
/C1 [.901961 .905882 .909804 ]
/N 3.72731 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[583.793 0 0 583.793 452.308 452.308 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8N#srr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrVc]nrVc]nrVc]nrVc]nrVc]n
rVc]mr;?Kjr;?Kjr;?Kjr;6Bgqtp9fqtp9fqtg0cqYL'bqYL'aq>'j^q>'j]q"XXZq"XUXp\4FVp\+=S
p@e4Qp%A"Np%7nKo^qbHoCMSEo()AAnaZ/>nF5r:n*f`6mdBN1mHs<-m-O'(lg*j$lKRQtkih6nkND!i
~>
<~s8N#srr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2lprVc]nrVc]nrVc]nrVc]n
rVc]nr;?Kjr;?Kjr;?Kjr;?Kiqtp9fqtp9fqtp9eqYL'bqYL'bqYBs_q>'j^q=sa[q"XXZp\4FVp\4FU
p@e4Rp@\+Op%A"Mo^qeJoCMSFoCDJCo()>@naZ,<nF5o8n*f]4mdBK0mHj3+m-F!'lK[[!l07Hrkih3m
~>
<~s8N#srr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2oqrVc]nrVc]nrVc]nrVc]n
rVc]nrVZTkr;?Kjr;?Kjr;?Kjr;6Bgqtp9fqtp9fqtg0cqYL'bqYL$`q>'j^q>'j]q"XXZq"XXYp\4FV
p\+=Sp@e4Rp%A"Np%7nKo^qeIoCMSEo()ABnaZ/>naQ&;nF,i7n*]W3md9E/m-O**lg*m%lK[Wul0.?p
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
599.012 189.333 mo
599.055 190.412 597.399 191.863 594.921 192.994 cv
592.445 194.131 590.396 194.296 589.555 193.646 cv
588.974 193.189 588.672 192.762 588.569 192.333 cv
584.243 194.876 580.201 198.037 576.707 201.63 cv
576.884 201.848 577.063 202.094 577.254 202.389 cv
577.849 203.337 577.063 205.543 575.311 207.885 cv
573.567 210.239 571.722 211.419 570.644 211.244 cv
570.136 211.156 569.756 211.008 569.465 210.822 cv
567.487 213.958 565.827 217.288 564.513 220.737 cv
564.812 220.885 565.134 221.061 565.499 221.303 cv
566.438 221.945 566.624 224.33 565.949 227.225 cv
565.288 230.122 564.039 231.969 562.954 232.244 cv
562.344 232.387 561.865 232.395 561.479 232.29 cv
560.956 235.773 560.764 239.296 560.905 242.791 cv
561.328 242.781 561.831 242.823 562.439 242.935 cv
563.588 243.156 564.73 245.288 565.271 248.225 cv
565.823 251.157 565.398 253.359 564.487 254.059 cv
563.798 254.571 563.222 254.768 562.719 254.719 cv
563.504 257.689 564.562 260.578 565.834 263.367 cv
566.161 263.246 566.521 263.137 566.963 263.043 cv
568.136 262.765 570.1 264.455 571.686 266.864 cv
571.976 267.324 572.506 268.181 572.81 268.831 cv
573.137 269.509 573.432 270.257 573.601 270.872 cv
573.957 272.129 573.944 273.109 573.634 273.629 cv
573.279 274.229 572.901 274.581 572.513 274.756 cv
574.345 277.699 576.127 280.682 577.852 283.713 cv
578.164 283.576 578.51 283.445 578.938 283.333 cv
580.133 283.014 582.605 285.009 584.649 288.647 cv
586.701 292.29 587.005 295.363 586.255 296.368 cv
585.835 296.933 585.421 297.246 585.014 297.386 cv
586.371 300.231 587.668 303.122 588.883 306.062 cv
589.237 305.949 589.625 305.854 590.106 305.791 cv
591.369 305.616 593.675 308.032 595.286 312.148 cv
596.904 316.265 596.746 319.542 595.836 320.451 cv
595.29 321.006 594.784 321.273 594.324 321.326 cv
595.194 324.294 595.987 327.3 596.654 330.356 cv
597.066 330.29 597.534 330.251 598.114 330.283 cv
599.422 330.335 601.35 333.307 602.186 337.957 cv
603.014 342.611 602.129 345.997 601.022 346.731 cv
600.243 347.25 599.617 347.37 599.103 347.236 cv
599.26 349.544 599.342 351.866 599.347 354.198 cv
599.326 356.463 li
599.688 356.509 600.078 356.583 600.531 356.716 cv
601.809 357.088 603.042 360.625 602.665 365.585 cv
602.278 370.544 600.479 373.716 599.184 374.151 cv
598.416 374.418 597.827 374.429 597.376 374.263 cv
596.802 377.147 596.088 380 595.27 382.816 cv
595.662 382.96 596.083 383.153 596.565 383.452 cv
597.733 384.158 597.989 388.014 596.312 392.798 cv
594.626 397.578 592.065 400.206 590.668 400.301 cv
589.761 400.371 589.146 400.196 588.74 399.858 cv
587.509 402.468 586.177 405.011 584.778 407.508 cv
584.927 407.639 585.073 407.754 585.23 407.912 cv
586.237 408.892 585.623 412.682 583.004 416.938 cv
580.384 421.192 577.392 423.223 575.977 423.019 cv
575.533 422.958 575.186 422.847 574.886 422.713 cv
573.166 424.993 li
571.94 426.602 570.698 428.188 569.425 429.745 cv
569.702 430.026 569.983 430.345 570.279 430.763 cv
571.123 431.936 569.881 435.55 566.652 439.334 cv
563.422 443.113 560.172 444.676 558.776 444.265 cv
558.049 444.054 557.568 443.755 557.246 443.408 cv
555.309 445.416 553.341 447.39 551.351 449.33 cv
551.586 449.641 551.821 449.99 552.061 450.425 cv
552.775 451.711 551.139 455.167 547.537 458.581 cv
543.933 461.995 540.539 463.234 539.165 462.673 cv
538.547 462.424 538.116 462.128 537.818 461.805 cv
535.148 464.145 532.45 466.438 529.733 468.699 cv
543.691 468.137 556.929 465.534 567.979 459.727 cv
575.81 455.638 582.579 450.014 588.545 442.816 cv
594.445 435.583 599.496 426.879 604.354 417.435 cv
609.224 407.99 613.928 397.808 619.473 387.505 cv
625.012 377.217 631.465 366.747 639.659 357.187 cv
640.682 355.985 641.73 354.823 642.776 353.677 cv
643.904 352.463 645.089 351.219 646.33 350.042 cv
648.786 347.668 651.418 345.466 654.168 343.432 cv
659.685 339.375 665.73 336.042 672.099 333.577 cv
684.829 328.614 698.8 327.11 712.223 329.183 cv
725.655 331.206 738.534 336.9 749.041 345.403 cv
750.366 346.463 751.622 347.553 752.888 348.711 cv
754.188 349.896 755.428 351.149 756.628 352.442 cv
758.575 354.539 760.337 356.804 761.987 359.15 cv
710.017 233.676 li
703.721 218.482 686.138 200.899 670.944 194.602 cv
658.105 189.284 li
659.03 190.381 659.946 191.479 660.791 192.632 cv
662.953 195.589 664.783 198.525 666.499 201.999 cv
668.162 205.402 669.469 208.996 670.377 212.684 cv
674.061 227.471 670.981 243.55 662.312 255.846 cv
658.008 262.007 652.356 267.229 645.939 271.002 cv
639.319 274.985 631.344 277.282 623.51 277.303 cv
615.637 277.401 607.855 275.195 601.147 271.262 cv
594.521 267.202 588.965 261.325 585.718 254.473 cv
582.05 247.322 581.31 238.917 583.063 231.527 cv
583.904 227.818 585.608 224.288 588.352 221.664 cv
589.692 220.344 591.137 219.188 592.662 218.226 cv
594.191 217.295 595.578 216.224 598.159 216.691 cv
598.077 218.745 597.168 219.764 596.458 221.028 cv
596.108 221.65 595.784 222.282 595.481 222.922 cv
595.16 223.551 594.861 224.186 594.587 224.829 cv
594.098 225.953 593.675 227.098 593.331 228.264 cv
593.49 228.348 593.66 228.447 593.845 228.563 cv
594.495 228.999 594.626 230.712 594.333 232.861 cv
594.055 235.011 593.438 236.511 592.729 236.858 cv
592.612 236.915 592.502 236.957 592.394 236.992 cv
592.622 240.048 593.406 243.037 594.723 245.748 cv
594.946 245.678 595.193 245.611 595.499 245.555 cv
596.321 245.446 597.558 246.546 598.834 248.407 cv
600.101 250.251 600.602 251.842 600.271 252.583 cv
600.164 252.819 600.045 252.998 599.925 253.146 cv
601.905 255.228 604.169 257.016 606.628 258.449 cv
606.793 258.178 607.037 257.883 607.374 257.546 cv
607.987 256.952 609.753 257.191 611.826 258.024 cv
613.9 258.853 615.202 259.91 615.339 260.746 cv
615.409 261.203 615.382 261.554 615.279 261.832 cv
617.651 262.354 620.074 262.594 622.484 262.554 cv
622.478 262.203 622.535 261.778 622.674 261.237 cv
622.911 260.384 624.568 259.695 626.811 259.373 cv
629.051 259.042 630.76 259.313 631.323 259.984 cv
631.582 260.303 631.737 260.591 631.814 260.854 cv
634.673 259.843 637.297 258.368 639.804 256.542 cv
639.527 256.25 639.268 255.797 639.011 255.133 cv
638.695 254.279 639.689 252.657 641.443 251.03 cv
643.195 249.405 644.851 248.67 645.712 248.934 cv
646.343 249.141 646.721 249.416 646.906 249.752 cv
648.978 247.157 650.688 244.287 651.986 241.249 cv
651.702 241.105 651.389 240.905 651.031 240.631 cv
650.289 240.034 650.307 238.067 650.984 235.686 cv
651.661 233.304 652.715 231.758 653.627 231.53 cv
654.028 231.436 654.36 231.415 654.641 231.453 cv
655.079 228.015 655.023 224.527 654.476 221.134 cv
654.141 221.177 653.747 221.183 653.265 221.148 cv
652.288 221.063 651.173 219.392 650.388 217.025 cv
649.596 214.658 649.623 212.775 650.265 212.062 cv
650.668 211.626 651.041 211.38 651.395 211.289 cv
649.589 207.573 647.054 203.962 644.19 200.854 cv
643.92 201.092 643.571 201.335 643.117 201.591 cv
642.222 202.08 640.27 201.244 638.218 199.564 cv
636.169 197.882 635.145 196.179 635.339 195.195 cv
635.469 194.549 635.693 194.124 635.992 193.861 cv
632.421 191.486 628.52 189.629 624.453 188.354 cv
624.373 188.8 624.158 189.337 623.759 190.015 cv
623.217 190.914 621.085 191.195 618.45 190.767 cv
615.813 190.341 614.069 189.365 613.74 188.389 cv
613.428 187.44 613.52 186.805 613.905 186.376 cv
608.807 186.039 603.683 186.581 598.82 187.96 cv
598.915 188.333 598.982 188.778 599.012 189.333 cv
cp
.101961 .101961 .156863 rgb
f
489.076 401.25 mo
486.835 401.25 485.02 407.455 485.02 415.112 cv
485.02 422.769 486.835 428.979 489.076 428.979 cv
491.317 428.979 493.133 422.769 493.133 415.112 cv
493.133 407.455 491.317 401.25 489.076 401.25 cv
cp
f
322.121 172.58 mo
323.78 173.346 325.412 174.174 326.999 175.074 cv
328.527 175.949 330.02 176.841 331.481 177.813 cv
334.414 179.731 337.206 181.874 339.861 184.178 cv
350.476 193.425 358.464 205.669 362.695 219.111 cv
366.983 232.535 367.531 247.181 364.177 260.984 cv
363.332 264.43 362.275 267.83 360.969 271.128 cv
360.329 272.783 359.607 274.402 358.859 276.01 cv
358.47 276.804 358.093 277.608 357.677 278.388 cv
357.058 279.579 li
356.338 280.875 li
354.021 284.773 li
351.978 288.3 li
350.635 290.657 349.337 293.023 348.09 295.409 cv
338.123 314.403 331.29 334.54 331.952 353.667 cv
332.247 363.214 334.372 372.462 338.228 381.288 cv
342.157 390.08 347.75 398.412 354.417 406.223 cv
367.826 421.864 385.272 435.199 403.75 447.105 cv
406.6 449.125 419.563 439.85 411.171 432.341 cv
401.114 422.28 405.734 410.789 409.042 399.185 cv
412.036 388.674 409.143 382.043 402.408 373.811 cv
387.34 355.389 381.289 332.53 383.073 309.156 cv
384.394 291.844 388.685 274.381 400.917 260.222 cv
409.879 249.851 438.22 228.233 452.308 228.233 cv
466.396 228.233 494.737 249.851 503.697 260.222 cv
515.932 274.381 520.223 291.844 521.542 309.156 cv
523.326 332.53 517.275 355.389 502.206 373.811 cv
495.473 382.043 492.58 388.674 495.574 399.185 cv
498.881 410.789 503.501 422.28 493.443 432.341 cv
485.053 439.85 498.016 449.125 500.864 447.105 cv
519.343 435.199 536.788 421.864 550.199 406.223 cv
556.866 398.412 562.46 390.08 566.388 381.288 cv
570.244 372.462 572.369 363.214 572.664 353.667 cv
573.325 334.54 566.492 314.403 556.524 295.409 cv
555.278 293.023 553.98 290.657 552.639 288.3 cv
550.595 284.773 li
548.277 280.875 li
547.559 279.579 li
546.938 278.388 li
546.521 277.608 546.146 276.804 545.756 276.01 cv
545.008 274.402 544.287 272.783 543.646 271.128 cv
542.341 267.83 541.284 264.43 540.438 260.984 cv
537.085 247.181 537.632 232.535 541.921 219.111 cv
546.151 205.669 554.14 193.425 564.754 184.178 cv
567.409 181.874 570.201 179.731 573.136 177.813 cv
574.596 176.841 576.088 175.949 577.616 175.074 cv
579.203 174.174 580.835 173.346 582.495 172.58 cv
589.141 169.518 596.337 167.607 603.622 166.96 cv
603.79 166.946 603.957 166.939 604.125 166.925 cv
479.935 115.484 li
464.739 109.19 439.87 109.19 424.673 115.484 cv
300.483 166.925 li
300.653 166.939 300.824 166.946 300.995 166.96 cv
308.279 167.607 315.475 169.518 322.121 172.58 cv
cp
f
411.482 415.112 mo
411.482 422.769 413.299 428.979 415.539 428.979 cv
417.78 428.979 419.596 422.769 419.596 415.112 cv
419.596 407.455 417.78 401.25 415.539 401.25 cv
413.299 401.25 411.482 407.455 411.482 415.112 cv
cp
f
772.822 385.303 mo
774.887 397.378 773.461 410.002 768.646 421.263 cv
765.888 427.711 762.029 433.674 757.38 438.831 cv
752.551 444.225 746.498 448.722 739.855 451.752 cv
726.555 457.889 710.896 458.177 697.486 452.616 cv
694.137 451.241 690.935 449.515 687.949 447.489 cv
684.932 445.416 682.284 443.25 679.595 440.443 cv
674.354 434.936 670.574 428.023 668.763 420.686 cv
666.889 413.346 667.127 405.577 669.15 398.363 cv
671.363 391.165 675.314 384.629 680.948 379.718 cv
686.688 374.481 694.251 371.629 701.556 371.218 cv
705.212 370.979 708.941 371.573 712.131 373.386 cv
713.727 374.26 715.202 375.271 716.524 376.413 cv
717.819 377.562 719.208 378.527 719.515 381.098 cv
717.584 381.685 716.383 381.151 715.012 380.88 cv
714.338 380.744 713.661 380.628 712.985 380.547 cv
712.316 380.431 711.646 380.343 710.975 380.284 cv
709.803 380.157 708.627 380.094 707.456 380.104 cv
707.426 380.284 707.384 380.477 707.326 380.687 cv
707.108 381.449 705.569 382.064 703.507 382.397 cv
701.445 382.732 699.885 382.539 699.365 381.966 cv
699.279 381.864 699.21 381.77 699.147 381.678 cv
696.384 382.714 693.831 384.238 691.655 386.163 cv
691.787 386.356 691.919 386.578 692.055 386.855 cv
692.4 387.603 691.677 389.086 690.336 390.701 cv
688.955 392.358 687.585 393.216 686.787 393.086 cv
686.536 393.04 686.333 392.973 686.159 392.893 cv
684.736 395.271 683.644 397.821 682.915 400.463 cv
683.222 400.554 683.57 400.712 683.985 400.951 cv
684.715 401.383 684.954 403.09 684.684 405.225 cv
684.415 407.357 683.701 408.822 682.932 409.145 cv
682.503 409.32 682.154 409.377 681.862 409.346 cv
681.936 411.684 682.276 414.006 682.86 416.25 cv
683.203 416.163 683.63 416.113 684.187 416.117 cv
685.066 416.138 686.12 417.529 686.915 419.559 cv
687.717 421.589 687.807 423.264 687.271 423.953 cv
687.015 424.276 686.771 424.487 686.53 424.62 cv
688.1 427.072 690.033 429.271 692.244 431.146 cv
692.467 430.809 692.845 430.451 693.424 430.04 cv
694.179 429.523 695.941 430.075 697.855 431.368 cv
699.766 432.656 700.801 434.068 700.715 434.972 cv
700.652 435.625 700.465 436.053 700.181 436.313 cv
703.064 437.7 706.116 438.701 709.241 439.292 cv
709.323 438.983 709.447 438.638 709.638 438.23 cv
710.052 437.37 711.909 436.955 714.288 437.113 cv
716.664 437.269 718.329 437.999 718.727 438.835 cv
718.896 439.214 718.983 439.533 719.002 439.814 cv
722.331 439.547 725.607 438.824 728.715 437.675 cv
728.608 437.355 728.524 436.97 728.461 436.493 cv
728.352 435.522 729.715 434.117 731.812 432.947 cv
733.907 431.774 735.703 431.487 736.514 432.003 cv
737.006 432.323 737.312 432.646 737.469 432.977 cv
740.738 430.598 743.466 427.697 745.897 424.335 cv
745.611 424.119 745.303 423.823 744.959 423.429 cv
744.297 422.658 744.69 420.633 745.891 418.375 cv
747.095 416.12 748.546 414.86 749.544 414.877 cv
750.196 414.895 750.657 415.035 750.975 415.274 cv
752.571 411.466 753.621 407.449 754.121 403.375 cv
753.666 403.375 753.098 403.262 752.361 402.999 cv
751.389 402.633 750.705 400.66 750.659 398.088 cv
750.613 395.52 751.28 393.697 752.189 393.219 cv
753.07 392.766 753.712 392.745 754.2 393.04 cv
753.671 388.147 752.346 383.364 750.285 378.949 cv
749.936 379.104 749.505 379.237 748.965 379.356 cv
747.907 379.578 746.246 378.236 744.795 376.055 cv
743.344 373.871 742.936 371.928 743.453 371.015 cv
743.822 370.386 744.206 370.021 744.611 369.852 cv
743.127 368.008 741.484 366.298 739.728 364.717 cv
737.961 363.15 736.006 361.612 734.016 360.26 cv
733.831 360.474 733.623 360.695 733.364 360.934 cv
732.54 361.686 730.288 361.338 727.779 360.052 cv
725.261 358.785 723.861 357.19 723.877 356.098 cv
723.889 355.585 723.974 355.192 724.112 354.872 cv
720.819 353.492 717.404 352.431 713.924 351.708 cv
713.828 352.027 713.708 352.372 713.527 352.775 cv
713.045 353.818 710.803 354.384 707.951 354.18 cv
705.096 353.987 703.159 353.028 702.742 352.002 cv
702.515 351.423 702.44 350.949 702.484 350.552 cv
699.093 350.563 695.711 350.882 692.394 351.5 cv
692.465 351.918 692.494 352.42 692.478 353.039 cv
692.432 354.215 690.556 355.624 687.827 356.547 cv
685.097 357.464 682.932 357.323 682.132 356.501 cv
681.538 355.876 681.273 355.336 681.248 354.83 cv
678.521 355.985 675.881 357.331 673.39 358.901 cv
673.548 359.21 673.703 359.554 673.856 359.976 cv
674.25 361.114 673.014 363.171 670.773 365.071 cv
668.543 366.982 666.424 367.664 665.351 367.187 cv
664.747 366.912 664.336 366.606 664.075 366.27 cv
663.082 367.242 662.146 368.247 661.225 369.304 cv
660.308 370.354 659.296 371.563 658.398 372.694 cv
658.642 372.933 658.894 373.2 659.168 373.54 cv
659.932 374.513 659.323 377.094 657.479 379.915 cv
655.637 382.739 653.523 384.175 652.319 383.996 cv
651.648 383.891 651.169 383.694 650.83 383.431 cv
649.402 385.713 648.031 388.053 646.706 390.438 cv
647.012 390.645 647.334 390.883 647.689 391.207 cv
648.635 392.067 648.41 394.874 646.873 398.18 cv
645.335 401.485 643.286 403.329 642.028 403.312 cv
641.275 403.301 640.73 403.146 640.35 402.886 cv
636.937 410.223 li
637.31 410.417 637.709 410.663 638.162 411.017 cv
639.188 411.825 639.143 414.86 637.643 418.537 cv
636.143 422.222 633.996 424.317 632.694 424.35 cv
631.792 424.375 631.189 424.17 630.793 423.823 cv
628.209 429.404 li
627.345 431.22 li
627.658 431.41 627.982 431.631 628.345 431.929 cv
629.379 432.779 629.214 436.059 627.354 440.012 cv
625.488 443.965 622.992 446.112 621.643 446.056 cv
620.854 446.031 620.296 445.844 619.916 445.55 cv
618.58 447.887 617.186 450.218 615.694 452.518 cv
616.03 452.772 616.381 453.07 616.763 453.487 cv
617.697 454.492 616.995 458.02 614.237 461.99 cv
611.47 465.968 608.323 467.786 606.964 467.483 cv
606.077 467.299 605.535 466.961 605.233 466.529 cv
603.378 468.661 601.41 470.73 599.349 472.718 cv
599.455 472.887 599.559 473.037 599.665 473.234 cv
600.342 474.453 598.66 477.951 594.699 481.26 cv
590.733 484.562 587.056 485.461 585.801 484.782 cv
585.401 484.572 585.113 484.347 584.879 484.116 cv
584.057 484.646 583.219 485.151 582.379 485.657 cv
580.597 486.728 578.782 487.744 576.942 488.691 cv
577.083 489.062 577.212 489.468 577.315 489.972 cv
577.621 491.375 574.887 494.305 570.104 496.384 cv
565.319 498.463 561.565 498.314 560.517 497.318 cv
559.963 496.787 559.678 496.299 559.56 495.839 cv
556.837 496.71 554.1 497.483 551.358 498.171 cv
551.404 498.559 551.432 498.977 551.418 499.475 cv
551.39 500.946 548.121 503.152 543.133 504.164 cv
538.144 505.179 534.567 504.329 533.727 503.106 cv
533.348 502.559 533.15 502.074 533.078 501.642 cv
526.435 502.542 519.822 503.074 513.243 503.388 cv
526.374 510.093 539.841 514.508 553.188 514.742 cv
561.659 514.947 570.262 513.594 579.352 511.107 cv
588.399 508.547 597.869 504.94 607.831 501.368 cv
617.783 497.785 628.244 494.287 639.056 491.597 cv
644.497 490.244 649.852 489.104 655.562 488.147 cv
661.863 487.101 668.372 486.826 674.781 487.357 cv
687.624 488.4 700.126 492.706 710.848 499.668 cv
721.582 506.607 730.569 516.211 736.722 527.404 cv
739.807 532.992 742.187 538.96 743.805 545.1 cv
745.4 551.105 746.381 557.887 746.158 564.501 cv
745.815 577.803 741.205 590.875 733.274 601.397 cv
725.404 611.971 714.156 620.006 701.627 624.006 cv
698.467 625.004 695.367 625.734 692.01 626.262 cv
688.615 626.773 685.159 626.968 681.718 626.823 cv
674.832 626.542 668.021 624.906 661.796 622.064 cv
649.323 616.424 639.255 605.842 634.326 593.145 cv
633.082 589.986 632.155 586.714 631.548 583.4 cv
630.896 579.951 630.653 576.324 630.845 572.766 cv
631.224 565.618 633.377 558.607 637.001 552.525 cv
640.589 546.402 645.779 541.303 651.789 537.643 cv
654.849 535.89 658.093 534.488 661.447 533.541 cv
663.121 533.066 664.821 532.701 666.524 532.463 cv
668.229 532.225 670.119 532.068 671.919 532.121 cv
679.229 532.096 686.278 534.738 691.777 538.851 cv
694.548 540.881 696.896 543.536 698.115 546.789 cv
698.747 548.387 699.216 550.013 699.5 551.643 cv
699.759 553.262 700.22 554.783 698.867 556.929 cv
697.013 556.304 696.426 555.218 695.56 554.234 cv
695.141 553.742 694.703 553.272 694.245 552.823 cv
693.82 552.349 693.372 551.899 692.915 551.463 cv
692.129 550.684 691.299 549.956 690.436 549.275 cv
690.302 549.395 690.15 549.521 689.975 549.651 cv
689.341 550.104 687.824 549.683 686.133 548.695 cv
684.445 547.698 683.458 546.585 683.453 545.813 cv
683.453 545.683 683.465 545.566 683.479 545.454 cv
680.869 544.534 678.123 544.063 675.402 544.063 cv
675.373 544.296 675.327 544.548 675.249 544.843 cv
675.028 545.626 673.584 546.266 671.662 546.557 cv
669.756 546.845 668.193 546.567 667.719 545.928 cv
667.568 545.726 667.464 545.538 667.387 545.366 cv
664.911 546.15 662.545 547.232 660.368 548.598 cv
660.528 548.869 660.684 549.224 660.83 549.673 cv
661.08 550.479 660.189 551.854 658.635 553.136 cv
657.088 554.425 655.618 554.92 654.853 554.61 cv
654.432 554.432 654.143 554.228 653.952 554.007 cv
652.491 555.644 651.209 557.428 650.123 559.317 cv
650.43 559.493 650.769 559.756 651.168 560.142 cv
651.788 560.764 651.613 562.408 650.789 564.283 cv
649.969 566.159 648.851 567.305 647.988 567.381 cv
647.582 567.417 647.261 567.384 646.996 567.308 cv
646.38 569.966 646.144 572.699 646.296 575.406 cv
646.693 575.344 647.215 575.368 647.906 575.491 cv
648.8 575.671 649.604 577.139 649.989 579.165 cv
650.39 581.266 650.065 582.927 649.359 583.468 cv
648.838 583.86 648.4 584.025 648.019 584.013 cv
648.973 586.857 650.277 589.572 651.883 592.083 cv
652.163 591.929 652.498 591.782 652.924 591.635 cv
653.82 591.339 655.347 592.309 656.753 594.043 cv
658.158 595.774 658.674 597.419 658.304 598.269 cv
658.133 598.641 657.951 598.915 657.757 599.119 cv
660.045 601.254 662.609 603.081 665.345 604.553 cv
665.517 604.261 665.747 603.941 666.06 603.576 cv
666.704 602.846 668.567 602.888 670.69 603.649 cv
672.816 604.412 674.096 605.58 674.206 606.519 cv
674.265 607.102 674.213 607.541 674.066 607.874 cv
677.737 608.745 681.523 609.023 685.249 608.71 cv
685.23 608.354 685.249 607.928 685.314 607.412 cv
685.457 606.407 687.049 605.402 689.273 604.858 cv
691.606 604.285 693.418 604.591 694.032 605.359 cv
694.438 605.869 694.629 606.308 694.661 606.705 cv
698.338 605.477 701.84 603.79 705.059 601.683 cv
704.769 601.331 704.49 600.826 704.21 600.095 cv
703.851 599.125 704.818 597.391 706.638 595.813 cv
708.45 594.232 710.216 593.688 711.133 594.097 cv
712.027 594.507 712.452 594.991 712.547 595.539 cv
715.772 592.242 718.488 588.465 720.548 584.378 cv
720.213 584.198 719.837 583.946 719.406 583.602 cv
718.575 582.916 718.549 580.879 719.334 578.543 cv
720.116 576.204 721.399 574.816 722.425 574.701 cv
723.146 574.631 723.668 574.722 724.048 574.937 cv
725.107 570.623 725.502 566.174 725.225 561.778 cv
724.942 561.77 724.643 561.741 724.295 561.691 cv
723.191 561.52 722.104 559.741 721.572 557.273 cv
721.045 554.836 721.411 552.738 722.281 552.135 cv
722.692 551.832 723.056 551.657 723.391 551.569 cv
722.471 548.342 721.264 545.207 719.786 542.223 cv
719.475 542.346 719.129 542.464 718.704 542.573 cv
717.6 542.845 715.823 541.542 714.331 539.321 cv
712.843 537.094 712.499 535.078 713.083 534.148 cv
713.414 533.629 713.75 533.287 714.09 533.08 cv
712.155 530.563 710.007 528.213 707.675 526.072 cv
707.384 526.383 707.001 526.708 706.502 527.067 cv
705.543 527.738 703.38 527.176 701.158 525.635 cv
698.938 524.089 697.885 522.313 698.103 521.197 cv
698.274 520.366 698.564 519.831 698.949 519.513 cv
696.57 518.068 694.09 516.808 691.534 515.743 cv
691.374 516.049 691.188 516.376 690.935 516.749 cv
690.242 517.738 687.964 517.959 685.293 517.268 cv
682.623 516.578 680.99 515.241 680.803 514.1 cv
680.706 513.449 680.732 512.937 680.859 512.533 cv
678.313 512.045 675.736 511.736 673.158 511.627 cv
673.11 511.965 673.047 512.326 672.942 512.748 cv
672.627 513.941 670.538 514.968 667.759 515.259 cv
664.979 515.543 662.944 514.852 662.36 513.815 cv
662.041 513.236 661.887 512.745 661.856 512.312 cv
660.703 512.51 659.646 512.727 658.377 513.004 cv
654.601 513.864 li
654.654 514.227 654.697 514.623 654.705 515.104 cv
654.722 516.379 652.629 518.076 649.396 519.098 cv
646.164 520.119 643.629 519.8 642.831 518.852 cv
642.355 518.283 642.107 517.773 642.038 517.32 cv
639.677 518.048 637.324 518.824 634.976 519.632 cv
635.092 520.035 635.189 520.492 635.254 521.065 cv
635.395 522.36 633.404 524.324 630.116 525.693 cv
626.827 527.067 624.128 526.961 623.227 526.06 cv
622.604 525.431 622.319 524.865 622.266 524.342 cv
617.111 526.393 li
615.434 527.067 li
615.539 527.418 615.634 527.798 615.707 528.262 cv
615.917 529.579 613.89 531.748 610.374 533.337 cv
606.854 534.925 603.916 534.893 602.966 533.979 cv
602.406 533.446 602.103 532.947 601.99 532.48 cv
599.743 533.364 597.471 534.235 595.164 535.086 cv
595.281 535.486 595.384 535.937 595.451 536.494 cv
595.612 537.851 593.292 540.098 589.275 541.59 cv
585.252 543.084 582 542.791 581.096 541.772 cv
580.502 541.116 580.244 540.533 580.221 540.007 cv
577.764 540.705 575.262 541.342 572.719 541.898 cv
572.724 542.097 572.736 542.279 572.729 542.5 cv
572.689 543.898 569.773 545.899 565.151 546.712 cv
560.522 547.513 557.162 546.515 556.451 545.308 cv
556.223 544.927 556.092 544.59 556.005 544.271 cv
553.292 544.403 li
551.367 544.478 549.438 544.51 547.51 544.478 cv
547.459 544.871 547.386 545.293 547.245 545.781 cv
546.868 547.165 543.341 548.454 538.47 548.103 cv
533.602 547.745 530.544 545.935 530.125 544.565 cv
529.903 543.845 529.885 543.279 529.992 542.82 cv
527.345 542.366 524.723 541.834 522.133 541.222 cv
521.997 541.587 521.832 541.975 521.597 542.408 cv
520.908 543.712 517.201 544.215 512.576 542.918 cv
507.957 541.622 505.35 539.308 505.202 537.857 cv
505.133 537.2 505.189 536.685 505.326 536.267 cv
500.566 534.595 497.688 534.397 491.896 532.508 cv
489.656 541.33 493.292 548.193 496.029 552.04 cv
500.749 558.671 508.409 567.445 516.212 573.384 cv
524.037 579.327 532.521 584.979 541.254 590.661 cv
550.046 596.27 559.105 601.894 568.191 608.051 cv
577.26 614.226 586.416 620.877 595.084 629.128 cv
599.404 633.265 603.595 637.828 607.373 643.04 cv
608.763 645.028 li
609.209 645.699 609.823 646.58 610.245 647.325 cv
611.219 648.947 611.928 650.248 612.691 651.733 cv
614.186 654.624 615.486 657.623 616.607 660.687 cv
621.097 672.944 622.408 686.313 620.445 699.121 cv
618.511 711.941 613.352 724.227 605.529 734.539 cv
604.526 735.863 603.481 737.152 602.395 738.407 cv
670.936 710.017 li
686.135 703.722 703.719 686.136 710.012 670.942 cv
789.128 479.928 li
795.423 464.737 795.423 439.872 789.128 424.677 cv
772.822 385.303 li
cp
f
593.865 682.925 mo
593.374 680.172 593.901 678.11 594.866 677.457 cv
595.414 677.092 595.891 676.901 596.313 676.849 cv
595.691 674.296 594.876 671.799 593.891 669.371 cv
593.563 669.47 593.208 669.564 592.779 669.646 cv
591.556 669.856 589.744 668.363 588.299 665.92 cv
587.582 664.69 587.142 663.542 587.007 662.589 cv
586.912 661.729 587.077 661.002 587.428 660.563 cv
587.826 660.057 588.202 659.709 588.572 659.488 cv
587.222 657.641 585.697 655.779 584.066 654.013 cv
583.776 654.237 583.45 654.47 583.039 654.715 cv
581.934 655.35 579.596 654.511 577.195 652.436 cv
574.791 650.359 573.731 648.122 574.107 646.942 cv
574.334 646.24 574.623 645.758 574.968 645.449 cv
573.109 643.907 571.188 642.404 569.213 640.933 cv
568.944 641.256 568.624 641.597 568.19 641.973 cv
567.198 642.819 564.491 642.31 561.516 640.427 cv
558.535 638.54 557.063 636.3 557.275 635.042 cv
557.423 634.172 557.717 633.609 558.109 633.262 cv
553.441 630.293 li
551.912 629.343 li
551.692 629.631 551.439 629.936 551.112 630.27 cv
550.171 631.221 547.245 630.873 543.925 629.061 cv
540.602 627.25 538.895 624.966 539.037 623.659 cv
539.12 622.894 539.326 622.35 539.62 621.969 cv
533.474 618.377 li
533.238 618.725 532.959 619.09 532.575 619.501 cv
531.637 620.498 528.544 620.185 525.004 618.296 cv
521.462 616.41 519.64 614.008 519.777 612.662 cv
519.865 611.794 520.111 611.208 520.467 610.825 cv
514.214 607.138 li
513.812 607.583 li
512.828 608.58 509.585 608.155 505.908 606.014 cv
502.227 603.871 500.4 601.243 500.6 599.867 cv
500.661 599.438 500.767 599.095 500.896 598.792 cv
498.787 597.388 li
494.31 594.327 li
494.05 594.626 493.755 594.932 493.368 595.266 cv
492.281 596.2 488.88 595.444 485.146 592.74 cv
481.41 590.028 479.729 586.973 480.08 585.579 cv
480.258 584.852 480.53 584.355 480.857 584.017 cv
478.829 582.303 476.828 580.507 474.857 578.638 cv
474.557 578.885 474.219 579.133 473.792 579.391 cv
472.542 580.148 469.029 578.698 465.525 574.933 cv
462.018 571.157 460.867 567.409 461.515 566.064 cv
461.799 565.453 462.123 565.042 462.468 564.769 cv
458.512 559.447 455.007 553.473 452.308 546.988 cv
449.608 553.473 446.104 559.447 442.148 564.769 cv
442.493 565.042 442.818 565.453 443.101 566.064 cv
443.749 567.409 442.598 571.157 439.091 574.933 cv
435.585 578.698 432.073 580.148 430.823 579.391 cv
430.398 579.133 430.059 578.885 429.759 578.638 cv
427.787 580.507 425.787 582.303 423.758 584.017 cv
424.086 584.355 424.358 584.852 424.536 585.579 cv
424.887 586.973 423.205 590.028 419.469 592.74 cv
415.736 595.444 412.334 596.2 411.247 595.266 cv
410.861 594.932 410.565 594.626 410.306 594.327 cv
405.827 597.388 li
403.72 598.792 li
403.848 599.095 403.954 599.438 404.016 599.867 cv
404.215 601.243 402.389 603.871 398.708 606.014 cv
395.03 608.155 391.788 608.58 390.804 607.583 cv
390.401 607.138 li
384.148 610.825 li
384.504 611.208 384.75 611.794 384.838 612.662 cv
384.977 614.008 383.154 616.41 379.612 618.296 cv
376.071 620.185 372.979 620.498 372.041 619.501 cv
371.656 619.09 371.377 618.725 371.142 618.377 cv
364.995 621.969 li
365.29 622.35 365.496 622.894 365.579 623.659 cv
365.721 624.966 364.014 627.25 360.691 629.061 cv
357.37 630.873 354.444 631.221 353.503 630.27 cv
353.176 629.936 352.923 629.631 352.704 629.343 cv
351.174 630.293 li
346.506 633.262 li
346.898 633.609 347.193 634.172 347.341 635.042 cv
347.553 636.3 346.08 638.54 343.099 640.427 cv
340.123 642.31 337.417 642.819 336.426 641.973 cv
335.993 641.597 335.671 641.256 335.402 640.933 cv
333.428 642.404 331.505 643.907 329.647 645.449 cv
329.992 645.758 330.281 646.24 330.508 646.942 cv
330.883 648.122 329.825 650.359 327.42 652.436 cv
325.02 654.511 322.681 655.35 321.576 654.715 cv
321.165 654.47 320.839 654.237 320.549 654.013 cv
318.918 655.779 317.394 657.641 316.042 659.488 cv
316.413 659.709 316.789 660.057 317.188 660.563 cv
317.539 661.002 317.704 661.729 317.609 662.589 cv
317.474 663.542 317.033 664.69 316.317 665.92 cv
314.871 668.363 313.059 669.856 311.837 669.646 cv
311.408 669.564 311.052 669.47 310.725 669.371 cv
309.74 671.799 308.925 674.296 308.303 676.849 cv
308.725 676.901 309.201 677.092 309.748 677.457 cv
310.715 678.11 311.241 680.172 310.75 682.925 cv
310.273 685.68 309.124 687.685 307.936 687.906 cv
307.493 687.984 307.119 688.022 306.773 688.04 cv
306.689 690.843 306.807 693.663 307.158 696.459 cv
307.608 696.237 308.214 696.195 309.042 696.39 cv
310.142 696.652 311.339 698.365 311.84 701.063 cv
312.353 703.758 311.99 705.987 310.979 706.593 cv
310.446 706.901 309.991 707.119 309.592 707.259 cv
310.611 710.301 311.895 713.261 313.426 716.096 cv
313.753 715.867 314.202 715.702 314.815 715.61 cv
315.908 715.463 317.62 716.623 319.068 718.916 cv
320.514 721.218 321.004 723.385 320.308 724.291 cv
320.038 724.634 319.79 724.901 319.551 725.137 cv
321.711 727.732 324.123 730.132 326.74 732.299 cv
326.957 732.028 327.265 731.769 327.705 731.516 cv
328.645 730.985 330.629 731.434 332.813 733.012 cv
334.946 734.58 336.096 736.284 335.82 737.366 cv
335.724 737.704 335.624 737.992 335.52 738.251 cv
339.47 740.342 343.746 741.828 348.174 742.624 cv
348.133 742.192 348.264 741.68 348.626 741.047 cv
349.155 740.152 350.967 739.559 353.452 739.794 cv
355.939 740.015 357.814 740.879 358.108 741.904 cv
358.25 742.438 358.329 742.882 358.359 743.265 cv
362.991 743.025 367.607 742.049 371.978 740.387 cv
371.509 740.082 371.238 739.502 371.223 738.516 cv
371.223 737.507 372.45 736.099 374.654 735.052 cv
376.856 734.002 378.848 733.785 379.601 734.501 cv
380.16 735.048 380.514 735.508 380.72 735.912 cv
383.978 733.771 386.958 731.188 389.569 728.252 cv
389.22 728.072 388.889 727.719 388.582 727.145 cv
388.125 726.274 388.575 724.48 390.029 722.522 cv
391.515 720.543 393.036 719.559 394.03 719.799 cv
394.528 719.945 394.924 720.097 395.245 720.259 cv
397.048 716.921 398.329 713.289 398.989 709.525 cv
398.626 709.528 398.201 709.397 397.693 709.11 cv
396.876 708.633 396.313 706.975 396.457 704.691 cv
396.598 702.408 397.28 700.659 398.215 700.35 cv
398.675 700.205 399.056 700.119 399.393 700.076 cv
399.112 696.937 398.42 693.824 397.34 690.843 cv
397.075 690.94 396.75 691 396.339 691.008 cv
395.416 691.014 394.088 689.881 393.027 687.882 cv
391.963 685.887 391.645 684.085 392.263 683.371 cv
392.561 683.034 392.828 682.782 393.08 682.586 cv
391.366 680.096 389.334 677.814 387.041 675.813 cv
386.908 676.175 386.59 676.516 386.022 676.843 cv
385.248 677.277 383.589 676.944 381.752 675.736 cv
379.954 674.546 378.932 673.245 379.099 672.347 cv
379.251 671.658 379.429 671.17 379.642 670.825 cv
377.171 669.628 374.521 668.778 371.793 668.317 cv
371.764 668.592 371.667 668.9 371.48 669.263 cv
371.071 670.028 369.568 670.618 367.492 670.66 cv
365.417 670.707 363.808 670.242 363.468 669.436 cv
363.26 668.918 363.144 668.504 363.098 668.155 cv
360.909 668.444 358.743 668.968 356.646 669.713 cv
356.784 669.973 356.859 670.316 356.862 670.777 cv
356.859 671.602 355.828 672.779 354.028 673.748 cv
352.229 674.717 350.607 675.044 349.951 674.51 cv
349.589 674.204 349.316 673.931 349.123 673.681 cv
347.019 675.216 345.101 677.025 343.44 679.069 cv
343.574 679.207 343.707 679.371 343.839 679.586 cv
344.255 680.264 343.917 681.838 342.924 683.533 cv
341.924 685.233 340.795 686.36 339.979 686.276 cv
339.675 686.238 339.426 686.188 339.198 686.133 cv
338.179 688.696 337.601 691.456 337.506 694.264 cv
337.615 694.291 337.728 694.327 337.851 694.373 cv
338.562 694.664 339.243 696.009 339.559 697.969 cv
339.868 699.929 339.722 701.516 339.067 701.945 cv
338.885 702.06 338.713 702.159 338.555 702.239 cv
338.876 703.308 339.27 704.354 339.719 705.38 cv
339.963 705.974 340.226 706.56 340.521 707.133 cv
340.778 707.729 341.069 708.313 341.38 708.89 cv
342.002 710.066 342.815 711.014 342.752 712.98 cv
340.253 713.469 338.983 712.479 337.55 711.642 cv
336.121 710.775 334.758 709.735 333.486 708.551 cv
330.875 706.201 329.223 703.01 328.334 699.641 cv
326.499 692.933 326.626 685.289 329.421 678.43 cv
330.768 674.899 332.531 671.957 334.682 669.136 cv
336.84 666.341 339.387 663.818 342.195 661.609 cv
347.92 657.356 354.698 654.437 361.818 653.433 cv
368.922 652.387 376.333 653.1 383.157 655.552 cv
386.533 656.742 389.912 658.473 392.739 660.331 cv
395.607 662.188 398.311 664.334 400.784 666.73 cv
410.736 676.305 416.63 689.904 416.888 703.785 cv
417.039 710.723 415.812 717.729 413.278 724.233 cv
412.028 727.462 410.4 730.664 408.609 733.496 cv
406.858 736.303 404.877 738.985 402.699 741.504 cv
393.946 751.577 381.918 758.767 368.899 761.76 cv
366.488 762.329 364.035 762.704 361.567 762.985 cv
424.682 789.127 li
439.876 795.421 464.741 795.425 479.939 789.131 cv
543.056 762.985 li
540.586 762.704 538.129 762.329 535.716 761.76 cv
522.697 758.767 510.671 751.577 501.915 741.504 cv
499.738 738.985 497.758 736.303 496.005 733.496 cv
494.215 730.664 492.586 727.462 491.338 724.233 cv
488.804 717.729 487.577 710.723 487.727 703.785 cv
487.985 689.904 493.879 676.305 503.832 666.73 cv
506.305 664.334 509.009 662.188 511.877 660.331 cv
514.703 658.473 518.082 656.742 521.458 655.552 cv
528.282 653.1 535.693 652.387 542.797 653.433 cv
549.918 654.437 556.695 657.356 562.421 661.609 cv
565.229 663.818 567.775 666.341 569.932 669.136 cv
572.085 671.957 573.848 674.899 575.195 678.43 cv
577.988 685.289 578.118 692.933 576.282 699.641 cv
575.394 703.01 573.74 706.201 571.129 708.551 cv
569.857 709.735 568.496 710.775 567.065 711.642 cv
565.633 712.479 564.362 713.469 561.864 712.98 cv
561.801 711.014 562.613 710.066 563.235 708.89 cv
563.546 708.313 563.837 707.729 564.095 707.133 cv
564.389 706.56 564.652 705.974 564.897 705.38 cv
565.346 704.354 565.74 703.308 566.062 702.239 cv
565.902 702.159 565.731 702.06 565.549 701.945 cv
564.892 701.516 564.748 699.929 565.056 697.969 cv
565.372 696.009 566.054 694.664 566.765 694.373 cv
566.888 694.327 567 694.291 567.108 694.264 cv
567.015 691.456 566.437 688.696 565.417 686.133 cv
565.19 686.188 564.94 686.238 564.637 686.276 cv
563.82 686.36 562.69 685.233 561.69 683.533 cv
560.697 681.838 560.36 680.264 560.776 679.586 cv
560.908 679.371 561.042 679.207 561.175 679.069 cv
559.515 677.025 557.596 675.216 555.492 673.681 cv
555.299 673.931 555.027 674.204 554.665 674.51 cv
554.008 675.044 552.386 674.717 550.587 673.748 cv
548.787 672.779 547.757 671.602 547.752 670.777 cv
547.757 670.316 547.832 669.973 547.969 669.713 cv
545.872 668.968 543.707 668.444 541.517 668.155 cv
541.472 668.504 541.354 668.918 541.147 669.436 cv
540.808 670.242 539.198 670.707 537.124 670.66 cv
535.048 670.618 533.544 670.028 533.135 669.263 cv
532.948 668.9 532.852 668.592 532.822 668.317 cv
530.095 668.778 527.444 669.628 524.974 670.825 cv
525.187 671.17 525.363 671.658 525.517 672.347 cv
525.684 673.245 524.661 674.546 522.862 675.736 cv
521.026 676.944 519.368 677.277 518.594 676.843 cv
518.025 676.516 517.706 676.175 517.574 675.813 cv
515.282 677.814 513.249 680.096 511.535 682.586 cv
511.786 682.782 512.056 683.034 512.353 683.371 cv
512.971 684.085 512.653 685.887 511.588 687.882 cv
510.527 689.881 509.201 691.014 508.276 691.008 cv
507.865 691 507.541 690.94 507.276 690.843 cv
506.195 693.824 505.502 696.937 505.222 700.076 cv
505.561 700.119 505.941 700.205 506.4 700.35 cv
507.335 700.659 508.019 702.408 508.158 704.691 cv
508.303 706.975 507.738 708.633 506.922 709.11 cv
506.415 709.397 505.99 709.528 505.626 709.525 cv
506.287 713.289 507.567 716.921 509.37 720.259 cv
509.692 720.097 510.088 719.945 510.586 719.799 cv
511.58 719.559 513.1 720.543 514.587 722.522 cv
516.041 724.48 516.489 726.274 516.033 727.145 cv
515.727 727.719 515.396 728.072 515.046 728.252 cv
517.657 731.188 520.639 733.771 523.896 735.912 cv
524.102 735.508 524.455 735.048 525.015 734.501 cv
525.768 733.785 527.759 734.002 529.961 735.052 cv
532.165 736.099 533.393 737.507 533.393 738.516 cv
533.377 739.502 533.106 740.082 532.637 740.387 cv
537.008 742.049 541.624 743.025 546.257 743.265 cv
546.286 742.882 546.365 742.438 546.508 741.904 cv
546.802 740.879 548.677 740.015 551.164 739.794 cv
553.647 739.559 555.461 740.152 555.989 741.047 cv
556.351 741.68 556.482 742.192 556.44 742.624 cv
560.869 741.828 565.146 740.342 569.096 738.251 cv
568.991 737.992 568.892 737.704 568.795 737.366 cv
568.52 736.284 569.669 734.58 571.801 733.012 cv
573.985 731.434 575.972 730.985 576.91 731.516 cv
577.351 731.769 577.657 732.028 577.876 732.299 cv
580.492 730.132 582.904 727.732 585.063 725.137 cv
584.825 724.901 584.578 724.634 584.308 724.291 cv
583.611 723.385 584.103 721.218 585.547 718.916 cv
586.996 716.623 588.709 715.463 589.8 715.61 cv
590.414 715.702 590.862 715.867 591.189 716.096 cv
592.72 713.261 594.005 710.301 595.023 707.259 cv
594.625 707.119 594.17 706.901 593.637 706.593 cv
592.626 705.987 592.262 703.758 592.774 701.063 cv
593.276 698.365 594.474 696.652 595.572 696.39 cv
596.401 696.195 597.008 696.237 597.458 696.459 cv
597.809 693.663 597.926 690.843 597.842 688.04 cv
597.496 688.022 597.121 687.984 596.679 687.906 cv
595.493 687.685 594.342 685.68 593.865 682.925 cv
cp
f
291.923 651.733 mo
292.687 650.248 293.397 648.947 294.37 647.325 cv
294.793 646.58 295.406 645.699 295.852 645.028 cv
297.243 643.04 li
301.021 637.828 305.21 633.265 309.531 629.128 cv
318.199 620.877 327.355 614.226 336.424 608.051 cv
345.509 601.894 354.569 596.27 363.362 590.661 cv
372.094 584.979 380.578 579.327 388.403 573.384 cv
396.205 567.445 403.866 558.671 408.587 552.04 cv
411.323 548.193 414.96 541.33 412.719 532.508 cv
406.927 534.397 404.049 534.595 399.29 536.267 cv
399.427 536.685 399.483 537.2 399.414 537.857 cv
399.265 539.308 396.659 541.622 392.038 542.918 cv
387.415 544.215 383.707 543.712 383.019 542.408 cv
382.784 541.975 382.618 541.587 382.483 541.222 cv
379.893 541.834 377.271 542.366 374.622 542.82 cv
374.731 543.279 374.712 543.845 374.491 544.565 cv
374.071 545.935 371.014 547.745 366.146 548.103 cv
361.276 548.454 357.748 547.165 357.37 545.781 cv
357.23 545.293 357.156 544.871 357.106 544.478 cv
355.177 544.51 353.248 544.478 351.324 544.403 cv
348.61 544.271 li
348.524 544.59 348.393 544.927 348.164 545.308 cv
347.453 546.515 344.094 547.513 339.464 546.712 cv
334.842 545.899 331.927 543.898 331.886 542.5 cv
331.879 542.279 331.892 542.097 331.897 541.898 cv
329.354 541.342 326.852 540.705 324.395 540.007 cv
324.371 540.533 324.114 541.116 323.521 541.772 cv
322.616 542.791 319.364 543.084 315.34 541.59 cv
311.324 540.098 309.002 537.851 309.164 536.494 cv
309.232 535.937 309.334 535.486 309.452 535.086 cv
307.144 534.235 304.872 533.364 302.625 532.48 cv
302.513 532.947 302.209 533.446 301.649 533.979 cv
300.699 534.893 297.761 534.925 294.242 533.337 cv
290.726 531.748 288.699 529.579 288.908 528.262 cv
288.982 527.798 289.077 527.418 289.182 527.067 cv
287.504 526.393 li
282.351 524.342 li
282.296 524.865 282.012 525.431 281.388 526.06 cv
280.487 526.961 277.788 527.067 274.5 525.693 cv
271.211 524.324 269.22 522.36 269.362 521.065 cv
269.426 520.492 269.524 520.035 269.64 519.632 cv
267.29 518.824 264.938 518.048 262.579 517.32 cv
262.508 517.773 262.261 518.283 261.785 518.852 cv
260.987 519.8 258.452 520.119 255.218 519.098 cv
251.987 518.076 249.894 516.379 249.911 515.104 cv
249.918 514.623 249.96 514.227 250.015 513.864 cv
246.239 513.004 li
244.97 512.727 243.912 512.51 242.758 512.312 cv
242.728 512.745 242.574 513.236 242.256 513.815 cv
241.671 514.852 239.638 515.543 236.858 515.259 cv
234.076 514.968 231.987 513.941 231.673 512.748 cv
231.568 512.326 231.505 511.965 231.458 511.627 cv
228.879 511.736 226.303 512.045 223.756 512.533 cv
223.883 512.937 223.909 513.449 223.813 514.1 cv
223.625 515.241 221.992 516.578 219.323 517.268 cv
216.651 517.959 214.374 517.738 213.682 516.749 cv
213.429 516.376 213.241 516.049 213.081 515.743 cv
210.526 516.808 208.046 518.068 205.667 519.513 cv
206.052 519.831 206.341 520.366 206.513 521.197 cv
206.731 522.313 205.677 524.089 203.458 525.635 cv
201.236 527.176 199.072 527.738 198.114 527.067 cv
197.615 526.708 197.231 526.383 196.94 526.072 cv
194.608 528.213 192.46 530.563 190.524 533.08 cv
190.866 533.287 191.201 533.629 191.533 534.148 cv
192.116 535.078 191.772 537.094 190.285 539.321 cv
188.792 541.542 187.017 542.845 185.912 542.573 cv
185.487 542.464 185.141 542.346 184.83 542.223 cv
183.351 545.207 182.145 548.342 181.225 551.569 cv
181.56 551.657 181.924 551.832 182.334 552.135 cv
183.204 552.738 183.571 554.836 183.044 557.273 cv
182.51 559.741 181.425 561.52 180.32 561.691 cv
179.974 561.741 179.672 561.77 179.391 561.778 cv
179.114 566.174 179.507 570.623 180.568 574.937 cv
180.947 574.722 181.469 574.631 182.19 574.701 cv
183.216 574.816 184.5 576.204 185.281 578.543 cv
186.066 580.879 186.04 582.916 185.209 583.602 cv
184.779 583.946 184.403 584.198 184.068 584.378 cv
186.127 588.465 188.843 592.242 192.068 595.539 cv
192.164 594.991 192.586 594.507 193.483 594.097 cv
194.399 593.688 196.166 594.232 197.978 595.813 cv
199.797 597.391 200.765 599.125 200.407 600.095 cv
200.125 600.826 199.847 601.331 199.557 601.683 cv
202.774 603.79 206.278 605.477 209.955 606.705 cv
209.987 606.308 210.178 605.869 210.582 605.359 cv
211.197 604.591 213.009 604.285 215.341 604.858 cv
217.566 605.402 219.159 606.407 219.302 607.412 cv
219.367 607.928 219.386 608.354 219.367 608.71 cv
223.091 609.023 226.877 608.745 230.547 607.874 cv
230.402 607.541 230.351 607.102 230.409 606.519 cv
230.52 605.58 231.8 604.412 233.924 603.649 cv
236.048 602.888 237.912 602.846 238.556 603.576 cv
238.868 603.941 239.099 604.261 239.271 604.553 cv
242.007 603.081 244.571 601.254 246.859 599.119 cv
246.664 598.915 246.481 598.641 246.313 598.269 cv
245.94 597.419 246.457 595.774 247.863 594.043 cv
249.268 592.309 250.794 591.339 251.692 591.635 cv
252.117 591.782 252.453 591.929 252.733 592.083 cv
254.338 589.572 255.643 586.857 256.597 584.013 cv
256.214 584.025 255.777 583.86 255.257 583.468 cv
254.551 582.927 254.226 581.266 254.626 579.165 cv
255.011 577.139 255.815 575.671 256.709 575.491 cv
257.401 575.368 257.923 575.344 258.319 575.406 cv
258.47 572.699 258.235 569.966 257.619 567.308 cv
257.355 567.384 257.033 567.417 256.628 567.381 cv
255.764 567.305 254.647 566.159 253.827 564.283 cv
253.002 562.408 252.828 560.764 253.448 560.142 cv
253.847 559.756 254.186 559.493 254.493 559.317 cv
253.406 557.428 252.124 555.644 250.663 554.007 cv
250.473 554.228 250.183 554.432 249.762 554.61 cv
248.998 554.92 247.528 554.425 245.981 553.136 cv
244.426 551.854 243.535 550.479 243.786 549.673 cv
243.933 549.224 244.086 548.869 244.248 548.598 cv
242.07 547.232 239.704 546.15 237.228 545.366 cv
237.151 545.538 237.047 545.726 236.896 545.928 cv
236.422 546.567 234.859 546.845 232.954 546.557 cv
231.031 546.266 229.587 545.626 229.366 544.843 cv
229.289 544.548 229.243 544.296 229.213 544.063 cv
226.491 544.063 223.746 544.534 221.137 545.454 cv
221.151 545.566 221.161 545.683 221.161 545.813 cv
221.158 546.585 220.17 547.698 218.482 548.695 cv
216.792 549.683 215.275 550.104 214.64 549.651 cv
214.465 549.521 214.314 549.395 214.18 549.275 cv
213.316 549.956 212.486 550.684 211.701 551.463 cv
211.245 551.899 210.794 552.349 210.372 552.823 cv
209.913 553.272 209.476 553.742 209.056 554.234 cv
208.19 555.218 207.604 556.304 205.749 556.929 cv
204.396 554.783 204.857 553.262 205.115 551.643 cv
205.399 550.013 205.869 548.387 206.5 546.789 cv
207.719 543.536 210.067 540.881 212.839 538.851 cv
218.337 534.738 225.387 532.096 232.696 532.121 cv
234.496 532.068 236.387 532.225 238.09 532.463 cv
239.794 532.701 241.496 533.066 243.169 533.541 cv
246.521 534.488 249.767 535.89 252.827 537.643 cv
258.835 541.303 264.027 546.402 267.615 552.525 cv
271.238 558.607 273.393 565.618 273.77 572.766 cv
273.962 576.324 273.719 579.951 273.067 583.4 cv
272.46 586.714 271.533 589.986 270.29 593.145 cv
265.362 605.842 255.292 616.424 242.819 622.064 cv
236.596 624.906 229.784 626.542 222.898 626.823 cv
219.456 626.968 216 626.773 212.605 626.262 cv
209.247 625.734 206.149 625.004 202.989 624.006 cv
190.458 620.006 179.212 611.971 171.341 601.397 cv
163.41 590.875 158.8 577.803 158.458 564.501 cv
158.235 557.887 159.215 551.105 160.811 545.1 cv
162.428 538.96 164.81 532.992 167.894 527.404 cv
174.047 516.211 183.033 506.607 193.769 499.668 cv
204.49 492.706 216.992 488.4 229.835 487.357 cv
236.243 486.826 242.753 487.101 249.054 488.147 cv
254.764 489.104 260.118 490.244 265.56 491.597 cv
276.371 494.287 286.833 497.785 296.785 501.368 cv
306.745 504.94 316.217 508.547 325.264 511.107 cv
334.354 513.594 342.958 514.947 351.427 514.742 cv
364.773 514.508 378.242 510.093 391.373 503.388 cv
384.794 503.074 378.181 502.542 371.537 501.642 cv
371.465 502.074 371.269 502.559 370.889 503.106 cv
370.047 504.329 366.472 505.179 361.483 504.164 cv
356.494 503.152 353.226 500.946 353.198 499.475 cv
353.184 498.977 353.211 498.559 353.257 498.171 cv
350.516 497.483 347.778 496.71 345.056 495.839 cv
344.938 496.299 344.652 496.787 344.099 497.318 cv
343.05 498.314 339.296 498.463 334.512 496.384 cv
329.729 494.305 326.995 491.375 327.3 489.972 cv
327.403 489.468 327.533 489.062 327.673 488.691 cv
325.833 487.744 324.019 486.728 322.236 485.657 cv
321.397 485.151 320.56 484.646 319.735 484.116 cv
319.502 484.347 319.214 484.572 318.815 484.782 cv
317.56 485.461 313.882 484.562 309.916 481.26 cv
305.955 477.951 304.272 474.453 304.951 473.234 cv
305.056 473.037 305.162 472.887 305.267 472.718 cv
303.205 470.73 301.236 468.661 299.382 466.529 cv
299.08 466.961 298.539 467.299 297.65 467.483 cv
296.292 467.786 293.146 465.968 290.378 461.99 cv
287.621 458.02 286.918 454.492 287.853 453.487 cv
288.234 453.07 288.585 452.772 288.92 452.518 cv
287.43 450.218 286.035 447.887 284.699 445.55 cv
284.319 445.844 283.763 446.031 282.972 446.056 cv
281.624 446.112 279.126 443.965 277.261 440.012 cv
275.402 436.059 275.236 432.779 276.271 431.929 cv
276.633 431.631 276.958 431.41 277.27 431.22 cv
276.406 429.404 li
273.823 423.823 li
273.426 424.17 272.824 424.375 271.921 424.35 cv
270.62 424.317 268.474 422.222 266.973 418.537 cv
265.473 414.86 265.427 411.825 266.454 411.017 cv
266.907 410.663 267.306 410.417 267.678 410.223 cv
264.267 402.886 li
263.885 403.146 263.341 403.301 262.587 403.312 cv
261.33 403.329 259.28 401.485 257.742 398.18 cv
256.205 394.874 255.98 392.067 256.925 391.207 cv
257.282 390.883 257.603 390.645 257.908 390.438 cv
256.584 388.053 255.213 385.713 253.785 383.431 cv
253.446 383.694 252.967 383.891 252.296 383.996 cv
251.091 384.175 248.979 382.739 247.136 379.915 cv
245.292 377.094 244.683 374.513 245.447 373.54 cv
245.721 373.2 245.974 372.933 246.218 372.694 cv
245.318 371.563 244.307 370.354 243.391 369.304 cv
242.469 368.247 241.535 367.242 240.541 366.27 cv
240.278 366.606 239.868 366.912 239.266 367.187 cv
238.19 367.664 236.073 366.982 233.84 365.071 cv
231.602 363.171 230.365 361.114 230.758 359.976 cv
230.911 359.554 231.067 359.21 231.226 358.901 cv
228.734 357.331 226.094 355.985 223.367 354.83 cv
223.342 355.336 223.077 355.876 222.483 356.501 cv
221.685 357.323 219.519 357.464 216.789 356.547 cv
214.059 355.624 212.184 354.215 212.138 353.039 cv
212.121 352.42 212.15 351.918 212.222 351.5 cv
208.905 350.882 205.523 350.563 202.131 350.552 cv
202.176 350.949 202.1 351.423 201.873 352.002 cv
201.457 353.028 199.521 353.987 196.665 354.18 cv
193.813 354.384 191.57 353.818 191.088 352.775 cv
190.908 352.372 190.787 352.027 190.692 351.708 cv
187.211 352.431 183.795 353.492 180.503 354.872 cv
180.642 355.192 180.726 355.585 180.738 356.098 cv
180.754 357.19 179.354 358.785 176.836 360.052 cv
174.326 361.338 172.075 361.686 171.251 360.934 cv
170.993 360.695 170.784 360.474 170.6 360.26 cv
168.61 361.612 166.655 363.15 164.887 364.717 cv
163.131 366.298 161.489 368.008 160.005 369.852 cv
160.409 370.021 160.793 370.386 161.163 371.015 cv
161.68 371.928 161.271 373.871 159.82 376.055 cv
158.37 378.236 156.708 379.578 155.649 379.356 cv
155.11 379.237 154.68 379.104 154.331 378.949 cv
152.271 383.364 150.945 388.147 150.416 393.04 cv
150.903 392.745 151.545 392.766 152.425 393.219 cv
153.335 393.697 154.002 395.52 153.957 398.088 cv
153.911 400.66 153.226 402.633 152.255 402.999 cv
151.518 403.262 150.948 403.375 150.496 403.375 cv
150.994 407.449 152.044 411.466 153.642 415.274 cv
153.958 415.035 154.418 414.895 155.072 414.877 cv
156.069 414.86 157.52 416.12 158.725 418.375 cv
159.926 420.633 160.318 422.658 159.657 423.429 cv
159.313 423.823 159.004 424.119 158.717 424.335 cv
161.15 427.697 163.877 430.598 167.147 432.977 cv
167.304 432.646 167.611 432.323 168.103 432.003 cv
168.912 431.487 170.709 431.774 172.804 432.947 cv
174.901 434.117 176.263 435.522 176.154 436.493 cv
176.091 436.97 176.007 437.355 175.902 437.675 cv
179.008 438.824 182.285 439.547 185.613 439.814 cv
185.633 439.533 185.718 439.214 185.889 438.835 cv
186.286 437.999 187.951 437.269 190.329 437.113 cv
192.706 436.955 194.564 437.37 194.979 438.23 cv
195.168 438.638 195.293 438.983 195.374 439.292 cv
198.498 438.701 201.552 437.7 204.436 436.313 cv
204.151 436.053 203.963 435.625 203.9 434.972 cv
203.814 434.068 204.85 432.656 206.761 431.368 cv
208.673 430.075 210.437 429.523 211.191 430.04 cv
211.771 430.451 212.148 430.809 212.372 431.146 cv
214.583 429.271 216.516 427.072 218.086 424.62 cv
217.845 424.487 217.602 424.276 217.345 423.953 cv
216.81 423.264 216.899 421.589 217.699 419.559 cv
218.495 417.529 219.549 416.138 220.429 416.117 cv
220.986 416.113 221.413 416.163 221.754 416.25 cv
222.34 414.006 222.68 411.684 222.752 409.346 cv
222.461 409.377 222.113 409.32 221.685 409.145 cv
220.914 408.822 220.201 407.357 219.932 405.225 cv
219.662 403.09 219.9 401.383 220.631 400.951 cv
221.045 400.712 221.395 400.554 221.7 400.463 cv
220.972 397.821 219.879 395.271 218.457 392.893 cv
218.282 392.973 218.079 393.04 217.828 393.086 cv
217.031 393.216 215.661 392.358 214.279 390.701 cv
212.938 389.086 212.215 387.603 212.561 386.855 cv
212.697 386.578 212.829 386.356 212.96 386.163 cv
210.784 384.238 208.23 382.714 205.468 381.678 cv
205.405 381.77 205.336 381.864 205.25 381.966 cv
204.73 382.539 203.171 382.732 201.109 382.397 cv
199.045 382.064 197.507 381.449 197.29 380.687 cv
197.231 380.477 197.189 380.284 197.16 380.104 cv
195.988 380.094 194.813 380.157 193.641 380.284 cv
192.97 380.343 192.299 380.431 191.63 380.547 cv
190.954 380.628 190.277 380.744 189.603 380.88 cv
188.233 381.151 187.032 381.685 185.101 381.098 cv
185.408 378.527 186.797 377.562 188.091 376.413 cv
189.414 375.271 190.888 374.26 192.485 373.386 cv
195.674 371.573 199.404 370.979 203.061 371.218 cv
210.365 371.629 217.928 374.481 223.667 379.718 cv
229.301 384.629 233.252 391.165 235.465 398.363 cv
237.488 405.577 237.727 413.346 235.853 420.686 cv
234.041 428.023 230.262 434.936 225.021 440.443 cv
222.331 443.25 219.685 445.416 216.667 447.489 cv
213.682 449.515 210.478 451.241 207.129 452.616 cv
193.72 458.177 178.062 457.889 164.758 451.752 cv
158.117 448.722 152.064 444.225 147.236 438.831 cv
142.585 433.674 138.728 427.711 135.969 421.263 cv
131.155 410.006 129.73 397.381 131.794 385.306 cv
115.485 424.684 li
109.19 439.877 109.192 464.745 115.486 479.942 cv
194.599 670.938 li
200.894 686.133 218.476 703.719 233.67 710.008 cv
302.215 738.398 li
301.131 737.146 300.086 735.86 299.087 734.539 cv
291.265 724.227 286.104 711.941 284.17 699.121 cv
282.207 686.313 283.519 672.944 288.009 660.687 cv
289.129 657.623 290.429 654.624 291.923 651.733 cv
cp
f
151.729 348.711 mo
152.993 347.553 154.25 346.463 155.574 345.403 cv
166.081 336.9 178.961 331.206 192.392 329.183 cv
205.816 327.11 219.786 328.614 232.517 333.577 cv
238.885 336.042 244.93 339.375 250.447 343.432 cv
253.196 345.466 255.83 347.668 258.287 350.042 cv
259.526 351.219 260.711 352.463 261.839 353.677 cv
262.886 354.823 263.934 355.985 264.956 357.187 cv
273.15 366.747 279.604 377.217 285.144 387.505 cv
290.687 397.808 295.392 407.99 300.262 417.435 cv
305.119 426.879 310.17 435.583 316.07 442.816 cv
322.036 450.014 328.806 455.638 336.637 459.727 cv
347.687 465.534 360.924 468.137 374.883 468.699 cv
372.166 466.438 369.466 464.145 366.797 461.805 cv
366.499 462.128 366.068 462.424 365.45 462.673 cv
364.077 463.234 360.682 461.995 357.079 458.581 cv
353.477 455.167 351.84 451.711 352.555 450.425 cv
352.793 449.99 353.029 449.641 353.265 449.33 cv
351.274 447.39 349.308 445.416 347.369 443.408 cv
347.047 443.755 346.566 444.054 345.839 444.265 cv
344.443 444.676 341.194 443.113 337.963 439.334 cv
334.735 435.55 333.492 431.936 334.336 430.763 cv
334.631 430.345 334.914 430.026 335.192 429.745 cv
333.918 428.188 332.675 426.602 331.449 424.993 cv
329.73 422.713 li
329.429 422.847 329.082 422.958 328.639 423.019 cv
327.224 423.223 324.231 421.192 321.611 416.938 cv
318.993 412.682 318.378 408.892 319.384 407.912 cv
319.542 407.754 319.688 407.639 319.838 407.508 cv
318.44 405.011 317.106 402.468 315.875 399.858 cv
315.471 400.196 314.855 400.371 313.948 400.301 cv
312.549 400.206 309.989 397.578 308.305 392.798 cv
306.626 388.014 306.882 384.158 308.051 383.452 cv
308.532 383.153 308.953 382.96 309.346 382.816 cv
308.528 380 307.813 377.147 307.239 374.263 cv
306.788 374.429 306.199 374.418 305.432 374.151 cv
304.136 373.716 302.337 370.544 301.951 365.585 cv
301.573 360.625 302.806 357.088 304.085 356.716 cv
304.538 356.583 304.928 356.509 305.29 356.463 cv
305.269 354.198 li
305.274 351.866 305.356 349.544 305.513 347.236 cv
304.998 347.37 304.373 347.25 303.593 346.731 cv
302.487 345.997 301.602 342.611 302.431 337.957 cv
303.267 333.307 305.193 330.335 306.501 330.283 cv
307.081 330.251 307.548 330.29 307.962 330.356 cv
308.628 327.3 309.42 324.294 310.292 321.326 cv
309.831 321.273 309.325 321.006 308.779 320.451 cv
307.87 319.542 307.711 316.265 309.329 312.148 cv
310.94 308.032 313.247 305.616 314.51 305.791 cv
314.991 305.854 315.379 305.949 315.732 306.062 cv
316.947 303.122 318.245 300.231 319.603 297.386 cv
319.195 297.246 318.78 296.933 318.36 296.368 cv
317.611 295.363 317.915 292.29 319.966 288.647 cv
322.01 285.009 324.482 283.014 325.678 283.333 cv
326.105 283.445 326.451 283.576 326.764 283.713 cv
328.488 280.682 330.271 277.699 332.102 274.756 cv
331.714 274.581 331.337 274.229 330.982 273.629 cv
330.671 273.109 330.659 272.129 331.014 270.872 cv
331.184 270.257 331.479 269.509 331.806 268.831 cv
332.11 268.181 332.64 267.324 332.93 266.864 cv
334.516 264.455 336.481 262.765 337.652 263.043 cv
338.094 263.137 338.455 263.246 338.781 263.367 cv
340.053 260.578 341.112 257.689 341.896 254.719 cv
341.395 254.768 340.816 254.571 340.128 254.059 cv
339.216 253.359 338.793 251.157 339.345 248.225 cv
339.886 245.288 341.028 243.156 342.176 242.935 cv
342.784 242.823 343.287 242.781 343.708 242.791 cv
343.851 239.296 343.66 235.773 343.137 232.29 cv
342.75 232.395 342.271 232.387 341.661 232.244 cv
340.578 231.969 339.328 230.122 338.667 227.225 cv
337.991 224.33 338.177 221.945 339.117 221.303 cv
339.482 221.061 339.803 220.885 340.104 220.737 cv
338.788 217.288 337.129 213.958 335.151 210.822 cv
334.86 211.008 334.48 211.156 333.973 211.244 cv
332.895 211.419 331.047 210.239 329.305 207.885 cv
327.552 205.543 326.768 203.337 327.361 202.389 cv
327.552 202.094 327.731 201.848 327.909 201.63 cv
324.414 198.037 320.372 194.876 316.046 192.333 cv
315.944 192.762 315.642 193.189 315.062 193.646 cv
314.22 194.296 312.17 194.131 309.694 192.994 cv
307.216 191.863 305.562 190.412 305.604 189.333 cv
305.634 188.778 305.7 188.333 305.795 187.96 cv
300.933 186.581 295.808 186.039 290.71 186.376 cv
291.097 186.805 291.188 187.44 290.875 188.389 cv
290.546 189.365 288.801 190.341 286.165 190.767 cv
283.531 191.195 281.399 190.914 280.856 190.015 cv
280.458 189.337 280.241 188.8 280.163 188.354 cv
276.095 189.629 272.195 191.486 268.623 193.861 cv
268.921 194.124 269.146 194.549 269.276 195.195 cv
269.471 196.179 268.447 197.882 266.398 199.564 cv
264.345 201.244 262.394 202.08 261.499 201.591 cv
261.045 201.335 260.696 201.092 260.425 200.854 cv
257.561 203.962 255.027 207.573 253.222 211.289 cv
253.575 211.38 253.947 211.626 254.351 212.062 cv
254.994 212.775 255.02 214.658 254.228 217.025 cv
253.442 219.392 252.328 221.063 251.351 221.148 cv
250.868 221.183 250.475 221.177 250.14 221.134 cv
249.593 224.527 249.537 228.015 249.975 231.453 cv
250.256 231.415 250.587 231.436 250.99 231.53 cv
251.901 231.758 252.955 233.304 253.63 235.686 cv
254.309 238.067 254.327 240.034 253.583 240.631 cv
253.227 240.905 252.914 241.105 252.629 241.249 cv
253.928 244.287 255.638 247.157 257.708 249.752 cv
257.895 249.416 258.272 249.141 258.904 248.934 cv
259.765 248.67 261.419 249.405 263.171 251.03 cv
264.926 252.657 265.92 254.279 265.604 255.133 cv
265.348 255.797 265.088 256.25 264.812 256.542 cv
267.318 258.368 269.944 259.843 272.801 260.854 cv
272.878 260.591 273.033 260.303 273.293 259.984 cv
273.856 259.313 275.565 259.042 277.804 259.373 cv
280.047 259.695 281.705 260.384 281.941 261.237 cv
282.08 261.778 282.138 262.203 282.131 262.554 cv
284.541 262.594 286.964 262.354 289.336 261.832 cv
289.233 261.554 289.207 261.203 289.277 260.746 cv
289.412 259.91 290.716 258.853 292.79 258.024 cv
294.864 257.191 296.628 256.952 297.241 257.546 cv
297.578 257.883 297.822 258.178 297.987 258.449 cv
300.446 257.016 302.709 255.228 304.691 253.146 cv
304.57 252.998 304.452 252.819 304.344 252.583 cv
304.015 251.842 304.515 250.251 305.781 248.407 cv
307.059 246.546 308.294 245.446 309.117 245.555 cv
309.422 245.611 309.67 245.678 309.893 245.748 cv
311.209 243.037 311.993 240.048 312.221 236.992 cv
312.114 236.957 312.003 236.915 311.886 236.858 cv
311.178 236.511 310.562 235.011 310.282 232.861 cv
309.989 230.712 310.121 228.999 310.771 228.563 cv
310.955 228.447 311.125 228.348 311.285 228.264 cv
310.94 227.098 310.518 225.953 310.027 224.829 cv
309.754 224.186 309.455 223.551 309.134 222.922 cv
308.832 222.282 308.507 221.65 308.157 221.028 cv
307.448 219.764 306.538 218.745 306.456 216.691 cv
309.037 216.224 310.425 217.295 311.953 218.226 cv
313.479 219.188 314.924 220.344 316.264 221.664 cv
319.007 224.288 320.712 227.818 321.551 231.527 cv
323.306 238.917 322.567 247.322 318.898 254.473 cv
315.651 261.325 310.094 267.202 303.469 271.262 cv
296.76 275.195 288.979 277.401 281.105 277.303 cv
273.272 277.282 265.295 274.985 258.676 271.002 cv
252.259 267.229 246.607 262.007 242.304 255.846 cv
233.633 243.55 230.555 227.471 234.239 212.684 cv
235.147 208.996 236.454 205.402 238.117 201.999 cv
239.833 198.525 241.663 195.589 243.824 192.632 cv
244.671 191.479 245.587 190.376 246.513 189.281 cv
233.675 194.599 li
218.479 200.892 200.897 218.479 194.603 233.673 cv
142.629 359.146 li
144.281 356.804 146.04 354.535 147.987 352.442 cv
149.187 351.149 150.429 349.896 151.729 348.711 cv
cp
f
797.437 483.374 mo
718.317 674.384 li
711.105 691.806 691.802 711.105 674.377 718.322 cv
483.381 797.438 li
474.965 800.921 463.932 802.843 452.318 802.843 cv
452.315 802.843 li
440.692 802.843 429.657 800.921 421.24 797.434 cv
230.228 718.316 li
212.809 711.101 193.511 691.801 186.291 674.377 cv
107.178 483.386 li
99.9634 465.96 99.9619 438.662 107.177 421.241 cv
186.294 230.231 li
193.512 212.806 212.814 193.506 230.235 186.292 cv
421.232 107.177 li
429.646 103.693 440.682 101.772 452.305 101.772 cv
463.928 101.772 474.961 103.693 483.376 107.177 cv
674.384 186.295 li
691.806 193.513 711.105 212.817 718.322 230.234 cv
797.438 421.234 li
804.654 438.659 804.652 465.953 797.437 483.374 cv
cp
814.051 414.354 mo
734.937 223.354 li
725.827 201.367 703.255 178.793 681.266 169.682 cv
490.258 90.5645 li
479.717 86.1943 466.236 83.7891 452.305 83.7891 cv
438.375 83.7891 424.896 86.1943 414.35 90.5645 cv
223.354 169.679 li
201.364 178.787 178.79 201.356 169.681 223.351 cv
90.5625 414.361 li
81.4556 436.347 81.4575 468.271 90.5654 490.266 cv
169.678 681.258 li
178.789 703.255 201.361 725.825 223.347 734.928 cv
414.357 814.047 li
424.905 818.419 438.387 820.826 452.318 820.826 cv
466.237 820.826 479.712 818.419 490.263 814.051 cv
681.258 734.937 li
703.254 725.828 725.827 703.255 734.933 681.264 cv
814.049 490.255 li
823.158 468.271 823.16 436.347 814.051 414.354 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.0.2
%%For: (Zsolti) ()
%%Title: (octopus3.eps)
%%CreationDate: 1/17/2018 1:21 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6l])t,OXBps!8et"#`rYb"i"Dt`;in@<O5kn7Y5M.@5)A6fMmcM=Cd'/QB'8>+#gOPbWR^:g$ESdAd2XseBG4U2#$L/h*/1?
%a\Qg2If&9N=)YgaH2IX@r9u96_m@eGU"+5jY!%4(PFqdA=20%Vc,j8ZWju0oep<Tj*Oj'T.:mn)?MW:VII[$uMf0\E^3TbEGAgj$
%r8sL/gXgB$IIm'JnaFf]*.I_]X7;P>LHiJ"rVGp=%QCS`^\E;uGHQFX^USddqW7\1GE:)-+3KjY@f1hmr;1EP[fus2%/MX6]QjDB
%QS3hO^AmcI?Ta@`J&?c8?go_`IJNm@kk/W>;icD!:H*'%IXZ6`rUaHGoCAq`hn4I5r;E\*DuTEBFR/TQMDY1aQX;tD57D.Vca\Eb
%rckr$q<-qu^4%`K3R#+Ta7he[&<$R.psmtaq1cXa7RNb#LJ**fbm8VYoCTeCg\qk7%Yo:"da#%GI7nD[\Y6N#b2^eK?gtZ3M"4L4
%,`UdO?9Wi:qYC#T4LZd7X3uDW4:<TF`A"m4-g;Gf9_"I^cW@+?Yo](CntDsK%@&A+O/5`[_)LM>Gkorm0E:b;_uG2]r6(Gq0_<ob
%hZ*<"s#4Q"]6%&#%e]o^r8ubc0Ala-c)^SK8;1WA8c%Q'042GZ8Htsef?\0bG6<U^IeWcr="iHlL&L`<[kpT>5;]9fqr_l>+.iN2
%-*>^J7Xk%'b;[1_qZlQ[1ETQ+nmerfi5Y'.q;AF8pc8,rg`b-FbFI-Lid&#$7gm7qQt\@adQIMT/D+=CHhGpi2a8B/3;-CelFgi3
%kC7gPlH?`.CH+0H%mSfK>Q3OQs60@tMYHRH^<tp0iJZ_L-R\)[Ied2_rpJ$ta1%*d41']jE\k/BS$?1(^\nLhS\O[O#)dE7`WIsS
%Mgp1;^@:Cs0n/u[TB1"YMdO6uG5Um&hS&m]lX.=#o@p0=IX:tSgOFQqpt`RF0?0Q<?iA`o^O.cEbYLNlT76\)X7n9NT"k-uBA^O?
%4Q3o=#Pm]\3r_8?rA4EL1#F("GoSf-JPbglr:T1;[pLeINUm"lQ\YV<r8#sH_gItKDk=^*n/mV`_lLP4^H<Tj27ZN:8$O'bkNajA
%r$B)?UkoW;Yl*a\RX4u40B7k;q<#k=N4]"6dWm!b%*RQ-rUJe%^4,b"UG6"&pA#q[p\s9d2nsY`h0eta2h*jcmd8c\F!0NJr+Sps
%]D(les"]Sdc0#u^J,HLnr:p3_lW7H,HiE\F?G/>=s30B&TaTcVW)`JA8,Z\NgHShNqeuDaBSQfgc`c16=a8k'DiWW-a0/)/3rJ\)
%cbCe^h0Hcj3Vhej`Z`#:_U"f:IGtbrDq7;PTADa2o$o_[It%1Wn)(d'rqQ'-_cIs$g>I%4b0%`KQVX7ObL7j=lff)W@t-UJ@9deW
%6\f['A\O&&DJ5?=O6bNU\6F/9D@Jf+jG+lUa%t1`[MM:\E_kp!M(e*`[=0+9FmJJqKA$jk^5PLfOjLAs@h`fMqfc`2E>S%-ro\0?
%h;UKdFYg2dE=GY$^>HEs3j*Lqn'ef+ICT%GmdBN2p?m0LIFmrA?-shjK^Egkd!k$KV$G`R4nmlhHVj`0gV5QHpH/L91]lH]3rJ&s
%Rs2La[]97%a5RiYih2678?;UHnf9YVc#QmgV(ble/!k#k2A^i[3[H;!h>(A>J&n_qrm7,RQJ!DlNc&Rm8+N@fgt^1R6r/XMX*<h!
%flB=,qSW3>@bB)5Z6bHIfnn^CED]B-r2Jh/:U0#Mku3R)k>%XsX<BB:*!s.]/`bEjErpdqATpsg#A&'T?3b%a!2jm*qaoG^D#ZIq
%+WimR^R3]pbkj/rs7Ga@b;]G77f33Jr9E,02da7offf??14clS_rHuPVqX)$X`V__dD^+Jqr4Yp^AD\qj,a2jhtd.h4SfUU$n:6k
%SiO1)_q;?T-60p?\-r%@9DKEZ&XLG%@u3(Of].+eM8si[n)F:*fR4+ecRIsT;GAb9FId<t1#8]'ET"-jR:AuPO$RTmkNdN>\+qZ6
%(LKLc-'_ACl/fM3P[h6SpHqISg2==L<dVN_a*LhULB%]6[a[ng9=_HRh/:rOh6m-bm=oW9F!"=>9Y9V>duXI1hd="]E#l.2FhTK[
%mCHY3?f,*1YA^W5`o6B)_G.[72gJZiAoPCs2uVn8k2tfNF*f^gV47?*TZ0eK__E4QiuIZq*(O(jUX<R9%S"KYl]HX6a*#E=T7==[
%k\l7S],ee:)fS5N$!5thL&_1(CN.5,Ea3Z=mm_6WipMd)O,"]Nd`:t/EL$'AM6AY9j/Mu7bGOSeH2tO!N6<'\lZt_hNfhIo]Y_1u
%65aG131]s6?oDm@,?r1o&,WoX1#?ChNNp66[pqD#>As.ta6]TV8"Ps)ETW<65Q`pUdDnr/cWD<"Aco"5,a$)oNt.2<+-Sb:5V78_
%L,@J704QHoHQJP/nC4SFEdAeu1fi#6D60VU=!423EWlPl*05Ej(NkHN,aMs9N>9UZGcXtBl:AQ0lZZT0T8^0/f/9^cX,[oj(VVkP
%Jm;,%_Yr+3FNG4=_i7o2#Ba8\=2C/@l&V%OhrD;eFbB!`Y+]em\kGrl1;eT[LB&*@r'PtR(bEOo"Sa1ZES[iIQd>9P9"eOph*CT_
%V:jC%)6!=G4\NQPhrU=tDWU$[QMW(+/5LThK:`rEhb2r(cf<*Qnf:o>5IklEWV3A2\7i[94YSj%ZV>DV&nAukdYX@u8Ii!;8:HX'
%+W41'-$DflOsNW"ffP?GIe9!RMdu#2D5Bc%^L"8PU@!^&V>'3"3(]*jQco*G*A6TmnT<[8+iRO%Q/rp49Xp$-IX(YC4c]\N\%%I.
%BV]=[3j'g](rqN7i6!EK3k=7($\J]]-.ner(&&qPpNBX,b$D_Siue_>+P\pdmVZru5e=M>^?rDs[^'.06h5mb6uHh6]-4;:a0A!e
%!9ce9eKNQ8ODf,03^4\TSn3dM&s4@^6R'\aa0O`kA]H[ONZgDbC;_8[88^DQ)n/0=hltUD/3!-]cltF(f^9qBDBLt)3;t^,N^0m[
%*!:EXQK6&I+4lSp6Q:[En16ZhL*/Uam-#u^$HnGh%U%,@j,PG+%EjaN1*[;Q0`!aSL1c?_B@<N\UaV<:J`Ho+LYEscDMC:;O9KpN
%J2ijla4\dOr`G`CI+$Vd^1UceZq_XF:0Edd%dVb3H*"NsX%h0t/[)*g?:U:4b\3GXhNQu)B"kLb/,E1a2-_0R26Im'7pN&Xgu0/5
%P\'<s/m-pL@r17a\.Ys'9:OM)L23;'A!T1AC3&.g3o[`iFb^?[IFIS9D5uU$NA46QbW5o5)4*Os2Qo=cf/9]M>Xu=/a'2em\5`+a
%B(i`6Hq.EJ=2oppJ,5u$Z*ii!5M*D_E#irSik!%(6INt5Fq>a"3qIN<DGO$@noC#WWlrqYX"To5&(f!IZWp#4DO9[,\aJW<[&<Td
%o#nFaHi6OZQ'Y-cXYHhlB?[D.='r,rjgnTtj)VEI4ZJ>iICEJUo@b2--5\X-C$kQf)4%Q,jQ.l7<L9a<='r,rGn#e8Ui0K]s,2;M
%;gP(YNqk,o8Gr-aA^/dV[XJaEk]45YkDMQ;FHZV$hoTHCO#ZD7(hY10)e-.:?9u2S<]f'9]NWEPV:A&98aOnFRVSM<aR__S5W7kD
%)L@Y#Uhl0ZEN&9l;*&FU<4s/^juo>sF;!$$fD/qrV\l%._/.L_:76+%n-PhTB]E$AG!,/0%m./(*P,FJ@Y5-uPc`8IZ9HC91T=aK
%dc3rL0D9>;gpQFs*SU)olh'3U*2gc[3phsi`)GA!rkCMeNa$Dn/`o#uJ0/9Vgn&Ib>6CM=^A5]R@Jflh_XWRXp25*1T"0lnCE6n'
%gT=b*^"@G)=5.#'GE)4j^78GRGGR)sgg(I@V!I=;J#kR*Z+B;S>9Bih%^Ge+ROmb>+/-l,]I$8iT:LIS\_>`;T=qDR?=WuZ7U!"U
%RHsS5Fa&-@Nj/HTf;X!tm)&^45G\%Db!@G\l75ddRX3L`:!mj9a`c"r6`sY-N^pV$f_W-jV+fCVb%lc5:M+NPj>@Wr-ld.GosN1^
%;D27,I5KO)=BW5<k/u,[-*(ga03r"eQYj@W$:.Xqd_;X0`#AF([5M(:G-tVaRMMCW6P^>N6EA'Np6&NNVmb%1:-,eGL5e%@P?LPU
%2A.PdgDdHt$SL**VLY8Glrac0bPqLj[NF]#%BaKY,Z]2MW282E0V',p.F[Q8k$o;/%ZY#o:Ck85"K\4r]oN($Mgi,6)\H)0Lod3I
%.m,0Q]_PY-5I6-!0P("dcVa4[iZZa[EO-8(&Q-<*HB7.%j57[M@_:o&1;B"N/-!:a?PEH@k/bI/Uu!Kun!NF^^I;HHifR-B'RQ]N
%?JbW/:Zsh=gF*!rbjdcE[[QI*7Y`^XAT4/'kAr\BKsa-Qj8>S9^P`TtRH(h>rp`?Q;t5IsiB.0.k$qku6YDf&l"TMVqaO>!.<`;-
%<&<:/&j<o_Hdu7%27$Yo=VUNEEE%ui.f&L%*t_;^@?6qs<'?tUR6>;ErFb1I]1$8\ZQDl9X3KY)jMMmaAD;8s=mIuk3_[+BdRmR.
%2TdL(<f+&$I!+Xa&m`30\EY));a&/s'?<W/YQF[*#&]/VG<;mYq]ST0?+:gXs'<>hGJcB^lI7MjLXLBnGBZP)O!@Yh*'M1P.;U)a
%?&VmKXpHMul4d1[P.G<^/p4OiZVqm)lL_^.ces&#lY+m%Xufl,0N6Lh<V#C9;odHk)FMP=LfmC+=tXm*Wln>sNnXDjri#[o1#lJr
%,2\esYNh2f!n/<kDRG-Jj&/r7]6_L+eml$Z?(X.Xg'.Gc[Hh^iTd,H/7ah%9oR/Q%S_`RM2OCU.?=iU2a(lUqm=>2kdA:VF]Q/q.
%DL1cK:N(RUeGD1QK(Fc2LP'*t(kZ/Dh`-n:BbF3kja?:Vh;i/;oEjj=H;4EQ>N4:]'t^@#Fh0L$1H<CnGH2)DF;dpSn+6o^:[q[D
%2bQPdqO7:63o8(b4aku3Zb;D.7^3Q70gU]-m,I:(MkrIO=C'W>CV4WMQl7d1CYIEWJ+%ckT92()OZ/np2kQ3kT92(ioB3lF`VLHt
%o,2iF)0tfkH1Mo!o,2iF)0tfkH1Mo!o,2iF)0tfUJ,['!r/A;aN4etF]_UF*RubSG%.!)2=3W2jArj\e7Gs\FE8Y_G&)r2ZiCf:m
%.i)clE>4J/lV9/p5ime[#VV^L6X>N^T2Si:<J1kZj^;MRN?p(g*kJUW/*kLGW=-"(Ytel,.X(!D<SN6c/#tS58euY33lCODn`6W%
%n!^l=fN-,Vd0jcYWF&Hf1\'k[5]t*COI\i^54S)Q<iR@E[q)kHT8tP448AZ4()PA#aGbU^ggdE3Mf<?7@n&7l/8iiQ0r4=Gd7L+P
%+>!@3>49c2GML+Oep,%M8_El!(*DJmkUuWe[S_YBPPB["%B&ure]/8GBV_l2G5'1&\+=qth@C`DNoi&W74DM\4<sHtB.l^Pm&s@6
%aee=QUQSGli]F@4M;?mZ[qq;sc]6@tr72Y"Fc,-];-XKh$eVS/1+m8s#2@PXIQmEakm4DW_R'SDD1hGPj7]g=H//(#hodSUX=TtP
%$YJ_!g0a!@<;8*#nu45$GriP3I;iFmjEAL[k=^;/BC`S&s38*GF$KEAG$Wmo=Xu#iIf;MjhX1"\J)3//rBf3:KN$T,iVm@&l[QA[
%XnGE[obqK-`P4k:MGMQgQ+F[$SBBu$55Eq<YB'?r#jLX?rJpb>l=)jI,OYDerqjq0^BMYNp>b"U>^ZUmN=C0aG/%EjI`DU+jf'9s
%EE;AXbMnT?A^Pu!2)tSkDkF;)lc-PXnbNd7O+*TpmX+a]54-[/Nh8=\k4g%7nHU8"^Cs$olrZW<D/a$4*:aE!li]snBX2'[?a#8r
%7?t-/4u(.mPmhU1JkT3]1=4-=T,?8j(hH&`.o&)Lb1R?T]Km8'%T,k0`3Nd:LCT5eA4$Lj#3b/QM)$9`(_BEk(h,qX:a:ZaM[^#j
%f`;D\ptlL%F#BKV[GcEHc$OC(>t+,^X37*\@ee_rLtmj*"od(l[u.UoPjQE@1'[12'1:9P8@Vkm_C9NV:iI*J2Gpan+ZgbDknD%U
%/u[D+%uV!OQq$'^&N>Z'p"2-DQhb+2eC,e(`ib9AQ:p"I$@Pt5Z+:7hd%10712gdXOP8jRZtfspg9pdlVf-r5h7&il<`_<3I84pf
%S$Ufea)M[P3PG+uK_*e+ek<b*L4,+lDs(!aKB"i?qKX(X7'c9dlu$fb>EF3uL:C^HETJ4@IDrTiAGa<R)np`>>VYXsc@&!iA!`aZ
%h)C.66bSQZFc(SXa%^g50^pS&IZ&qf0_%EIf*sKa7E9=$nu#Uc/RfbcKB)@e\i[Ir9@W>]$SWFChVX&D=$1Q#Z^2hN#KJFAp<lqo
%?>Y#uNpR7Ts87$<&_F7dDJq`(3]#RSYJG5Xp.9];a*A;IP)J@I+*#nnb(;UF#E^PFi_h,Aq-8aQ%>n\%L1<:`Q?^BD>bB9!f]GZ1
%%H:s]7h?RcDlsN`AV7&:^k>H&F,S4B&3DCsB9PWdc([2BV)ZSq30RE`RU*2EZ8g+;W;F48efmmG0[AchSBK&WY>%]1q)KOJoG?MP
%mTaRlE3:S!*W,/M%.uFZ"P;SAO2@KHf']a5dGC9cZG"ORN5+Z[!rYG"qM/A*>Pe`1O5m`#pO#E`I&'ZPY/`s!p:0D$<_p]"SK"Uc
%El$im[Sn1gY<l%A[rXulIj?6QO*86:HK@XkfmC<6[uu,O-=[9ZiSSYI3@ahEq_6hEQNZH;Pq]6sIe@h8,Q3HYU47V3<:gpWl7cr9
%];6%Xnk'[D0hcJEa+,X=$\OVnmeeaCde]"Ai`&.e<2KGjAh(Af3D7cuL`,dZ8']IhnDe+/[)8fo9?cOFQGELm\*q%[rUTHI6$WBt
%8mcKCk?jM4Qf.(T`P=CViYjG7)h\RM,R^fL1bLGdVHV23MsD\:iXS^"Fh:$AJJIt'5[SNG+I2D/!8`'D`H[$sP"JRg3`uo$X,u&q
%igaGB#V&b.(JS$TY2Z=hJN\$dc5O_5)\;0bDO\T6bCYC"ESuXI8Cj,@l=.fk1GG#I;`"R'McNB]T[F8Ps7FFmgbIaa$.sY6E*$F/
%i9[r^`6N(5\"&1$SqK7CI=g!F@Hs\s'8ZLhDP'+,M_2KE/ah3U"A*S_P8@Nql&udbq?gB':ZX[@G'XUX450Ve5G%:oGiD,UQWo7Z
%dFS(p63WHW?.6HTeVuOhX8q!*<cL@a6rXtsJpd[k2@#tf&BP%ll\e'\A2]r=&8<_RqbRo(Dc"qKb8QK>0X:kE3Pe*K_.-PdRd)I;
%.+E+$!>;Qt16`M@?Co\Q=NjdD8IC]NE+b1t9g$KfBWV^;\m[:t3!^g9+>B`rS18)i$aQO\PQ&[M2i!4"5LdqT(KY!O*#@h8\6iJQ
%@g[sa*rq/P\cV3;D6Tnd1\C+R^fR"79Z8^bp*oT[P?L]Ao>^-3-k;MinTCDfiaI&MMc\Kql'(r=oNGSSnt4s[s31!ha8^OI$W:7a
%"bIDLB`7e]T+&qf@'eOkX8*7YN0;M3c(=aN10-O3RJlpnfo;SSM>,)2]]I&h#2&Fja$p5!4<$=`0u<9;NX)5."UBG1+b2dZI;`2:
%Dd5ZA]\-iN2]SlU!)AIQN`M4e"))km@"E7TBOs:[4P_#\q2LI.@b>'W#=h5h,>XqP/fA1JJHJ=Kh[3h;M")]0e^qn&(]:LBU?bJu
%Z)S1g0u_OZ`PIe!1#mf:.C_[oQ)V^#CO)p>e$VEJ#lA%8o"<+cjit2)V/#P]>+A6<@fX+9r8g+im=?*A$+pPlf^+/nXT+<g^OP4m
%>j[mKGEML4nZ\GSE16O*c$WW7+4fe6RK"sAkZG+?en3Dh\Z$3eD4(si.Zp1SH]Q]'=S1!2X<t%ZOk+i@(U3+d.8_h7.i*QW$q>Q^
%UX*\<;Fa(Ckh55m/;SDnW),lC0^3Bd#V*MRfAE=O,E.NqTmk<crcWom^X5Xf_eeR>PSFo^"LF\.gh:g;7B_%<@IG!@qjdm@`j?1D
%ok8oT;\/WZ^O=D>IG)@UG7N(b*:k@ZHMY@J51q=NbeK^iJQkL#.<8($:oEja&n*!uDH/:t3O$X18-e!/;`[<IkdD,`DC6a578b7S
%;^!a8P#F,W8^?FZghnCXPT?=\Krku`+:=I\A<D*:M.\Gteo9"D0&q^5bI'p-DRh&l^<@R\[)eZ'DrR\-TcH<BbEP&3(4)F#^)P6e
%\Mb>T(J3,B>%9+G#0/0Z<&URA6EP9Cb,Rm>)*Ar`mr=Yp1@/m'bN<s&>rQCL3M!>!>T`]]_=[[9ZhOX+&<-$Rig%it?[RXeEf9_?
%`dp/Z96.M$j%E]B9od"t/<:=@2]'Rn(fGMS;Re81_)#E^+3E_nqU0iimFUtGe$jgU0<YOAr8H1-DdL/-c``SFr5UMrEP=PSSEM[3
%H+BO4P]o8S,s(b=_cV<G(BlkjQ1>1J4b(W8,Fu128XV0$4".^nE]Y\U"*biNeNl4CW0Ztock!Znd940,e#2:XMs/4ON;fgl(D!o\
%e`oA)?VgKHMSAMEr?l%J*K0sA]6V0Oe`fs1L,VbdrUTIUX)HlXVp0cg@t0M[T_ihEBq,DSd_E3=HeuO4<_a-cZf@*rQf%hhq#'T5
%qR=l8__2Q#nuqKNj\u#n++GLoJDm:$-N">ao\6g6/IgT`f^RhVh?`@I)S&BfMhdnZE:fjD&<!&74n5/c5u4iGjXm=h6h5[G97M=a
%9Mu^KdDd%hYmjd1V`n>hH3`U-GA)L)d)S8V7_^;%_Vl#I:V@+;NY?MV\[kOG#7c5m%\qK!NT5.$CVH'$kbHgs%O#/tf_XR6fctq0
%cYJ<UG031=h0(2,q'.p7qc+Mp\`lr]=-96m`aR>i<3M&5g8mYeF>/aF5AbT$+\^C_5@lZTCXi?JEn+DJS,SXqPq0VD((<+WWTgG[
%fpb$KQc:pCBleI[LC+caCg194AES%LSSL.:fjB#mq`3?/?cA1\c1^DonMB9S7>9</cDr%></SrrC$YAioIl[of7)tSUL0KNf7)t[
%T?cGn?TRl60:hsgf(],HVd@!3;ibg5VI$m2F+5s9RpKM,BW#qUS2@p^J0,Q"P8+Z,Q(quPnLBUAQ,VP?8O2n?C)B*DTYotZM">ga
%gC*ujLnS+>0]lD]KJ=s:c>g4d^[mf/=CF%.G#K=*gp/Z^h`!,)&`$;2kj?Io]s)M)5EmZJO19U9d.AL$%-6X8K?AJOGtrjS`br6*
%FOmVL5+8g5^c/@l$WEmq?2ZC%Fjfe9:GbIU$R_.97."q795k`bo62bRbu9TZfYZRF9PA;;Z+%(drI+9nFq^H6RFptD91D<nlrh`l
%dq@B!D6$aOKsZ83-0g,iEg?7C0^O#:24KAtGD1efm9uJ+rM1RI2MBsH%r4,_3L#C!^,0@WFN/QuZ_pSUT9\aR?c-JWQ>r_^S<Yu:
%Y_V"M)qaWF?;[G7.-7-A:>=Igb*'cT:V0D@)@Om=Z)p^hqkbYaU-$L#]fgY6rKFCr;L8_=4p6%a4m92&P_M>u%%O`k[ZBS;+nQ`-
%rIq6!d&qg6]fPEQR3u0^V*,HIg0reApA;F&N/.q>9Q\0d9:K4dh6`[@'ZNOj?X#90\ms'Dm[cVkrb4=';ELmHI1Y3?pA;-uN.qdQ
%4L!eGTljFO5OBd[LG@36Q\LHRc57(6p@O4(Zi2piCTI=C"g@$T8N3Y%Z++h*jQ4`0C2BV&7-Z\$:IAMc>m>+IBc)2;Hl`Odq"c\E
%84i,u`01jG_AZ_PKrqe]*?!!rG;38k;B$NR>5OH)<Umt7332@Z7tu%"b-3\/,E[rCQkjaNmE%i4e"5&O9TtjG-far+F'-%Pj&P\'
%T3(Kg.mkIQ,rP#2R-9^S(-85CI9P*6RHL9`of.%KSS*C23e>n.Y!Z8A,'J7/:Wu"OW_,E!H&e:6qq9@He!WC6HuH0(AmN$FZ``+f
%B3fk\o7!^BDn;e:Y2.NOs.4D)p.O"fp1pu=Zt$ZS:A+9Sa)i&0a)i&$[dS\FoZ8+9"F"duKR_nb],@(8mH366hu(H<rUc^hrp>6n
%%fU*:h;Of-Q%/_ddjO&$LXiN23YdhR'Z?d9XO=@3:+s%EoX>ur?-)@T(o/m.lq+`](N74.C]*m\)ZH#3l=pW9?'I&Enf^oPL%(50
%B0PO6AJ%Ji%a/M/"B.cWSbE:J6CoZJ)YMn.g=p&9jdO'7X%###ANEpE?!^'OSl?>7__bQOb)K0a]]4:"%MfS%Y-T]`BK]9QL<(s@
%Y&3EC/@hAG:ND:%4qAJ)T4rUBq[u9N24`be$\R>$fHiTRS2S(-G>3jtNj@P$4]EpmL3H?sU4^dpkt0bAGe##cepbDiY*70@lm4^f
%liqjcG>/TjAW4dGl#D6nZsQB@l/8m`HI>=4s"I1OJ%2',D-420jo+3iI5d>^C1o21dRtXEiWJg.>"\\+I=Ub*ra29pqK\LCn/:ka
%g^!)ncW'Uc0%&iAr0`R$)8DlsGri%hpLO2V5+$`d4+7Qce$"JO-2Q]oBDkaJ]'&W!1u5<T/:Po[d^NMNHnNeo+#KOlW_[@/e0Gh,
%IM<Up[S)h1-2R&/a[)60^?K&6p3,RI-@OXejE$0lCO0+<4dLNF_b+btn!fp@D%i,Z-2Oe/EQkh8B#'2SXS'ef:\qMVala:bf/,KY
%IG6VbaU;7hY3CYSD.<(H6pGP"[]<=(I_b9r1J)632*L3Y9gAGYU@4PR=+p1t2a-N?PgdA28`)E\q-9Z_#(.EABdfXd\aDgDGBH.%
%PJ/'iala:be+>j5<V?+515BJQeM09\pC*ZZpS@DqjdcGkoY=P9o.jTS4RBV9.VePC'C2I3(k<*dL]*fb`)Dn/1)AD@p_+7[\`?Bq
%D5bq?,9i\*),oR"AB+i#.iG$L'h6g>B!P"&1e6D_?C<eFRiI=,.uph>LLK$2RNWBbTd2S;Wt](j%-*,-5pB4*TR,j>Tl:G:d)cXs
%/L+9A*6Ji4'VAcuUk^@Z[Msu<)jr^XdV%I6"ZDi(:1FgbJ/1bCmYkaF87%[gbp@d[Ep)@7"u,@AP&W,.7N<1aoQ\MT<2H6m'lY;^
%^5V]Gnjti$EoCG'I33m(iMV]$[AU4M;fpetFbgYn%PsqOF9rUdU\$!?jhod7Ipj9m`'B><VIM*uf\)=37M@%CkWY#`H#7Z3>=R5b
%\cm3r83LPJWP+9$]Y;2[[@MSQFXBTf`1^NJAOk(Z+iaYPcXT7I<=0s6kl'%g/N=6-lui+lhi\P]Qb$.ArPkO\&a,pLp,IT8[+Kfm
%b'DY6=^#Y6(idufm%hHF9dRDLKV*c"7/+FZasjL`j.r^kHj%i>+,*gE%d;$-lSJ8-)9Z^NnJ39oNG6g^O%oD.B<RL?*$<1Q*lecB
%oeR!t&BSW>`))U0WI%.si*rOf)AZVQKDIlX#GE-&ZPahFJK2G!-e)3K:>AIo6BKjYcGWt>c9\/7bHRNRX('FCn$&@8G<.[iH;hr&
%B4u!ohMoK]'/)`lmLl99"X.?l>Y6$T1%6=2IZ3_c<^A\j>JfHj$D0DB"IHU\*rF+O^)C7r5aFt`;P@J!P!t<SfQXF>0oJZJEd1$1
%V?^<5OYd]pGtd$RLU!MB(HMf$NUEQ(jI#.>cR[gEd$@c'3/V;=H^Q/4A6hs*6=Es[hG?e,ZZCWCZNGsqjjY=Vdh#110FmKE`)QBS
%*$[ES]k?]r'WX,n9#gSa8Hpmu0m`#j%q@_K`R(ks6QVX.%^?kGo+2,.arZH2BqD;a2*qZ&OG=KY7MHu6&NQ&qn_$QsEHG]3lM&>F
%Tq)O:d$o/Re^<3A5TG([LabEV;5Ws$4QqJ%\I_\O\M/gJ.1kL#2HUW,4OTId3qoC0$MXqTV2gBC'N^XM&lNO.=RY,C5_t2GBiE*t
%fi*+&F\36SmR1\Dj"_mBBT>PJ%j)-FL^lhWJL4;QLdT2j66*!5mn5Dd_0Ik5a4F0mFI<Z3+fk_O:pZ$a$ir[GB&/u0:QBaNRKkh*
%NlAgH1BrI*r@gKbc>XVSn[otSUD-+&W^jJOkZ*/+0@(K3?fH3CI^O(6TSPcHHH_R:*`TgJ3[Ti.]`pc^og$Hs`'V?!W!5s+*WE,u
%NruuN=6SK4JuGLnEdVCQ$=n>md08/-*'b'EJm(\,5]-Aa?4Jg>gnQl.8CEh5H>]S*(./B^`>IK@FRPtb03l?CpZM]9`"G+e'hVhs
%oC8d56?f0:d,`/*B>MQg9Y>)oK+Fe$6[]lYCp(tdrghWI5Njlb]g`>[Sak%YoIiATk`#[YS6(!=LS:Lk\[cu!;hNpH++3*tL.%F;
%+ja*1oV'kip3i]7GL4$Z)'NTQT:)'[;$dhdFe!V-<E4^//hSEDP=J&t]]]PS$J5]0#!S'7kf`&&]9EFm(N"]23Xll]Aal&SJ$s!H
%8AV#:3gs#R>fIsH>@Ai"c#2lh&M1iNo.I"(NJ-*q[/k:@dCsHm:PqU4+%ABTU\b+*jKPNR:hDaM.u7Nn:o;>bX:Yr:mAiAC%n5?2
%k`Y>66&1Uno[l9D:1D'N@a]Z[3&hEm$RtDZ=MLpmFI@J!elZ<Kf[3&IYj?3SLTI%jjR<t3R]b-<a_QYeKmmG#F?sHYTq'qZ.$p<G
%;TL?1%d.F7U(%d@-CB7mADM'Y*HX9*H$Y9Klr5/J/I)h9qc]#[Tn;U(RApT>p5@+&Q]e;0dbN3<5o`goQU;3%80_X+,(%cc8)MDu
%QLQ'6MAQ#9*0*'JKu0BAM8=DD@#F?,'I7&mKdakfH6;2#KYu.YTFAifXf2kS]:#o>_I3jBL8N[uA<)_2B/!aK+,rWsZYe(FYi*kJ
%LJ!tOo-,FDSEV&B?r5cYeN1cHip<=GH9J]M\;;$UEmb_KVJQ;#a2`!Mem8H%&.A)"e[gZs#U9c>9^R^W/o_E.TT8).O#r-2>+0>p
%6)Sp*#bBg[Mjla+`5Y:>V'uY3NoO942s"Goa3t7'R1F_6;s]abQCTQn*:ad52;YRWJO:RX'X#Gp3;^dH?hR[F/7QX"ZJYRWl'.hf
%&"Z?k,U0c>KF^`\=h:^LoQaU&R@ZYj2p*/X_0IoOH?<0?@_j=p#/FZo`Vi+^2lrE%MRd4Zfa\cAmrBS789pmK6Ij`EODT#ZOT:Y?
%;b@dO%8i$<%`NYBc1g7.$]4L4dGtpU!NJ4nJlG1WWS#Ro?/P=B8juLH5NnN$@ffpHfPrSJEG,bie=lKB$jPHuFu@[dWZ]RiaUtuX
%3*AMQ67aBmKpYN^B;EEmGbK2[:Pbk$c6D<.mh_SL#%Th@X9c\hP.ggmVlk3?M2EHE?0Y.+4#pRaPsE95i'QXf:Lch*rGn+t-Ie)m
%9,;.\Sh`J5mEcq9O@_a.n)SF[i%PS+#i\[Fn]\(.^<d)mPTdnc?D(r'p.r+P`\,F<HrpDs<-f^['ea\%gec]2\jr>\N;hIY[D6@h
%iB9jmfcMLHSQu?7JNYb^*9U'#0me)r%(;jQFaam-[.nVs4+r:S3(Dl4;P2_e%OF1cZ'rL574s+^<1GqG2`iE]V!0cQ[g_(N8*>>K
%VMC+('V6-3deHqBLFb?TRdl6JM9ji@oo?F:12NXuNpf9K+l]^ee]8lf/:sI4RZLGt(ODB.G$9Tb9eGrS9$!8]I;'sc=;Y#/StaJ0
%\XBO^XrP)*QpIh7`L\&[V?eMTWZ&fN<+Bt"WBY;[%OV(pe963HZe!pcN)YcOXqla*>Ih#JRYW4R*L')-)+Csi7H4gAE[-?thE2QW
%kg8+cpDlYBi!Zg7]f,([p0[o-8(`k#%3g-%d4rtf)/8M\-l<2cHZO4)(s0*B<o?8j`dqW$H%f18rH-!H`om"MFCY&3X`&*[Y$t^S
%>23Sl0p4c;fA'AY2o"UeZdYHuFRX]3Lp=4qoLo=//o*Qu"XOY8%o[M2Q^+)?"as4p8>3X,i>7OlN<Y)2-JI#d\YC)^)k4A[c9AI(
%rgIC]N+&_:%]7[?jKTih#K@R^m2W/X7i#4T@pS3Vl-&]&FnJ)*K,BUnFpirDTk_eeANtUZjtR?@>j1MX7P(A<P"-Jn=m6d2-;/V$
%>fD^?\iFb@\261[BSn9tEXIFenQ$>"^r_b;GYg/6e8BBZ7>/RAS`R<[._0UVL4c%<66):8';HOEJ'a[YIZrB@PU[in&g>:[e8/SE
%eeU:FBaNF>k:T8kT+S-(Z#pC&^_]A#;"8>M.8&7G(HU#TG.J_W,"r9Y-Xr'%"QY=7qh:s)SCunaV\g7bk)]?R(cCA]Ce7F7marCI
%T<QOR.u/qEFiZ_rLT*)h=rO$CkI<PC=sOT^Q,^km76Vt7(\:;*I_^&[71':X1b'AQ_2,q&XYm7?<WZ;^WLgqdkNsMoC"ZQJF%hhs
%l=QJb_Q3pfH2l$U*9)`45W28j%bJR(D;'Qo/P`A1pjf7Gm"4*<!h22lO&MZc+j(BVHK3W;)3tZX?-opJN>6'+TcGIlC_jJX?7:RE
%f[!213]n74!gQ9616F=%dIVUGXchHpSgWPC$gCmph_Thh":\:/B6Z0%2`:<R-"fgWh(1T=jcpQ`+lpK+%\Y6#\>J^pI&n%SEX(2A
%haNkc`Lut$^9_h)_%>a]6\rI4YD.F2[4T+])I]m+E)qcT28j]"H)C*GY!LmMcjVph`90bTS<pR=LuP'RX/:eD8tII[nY@AQp+%uL
%A-.p_6@:5=K20Dd@NoBg`QVC?oF4n2[QK=F<+HDp./Q>a)T8LH?$o(%5GU2G%#-J0'mb$g]XUh_9J!Ct/plnOb"[#,`&u+tjehPd
%[:>;VA6a?e/sBA9b;aU3.3SnPglSD9j%0'Uj3AVr1e%DDU/!%)56qk\O$-9F*K'.?EMBGF:k'qR_A"6AS"n\_ADB$STX7JQ#iZFT
%5:fKQMB'.'\!En/Xop/i+==";Dk7X.JLb#9",P`odT?*R@iJC.,9e!Idjn]RE!mQ3RQ2(9UF,#_*,Bp>3k-1Ej%Ot2/s>@J'.gI+
%Lb84--Q(JG@e4T><'r(MX2^<&jE_J`arm_aEtD7]5ZAAen:_po;1_g'iM_n`<t0of[3U??:aU4As/;[:<sQ5;]ASq;=5mR]>"-,M
%BIXlL%e_Dm"uM#j,]Tm5n90FC<'l^:gg'K-o:k'`;ip/D_^eIjEeog+DCW;F(P,W,/;lce4sXX]RoF],P&Er1nb!J7*[HnI<Am)f
%GGkj%mr]lrjjMec6c:c$Wa8TXGH<WQ(1Gj"oQZ7%M_;p8!%FF5h(=c_Xpo`6$(TJkV,UlG\cpaJ"f3p:-K9:2>\OIE&`)$<DLo(\
%]@W/b[Op4m!1W@8ka(T6&U+:nD`O%<S(_J$M7f]n+lSW$a)O@F63G3+'FnGfB$;oS$WFqN+M\ag/:*n$F-Y3%4?B!#[+1hI,`O('
%X=\r`IHbR,.+,6:3UEJMAADfMjHNVtW53G]NOk^0Uq#.k&[IFX\jOIs5dMXY&3b44M4Kae_4F/6OdI6PX&M6`20.g^E[#]s0oj:o
%?^F##SS8Q7%X"q;adXei)*Wo_]:$:#iXcKhM>0O3TqnL%%SJk[C&%pb#7&XVCtRF9+`gU..NuaE&Eb4c,9kLPcI@R8A(O5R?#@X;
%.O88gE!(DIGSdt\j_9*Q-^'E^=efIF9d'$Y`'qhc:Y+*deNZ(MC_St4#njpL.;k>h<&P.D2fhXeVQh_]ZDG%@2+[T!%#@B=EUnY:
%S#)=eQR>'FGkK/AaT]R$C%p>c_eDgA"ccM.<[/*.aG*thWge&tp:Z5kP?5saFi1/11oE</B"0A4c)CIaV*oTfO0U(&$#GO`$Dq23
%r'nDK(!9[-?pei_0X<[Bg(:]#m#_a(L=8#LksSi"khCdICFYR([=YhZlcZL;EJfj91j_C?q.Po,#t\41Uk7!u4-FSAljBW_',2'1
%:^uDkeU4DX@h"KYkV;Eki'F:5_(;Q/iH<MgKU`)uAW0E&:)-Td-u+oJ`pbmi#s]/i8I?kt?VtiKU$N+uB+R'qVu+=U.)S-lL7Rp<
%pu\9,RPr,"6oYBMc0X_Y$o*R>Q-NfncE:m_)kK@'=t&_G\l:PN0c`196``S)mG2_<5.7,rAS;N2kg5E)"nu^0)t?g(,YSqTB.K7S
%Z/Ff<qqMan=g\/NN^U1#MUTB4M6SF!c/1a6dLSS@g#8"lf?D,%V9%(/<Y989)ZVf;+cgZ4U=TKm`!cCoGF4(*\=qG(,c-V\!5]U"
%M)%nKJcpqkJAF.@P:HVF[pWM+n,d?FE%"imM2M_+138,%]#W8/V9A_t#lLNhU\'-,1-e8C.ahi_5SU:*o?4Kqp_>#>P+$-^XDZ.Q
%!Okt[UPV&m)=seU,5AAZD^>`=\]-u=>Y@5n[:k^*4^+ASiNg8/FH3B;#RIR:3R+^p$BuPYJkf+'G^p)Xeq0pm#b;O].'`'+1nR:i
%M;cW#:^N;O9U1Bi:7seh1'k6=606a#c'U=2hgjVU<BT4c?!KaP7i)ja5'Ab&$7tFKW;jWcbr1_!iQ2'e-AUFED9TVF:+UtscRAGq
%MKj7^l\XG@(:imC_J86p3JJ9=38B7M#Jkc+1QnV[.pX;=KH&!UR#n4Gn4eQPX`F+IN44/o&=#5.Y]>P3g6F"8!JqRPi:WRK-7P2o
%+XA8oNn>*hBTke]LIlS'M\uaZHm:7>U)6*DMK3VT]"#cEW.g;#*7dPu(pOoC5!.<a(e/#q:q\n/fP0hYl1C!.O\[M40PFJ3n73nE
%JZct?>?!G"E'qbP8[q'AJN"r(>gNIO&<(LIK&`FB\qd%Q/I1Q.:[k"p&>Yd?`38#eHA\FNNY3V/5W;1r__j3o7#bUFTjW:6q?0AL
%MqCV6NGocXP'p9']1rnC/P3.VQ%O->m"sTK1M=d^EI>?lMgB&maM_YO+,CQp+jh!/S_F30"I;f=E4Ds!0kC$MOH@jX+R6=#E2dhn
%=KI#+XWlT>4/n&K5]"nE8]B#X4[p=]VTs(_p,oI,<NX@*.glkWSK0BMZ'(rdB/3&EgiUWDV@,@fdX2ncT]=C,F3"MH8[@&@Mk8iQ
%?W/f8DTOK``P,>fk_Q8W_<AK*JdoIhCTQ4aLt1Kc`,D_$"hPaM02.'qQGl[i>#'#sZ8ad[aYs_?CmrU)4fSFcfNq8lm1eMs;,u*I
%f<5u!](I3hBd?G@KO@[uLcbbq6]!$1*-KGZ*#9s)J%.%tkZ=Jfq-m-rWoe[\:/;HI5L9K7\JN2O1,5`nT+'Fk@M$'=DIEeXh[$G6
%1(JMbYNjA,0^:tE6Oc>]aCB6&+G$2DX_L->keiq]+ea-igT#"?`N(\R\Y?R'lnO4)(u5K>)&\rQ(;TK=,R)<0UgDd1Q<:lm"XXV0
%?si59W]sm]h,R9`*52ak+cDqci.`AJ9oEoi.a6Wanho`\;IW",)VIKfO7W`fCYBEj_kap\3TrJo0ge5H>T/Et.>L6W2:L3J^cCG^
%jsa]joJfcg)+>@\#=GD=.XaKLC_A'#e)Ue!4JtH9%V=,rLe?I\0e\tf$4]7hd^pP'=FEg>X3PAJ5tqgu'dAi5L-9,8Yi:he"^:9Z
%X-BoBF2KiFVR%8s>\IELeS$4L?Q;(/5Xh3[?t&@R@Nj#.4up!o?sp%b_U_;Q5d?e[UTQY>qRgUmKFJPG'=UN=/=(Ab@Y8-6$?@G8
%.C"NC\#L7k/HJXc5!12)IjKCc:9eLN7>n`E@:<<)FI^,g5YiOpB.7ZJC,[[tC/)hF+BUqIY)nd:rO03-f$A+@"\q34BUol"Z2J,f
%3#(Qe9%ON1U^85G[G4:Y_-98b;6;f>*L4='k9>4RjIh5aL\VUqg@=IiNQ(TQq9X^7["Icl5#9$4d/`H!CT<>&Ks9g8igcc316oLr
%)dF1q)a>aaGt"b(H8%B&(47=V3p@=KV.q),JPX.P+[Jr_,.emR5c#iMMhKm-)\ah0L!d\&AZHVHV_MY<S.^(mme5Mr&6,cT&5roc
%$bBE6AeQ>U!W<;0SG724;Nj[F:(#cdHc"u$(0FH#:,+e=q@TY<,"@-A#n[/IEnE5!i&F\jSrh:6+Yq2kZNm>Ef?JE\>"hJ`&O%IA
%m/FB=JW6IgU(t^mK&_F!Z3'EdB.4TKAB^q15?[Z-:jRu`&7Z[/kd=V9-=P@g[qnI$*CW?t_9,]u^<U@"POq.@Zitg#f_>kF+t$;O
%-lmQ/m<U&h@a,5o:R4gFR*ML065u,.5aeXN3,3KGHE/eh?9%Rfd"@+kN,.$sF#T(993JDhc`3UlhV+b](0G`,1:or8:tHfEY`.]<
%WfU&"#3cHkj-@p$Wj&TgW"k"GG;:[IcSBGFMSIo;E>839LAODW0_=T[?_NFA0?1YH]PEON`\l3aRj8B'o>mtB1F!WrniXmh_NNOQ
%7a&=NqSOaF8Z`?HZgO\2SHItI=5Q"#'FX[Y)ap$U>bdmI/__m[=p09*'@Nm3NJ^mjXe2@5bD;et#U[PB=WO4N,.4'6XFkgj3Hh^o
%$0]!mFMT4cW19fEFg]YE;S-%`[PVR@CXroGpaj<^'hCOTH_U/]Sn)6T*c*tV6K!MLJ.Du'2Nrj.BFnEsg>\m7JlQI'7-V=T,_<\`
%ZNid/T?soj)E96;&oD<Q!0WbhZkK1j=Z1%Z(ne2$MH_L"rJO.+2>@^0X/$$ipfsOlU>Vhk"V,D6UnWbX1=*%2:)!(gb[McY)D%9p
%b/*.*6eH1t\L:XOZP+MZlmNum2@d<Oi[$\3j5c?Pj:fg<7GYbZ?*$R(:3ZrCWpN4;C=T4l;#bF(JA,58W6Xq+V^o'a:[$j^d2E[a
%]b6WAa;0>SO+sJ7#C+"X\A_6(:HH#nB/MXM0oO&nNZ`=,Q)IO5lGYKT*!?uo<m8IW>CA_.itk".L/ap-(6"81,DIOgb8_-r0*R9l
%2!=_74D#;9UY*df3@K<s9QI8[l2[5R-s-+oT/=Zo1.5HpTnNRm%B#^VoMLoeaV%OKBVQ4t4:t#n;LltecAe%9>$Nf\PJ/V?6V1@b
%/j;P`3.t:@J04"XoT`4;e)rL"28NZ>*@VYd0W\u6A=TqRCXl<08lNrM/)hAaP8]ur[(:UK^`[WZ96<K40'd0:LWhdq!==\G;4o$9
%kF=GQ5p7\H:k1PZ/jdpo/TP_rr",FobiEYFrLVtRe0ne1SD):Y'5-7'F,J.YbG1GO_5Ja+-$=E<U,N,tXp#8_jQ!HrJYfF_"ra4U
%ce.i>Ua+$q?O"I4-S8A!0eUkaA9!ZoY#EfHO/T#e8<'@2"blTS$sf,%MOk[`Ud[$jqO&BC]bSXU2gQqcFRp)fN>B!K%T$,,*)2)O
%%:P)P,I<kf!Tn/ag4#UW:DC8kJpDS"T!lG4dNb0`9//4*8u_(elARPl/X@'XBn5&S&csZ#0XKQ*-Iiau5'd%>e9'-kT+K]7c9ugZ
%RWAoqd"pP[qBl#4)Mb+<=1GS_$KPrD;<_Yk2%V(;T%l$(BUWN(&`TT4`PCtt,@GhhjXuEW!6Mi4Q#B8HBIr=]hUHHL.dH4?-_IBc
%JVpMIC6`c6!J/><,Xr-6(\WcNT.4#F)Wa_N#"Dq/*gVt+dBiXC@me;!"kJksC+72X<fPM;KIj#qGt#V@9i`H3?SXSWMI+^<9PI(M
%EDjr6**0mJghc2t%Nms@q`1MpQ^S.M3$JSMlMFEP7-JV+:str.HmPug^7G\'T;CNF-[+@>r+:"NN(!HVJ&urf\lRi&Zkam[ZqVph
%-!D0W676GU(!.%5?-bPE,SPo`?aH>COlA@;UrP0U"7/hs^pu(>-i">_hD1lHd`Z<C-8)YuJ;^,FZ)e>!Vk"mOa$)El!&ff-RjBYV
%<aBQV;iR'4,4&Ip&ep(WJ0Tcn19K*X"h?)1F@M;t79hUdbj+K\%;/h5=<hM2I-Rhqd3+-0W"01.d0c!-$A*5nf^+,%%S;Cg3T-9B
%_O3oX<NS&&6E/0Y+@4/Za^ddAPBEi\eUV+U-;Z'CBgV<()29eXMIZ:IVh_WQcGG\H/*]CbaL:%1AV1;A:''-\o!Fef0?p4"ZoB<b
%=\u@.h*n&@(:T7=EE_DeV>;IVJ5MiAbSFX9&p$K704b.`CnXkdJ/g4kel;0;Y"C7a"emE,.5'>=F=?(M46[]XF<f5Y*"lrK8<KRT
%`d8lqZC^oA\kFOGeLO*QCO08a)urQ5NPB&,5sjikeYTLs$kE=kM;g*S119>r.#EsWJWN^YU:?rW;=]TZajdCP@`=QE9cg-5M]e!`
%Plrgg#*e*mSLI_N&X^.q/>J1)%MCZBr?,<R4r&($M?IeY*#0sjXu^@M8m7P.`k%06W$kqISB7m.L]f.M*'RLd7S?MAX0aDirs<WU
%H-"&k"$"L,c(W,bJLL`ub6OA<qLGRp[%!RC#>:-]Y*8DXe6;r@&ra?`V;u.UROGhegQBQMTdn]X>^.th$Xem=L)XDgp2Gd_JBiNK
%ED]/])DhSWh4dn*9TuU\V^tS04/O`Jk!HPW-:C66W,;rgU=3@1%C7)[Xm2d+B,/`cHFPL_:/b0HX=Du&")CK,-kg'-V.qu*4\$`3
%d9*"fn;NP,KNaT,[G&"cE"5q79WKPk'kL'%BNh4d2=!Pn8/AH>?%HccO;#1-oi+K=Q\;*G*VEA]=7OZn;[S]/U(<'\WNW/KJ4\bc
%RMMFFI,eAsMQD3+g:Lm-O]!,+T#)+\UD,>FZ;-hk$"P@rfo9`3%F0ji"RMek"(t3AcMBfS5Xpos;o6hp:fFrZ%Ym[(ng[M-qW*Xb
%qL-GdW0.iM9=0"b4pm<3=/uZQ-sH1].Me!`jd*'7/Ab'Ek<PU4=fTfj;018f/*3-,9#0DV([=7N+#rm87Or`jZ3T#,@$sm>8)Pr`
%RZP\2,Se--o[I@5N;0-2'q*H!U34_],'ejgAi6MOq*>#1LI*S:7R:]C`]btcC/@NR.rSChMsH:1Gr1)7N`4@"3DXRFb6WR"!,O1)
%;q.D:4u@1X1/T1/Y5)WTCO.E?=jU&,a:.0(^TR5]Oij\kK,<f*X2q&PQM4"*DR.j^D`Da8#UMeA?/EtQeC=QD8Ek(7<eHMK9DBeA
%HdOrF`Rllqb]3kYlq6/K`j.mYZG8Sd@:M;%%h;`.guPb7[UTW,.(E5K6U7UWMBM#61cGn3r(1e';GZ<>bS#JU->m6(A=3LJ,2F[H
%.s`'"[plUW$L[!Wmrnq]-X+SU,;o<8@a>p`I'2L_BQmh#!>]1J&mCEg$igN`/l375l7<f$Lk710s.N>=?&B$/R<F]]1'eI<2_p9F
%b_Wm,MWASu^M'H<1;/RDCXbRJ.t-VtHcKaKGe,&:@Q%agRo"X:-,1jBJdbA#$8+QdE@?i,$PCr>Knf[KVM`+$!<:@[JIHgSqT+o/
%>7Dd,WYfH%\1+#0j/bl/<m51*n1edJMGP`R5HTs@M3G;>/2GB`V_.&0eQe8_+XjhJT_]\Je#8"TaS:FA*8=^h7cR+D<OEs6Xel(_
%.O:8SBLNP&c/Y52_+2o69taq6SOhV[5g[V*0]@hL`27G]5I8)Og)&WN7FGVOAs<PY#LRK0j`e.`%W_^$N%[[iAMW'cf+=RmUtEb8
%.9mX$*C#FJH6r91[*n[o"^3'jfQ9*XSQ,^L]$7DHqR4<[2gsFjBHFT>_nA)t2-Pg17C.sL-Aom0oqJ<J,D_ns3m>,A@+0^3f^Tm=
%4DKeQ5I$2q(9^73@Y2`<e30T@9j$5ccUTMW7M"1[MWlZa6.,S&#M9ZHjM^JBct,L+.Y:\m.:J*]C0<_-<[:DYSnSg:Al#ELCr<1C
%Qq3DM'/&`*L5$VrBDZM+__T+d,s&s2EAY=oc/Km?08sIE4Lc'(hMA/b:5-ZnNO9P>*Dco@.#h3`!EEm@/1tUU\Z[_fm'CNafYgsm
%*5Bu)UcTPG?6u_T5XGmp99M$G[lrp1BKRhGfsmL'%+mc3l)ZF=W%aR42?o*l>#"^N*3Ga8";ScKGbN+0R:uDPgWip0AM0/!.RX_d
%((mjh*/Y@@;dN5_8RLK*q\EgWbY*<2RBi&6>!ge>qG&$6([9\OGPl+&#/**4HIB8s<%F,ZM8!hQa+$!a7>aj/T(Hk59afldUi2aZ
%nUFYuFQRaY^_cjU$$/XBUi2^Yo:Ja(Fg[et4mAF_kf@W.KCj$048uR#2@-?/`&pdm7aBhKLl2(k.MLF8eMcq1NoI,s"%PO<%*C\<
%rKC!DD2QFSBB1<n0#"A&$.rl7Wi$%uTKnn,j3mb;"pdk%jc)'Q]Y:SD8S!J'&X5-,4S][Z7J.L<AQ>e83FgH/5E/MV3ZD](s2jF:
%IId4*.B>#]T6F#IH+d^1REg2'?(LUndo8EJ?6Qi*UKD3A-8*]^B@ldOn!Z_>kZuY'??WkpiY!8ZG"kd/Y%]QBR_,H1jI5M*\4gO!
%];?s(f<c3DjKrXTJ?t",CuQ(5q<XQAo[B[Y>;L=ZoMEGW_E`46%TS`t,*)`HNjQ>aM^_'PI([hcljO&:o6Pl?.tS+c:i&q;8`-+Y
%PKtQOjFa>O<RLEPkp/Ik?.5!D,fhsM4Hd]TQE\^3b+B[Gom)Gng:(b9c@fmG0@dl\:[%]p,)a,I#"5cS.<uYBq;_u$<,2pUfG,U'
%-%sj:!Neq+G@7jXU5OqnH_RHaC/,`gr8QpLH*#aa+.!me.-aZk[e+f:0;@_M\jVG[<d?Qh&<SnQAmt[r'%;6rF3POpUenW=ZYe]&
%`9LsGdu:PpoOd][n+qFeD]+#5=B](Y"KW!pVn8,L/_9X-ncO!qZYR.0bM&DFXd=`Z9d`5)&fiB/+sJjJ/_[dXZH?C]Ni/EqS)-Kj
%92@1fB2<]A09TXPSQF_akf0W(LH#rW,X@UBr2l>bM;PYY52uilqrptQoN`hWMn;_rWU;nsf>'.8J!_HfJZN#Pa2eI]Wb?Wc!r5q%
%r5.o@/8a99d!)%N/abY;jdjhCBEPS3!U!o5C6Z&u5aUs)?Udq+"0Q4eR18"ahr<@XZ"J/gc<%q^','E"J71fbh't$+hV'M:5ch:W
%l-)GrlF/?i;#jY#UdK-r[9"R//l7XO@IA.q#3a:ZV!4s6Stpa8PaCD(3E;T8SDn>#:(Dp_!6?OAf6JfM8uF(++2sYkYN#(sA:pI"
%%<h<sm\SM,1C=&S2K,./E@J%sU)r$S]pbIG&(s6\!D*",3;kF3VE#2_D<B4^Ku>e^pp]d-Nq<8V7tMq#ZquCWJ``H,<W%W_\i7IU
%JncP&lr'p9?i,Bj%Q&k]n`r@7&mE^[E403k'G?P;hCr1\Wfhr-85Vp+VZ,!>PB,E2lgXC''s0F7Q*m^)[$UE'MRX<^9FV6/A4CZK
%;J8?e@$I?X?M>)pN3b?FRsgZ(VtHlb%%U+CK5&V7YtQ8I3mLPHdA<QV"W^HYP*U$L%Ms["i<2guf;ZR`XNOGJO=(.@Cc,0n'p;%!
%jI]+"86h]mroCJ*<F.^4YE)R="hC[MP/[*2IT``%RN`R`T2'0#j6+#Vil0cg&h%DKM:0!*507$\,">.2Vi\;c!>-]J!!efh$')V"
%:0TgqdL6$"2R$XDF1"%f/S"H"deoh9%V[IlB7r=@nN[d;?a?1/0Ri>Gd],A(\/h)4]>jlXQNI)^f!8B5)=?&me\)4oF@XB`C'_AJ
%Ejj%!OZh*e&p9;)S.);fK(e8)C+OJm4Kqu$6/,l>+N'2a1_d"Qi*sZC?G_mUP,S)-Pm1G2mH_C?pFWO(%.QWo^"(sg9?7WpT[=Vg
%F>B]*\e%_-=/HWGZ.Bk2&k]AGG2i/AG/1:\,;p9n-TsNNP9A5.Ze(d#FMG[?=W-`VmcNaL'k*S27_hHmI!:b^qSU_r]F'A^^LME4
%XoqgVCXN&ZdZh%K?g+NqVSu.eQ#fYThhMU,9ikb$Of[4`O%RIiF7Ljp7*bAa@%+(t5>N-<-=^Y"5\r5g-Cs3)RA!)OPGuZY(1IEP
%U0/rF@b$JGhQgQAU2orcP@jiRp@sm?'>j#:HrR\s@&pueL\#HWIH-2Ei8iYgmVB-;3GYebS^e*r@i4Z]Z?B-PRPo-sC0G$$gK4Q1
%-TY]G`JHu-L]`5^<2$$h0HX]>/6T"(q'qYOL]cMe[I;*WXG=p?E,JpaPhDGdqrd,bfNU?RjAbg6;6B-,mJ1.9`aAi2Z32ms<l8H8
%?\`Xpj:_F@GtWY0p,96gGjSKn*/F":8WAmD"-F4:6*dF<3)?`!4Xu3q1g)_uroW@'kS4\f``&1rcb=>(gK'a.AEcRcUI7k@JiAG'
%d;=:4",fMii]TN5aJfZb;)q>H3ek6^XYU[Q7?q#gaO5q\i&uD_"r/<TUA9D0WQ$e^2XCCQkI`,XmTNjWK2UG,J"UUrl\o<*P1cAQ
%?JS8*2lM4*EMlh[Dd@'k,!M.i&r?^bGgm^r<jNYGKFL41i$+a,Mfkeb#Z$+%.uXn`KM08i:f]J.HUUWN$'R[&gh;Cf;GpmA^T0mf
%=a\^E`0?Tt2HnFrA'bW&HR9?-DGVZ./ek5Qp569b;U"i@_?Ga[S`8c+m@<3=Ok2dmV?IC,.Q1[8e-DnM*)8MVl5UM,FSZ4=#4%<8
%FD%e4J?0s7giT_E*-I8Ih.#EAW#Vt&STQRfS\tNn)Kk&`]&NlJl@d0S8.\MeX\p<CL_IP@_%u?(#kea#IG^S/E/ZbqMnP`T?aA>f
%J,Vb>D8(BR^uM;7@ee?X<\XVs+9g3i&jiaT&9,p.WZ@Epa;A5RPsK!6;pk.N4Mim?2CQ4:/&2fQ.@,)W,&&W1M#43U)8uCT#YGHf
%3#+jN)X-6@Ib;M,@35\L1gSaE\B7`p<2<8i/2ej^:X+Mbi7JGL`R,J1]`g+_1Vee\29PLB2E4dGQ`!);l=^AkT"_Q0+_0(@f,i:0
%4ekCdPn"'[X]PQ'\N5TQF+"o^^"M)n)P5Ir(]*hZS1S'AUF5Ypbk`Bt%$M[%1e;,JY=5<40\(&1"^J(Fl"hrr_C6H#g6o@f96BUD
%lsu@W3i=_c7]eOn_J7N.RHp'_-2LB2c'm,9VNZ=W:R[mID%gFNjYP:pU3H"))Jg"7.NusNZZN"aN]pe5T_/1)Ia9m*IWGCFp;PjW
%05o]qqorJsrVZWkQg`d]HLp^.=)YP>TDni7S*,hc^HBH,4`uNq6:h(FDu+nqGOPjXf,t#f^\sepl/)a5DhiH0jl'SGeK)@D?i&f$
%7^n-F0oW`^0G;J'`S9m:`Ch*5@i\>@_[5.EWB'XU1-&!434tYBr71QQ6"S5!$+[?iO:S^<o7>cqfuY1#@/ij-!u1t3"TP8.[!ViJ
%S9kqU"ZQpNd<LpYLcdum;S\phMuXY<HSLr@$5lE//0rFEZ&+,4W#PlhjV#l2=<NcOOIL;l[c7?V>DBI(F=0X6K2.+KRP[M7JUj4'
%WE$Hl`#TNeeWIk&,Heo:,N:7J8746%BY&?7\Tg*CR![m0I2A!00O\+hR7WFga4Xq=\/!EeNAF(,KQFL8&Pub'mS@,De0SU"3FE[M
%.K_4AC(,0R4aAKDSk(L7OnKh0,JS"`fERBu=e@_>)AmKJK$M/]^6u6So$j1g`HMO/ou!d0;FrjtJoT'Bc#I`B>seC$]CcA`"okQ#
%'T9T^@?q=B,`$d`EZ7WDNa/B).NX_91+/UqN3!p-U(/B`DnSn*-\*r!dqcDR&UUtV+Q^^GNBTC0LVgtpIVU+8eA.C?N(<19Ko<04
%YkAb+=ET^o/?V:_U`AlYn@=:M%i?\J<TK_VgK&;MK:eQ6I)8g$3B?DX-O?(*M1B^\"K!UgS$SQQm(Z",g,N_&fct\RrZIpGbI49,
%Op!iunA6?BG9'80i!GNo*($H<$R/=X,5-]m,Cj<S"Or]u5#Zl)R:Xr/R96J,Z5.6oZHkppZ1Z5l2-HN8oblcMXQqH2`@;a!>nZe8
%X\_<BV;b6&XeI$NVB%abeMQ(%Q*8N9p2qII%-F>4PHCHnC]^;p6*q6<Zq\m(]WdsFh1SDpC=?b\K4Gl_._Wr;&04P<)/o.f'.,K)
%)FUkdQtZK#a;%-q852E7-9[WNh?oVaH4b`?B/cVQ.2*q78XO16=.#RBT,$3U<()NN8=#`de@rJ`nJ!FIE3J%j$F\aVPHG\(h;H[n
%Guk%\$]-TUN[l"*:6B.[5f?N$34m8nWKD]7c:H"qF=Ql#j.nIFQ0EkFF!1`p0r,\FG!AndM.9<%[oLhnP+fAs]`_ZVSn'u%%nt21
%U?C3@,o1U?bNh!Gb(2hr6Dp7i+?"K\Y=nU`+6FL%lA&B2E=Akf)WTF2b&U*PL[IImNgr4Z5DPe`$%HJpoqEo%3R:1:G\Bg[Bqk+E
%j$NL5=)TUKJiZ4lErJUmHNfNe;JblBk`P+7'^9&SAY4RW`6cgArCWTMI8J5'<SI[$\rgiPp?Cq[WK)u%"b-($6n^=7o?\^+(.4Ag
%'V_MPSId"coXJ&$39,.O6Hh"OR"H@mq``5L#r7gAk<W,_js<W+/^sOOILf'FOE"5%1roZ[6SO,5B8[>SZbaRR"`BCD@I1l?3[?SJ
%YH?NKbmV:&"a:Fq4\cJ9MR#]i_QnkfeO6(Y7bo*%UfJWKdoqQ!P)KTbaiP>/7?f[X-[\)A)[-e)FuUdFK[Qlfe'f&g(CnCe0UQ/<
%&Cbb$0oEgbjo++-SIr"C-mKhFXlnM64m7IWn7jXS)p"%d1qK3L7$#J_kZu^I;1XFX=66^XVE;]k\2Hrc,I%urST5fc1j@JqF-+ks
%O]sqiAO<noF.CjgX#,TQgJLTCUX?^*o:2j51U2fUj.iTBB@!Le98"ig#LRs#M87-;FFuC,ch2/B[OW*U2N)JelfZ79h""d!NDgrt
%OGi@5IjU@I!V/1\U-1VQELo]iC)QVW_#@@rO]7(PW?sQ6/pp.fG2r^$i/kn9KbK;ML!k\3YlUgD6Bt]H]TeR4Sk/(7CS:Qfoh=tO
%^A9&N?.d#Qo4>Z3=Sh/jLap)5;f?PM?1e*ebZ738b.Di`<%ZXqYuJ\KU[QC/p-nQ5n6k<eQ#Z/>i;hWf;gr>GLU\>TS;aAa(dtFb
%@5\U$E0&G&<*A[(>hq>2LJnOB':mK.&YlRhA#IaJ)0C.^+VT!^'Jha1hX`$\'32Pa03*SU703jio=M!5ga_u_R&GFe0?&7qC/Q,]
%kP-j\b8K?>5*7Br,)T+Q2a38ADl/Q)=mP:mrE,65oF\YP6`I=6-71,iK^AGEEn6Y>=ZXs-/mV33-"7H!6e(8-U%shSbaY3RBJ6"d
%S<PSCEIN(:AhN=W."%8+G]@T^kjWP#['!;CT/md<;h<rMj'7o[#h,04U30c>3U=pf:klk/r4BXAJFDM'7n]d:a*Vj6JCVa&eqf^4
%oTj?K[6Uon1Emq>i(U(C*<aZA'OkmQoM__$=-Y1cRFog8`$K8B0)0"L6KF+Zc$AiHl0Dtn(4,\<"7/SiIfp@Yg2-*d,YG:(6AE1A
%SKC[g".Dl],K.N&=_deDa#"N@&siq;;d;:<DMc>e]K1Y$/]\ikZ4"GkjLe#(j3W/YLLFs7gg%)'VTqK8;[Q(()9?gJ[/K'mrJno*
%Lf3`5E9r\n8S,`SJR<@&_5B=V<<X"rg,L,'V*bVVZq:k%b?Q1/6^?2U?`kM.>/D=4!b[_/i]M/d=;dc(#D]XN^blk,["IHl-)ad.
%A[cVd>_^TomA$+7Um;B_Nu=`WMW?"4_=<+NI5#Y6%LSW]7'D_3F,Ri&%4d5*#_Z;i`m#PW%O+s@$*V4@Ei<.*P3*n*TSj6,CY+3<
%$Y4O^Uc`0ZWgI`[6BN>r#W`MIp&MjsG^$%rAPQqk"j=UFU*Q[Qou[;*dA9Ffgml?caDA8rLU0c1*tFPC=U462/]o8"IGUG@M^t52
%f\uBB#14Pt!0OZm;\iS2l@Wd+1eUcm\:b7D_TJb-DbW[@R0)Fu^)aHD<2]7a:@daMXD0&OkNp[&#RSmueAR4*3DkT<Jt7X_E.QYa
%2"nL3kg5@b]it#>Fjm^,$Kt(=XP5n:--onVWnm+*&ga*VRgMpb6`b515LCCJ5c-P?P0p^s=#4*P<)h5DQc0@DVVb,nR_;Y4VG(9c
%l5gP8Z;r9!,'7J6LM![n3c.l5P+EJaMMohHFQdl\X_=:uc"T-/0VD;\"ZIe=.XuCNW^s$9G>YWEhR8)=I>QU0O"6&\1pNJ2drk#&
%WbKj\OC58>i0<N0R/9GPF]>H),10'mKQdXTY#Z:`Zh7`fTGRb7@aRB<YtmccZA_]nN.YkR&Odl(Ol8tY(KO?=iF>\nnB55S,s"Pd
%&bt9MMs*NqI:0[ZM8$,J0"%9N8p;"a"jI5#gC_O0`t%niVKPJp=4Uf@4f]S+'da8+8;R1)"rT.q>\@i;'<ZS?MAKnYC!#i]08%a(
%0W/KJWk+<qq46gpWfkOhI^qHA<EuI"oV!o"dE,.2=:X\P4WS&hRV.e!aTt%?;c2>_fr9kI6!b^0l^g)oCu0,][qEnCU^qL#bdZi@
%ql!K%\m1b#1XZRZN'*[SS@`lELK;S3,K'^#HIP_lVD%PKio4Cm&UYm57rB(q(g4g4FV%Qr/b7IAo7K,L0a`g5LpK1DWQV\R[O6Hf
%Od[Iigc)sia?h-==Y97/<JlLYd8kie<irm,Df#(P0h]`Zq@KCH6'9eCh:Y_o*(j($K\HK2W"2E0;kh>%L6r`VRGi9TpX(g=$#5W(
%Rbd=4!a?/dbbp!)9;upN6,dC^%d"5@.@I#GdI]9'#i2qiiT"_f;UH#C+<!gRDIpPV8sBZ%G4RDL7\T5U.7#7J(XZH1l:j8KlTeg5
%N2]mD=UG8JZ^0X^5%HX?Z5<[G;%aXErEe'Hg(IOpW&8'@0O+)V?Vsg"*VKUVP;)tIKOkIF0F+)*]XZ(`]OM8<nV/+AEmpF&jm+2C
%<E8,rE89U$-uPBHE_uEb7%&D)q<V*3Y%$0a15a$KGX9:0qlYg4bBQaN1fdQ)mT'd@3,sCG?ea@k[)`@CJ;7cm!be`P.%k)[CT+C%
%'t3ZGemKJa9QRI&1^N0D((d$5E9D4m=BW43ZL4'f*co'ZrLm[eZT@3ir<ELXdV*s8#r3sQq,-E-ADmq@+YT[-E.%3AN4WtY75H;]
%6.4l[75*`n3ghkYOqBX.pi.bG,^k@+"\6P,dc!=_aO,?23^[U?LD/c4L$4eXkeiGPdD/fCc_61?5nG7QLh!,?NO=gg5nF,4n'Os[
%BHk?M.#p?t<!3lG6!puX7-rkHTX*m9C!st9fZA!ca&MM*X8nUM$\=]%7;jNa'>91%25I$93GS8XXjLBQVRS%bMUJF)E$\WGKDMYT
%i%D/U%\a5Y.[LA_9uP4nc>g9^UJo4E/+S:b8#%:e<bCcecp^_V3]8o/-*BKXM'Yka`-BG+SoUu&du@6[*!q2pU?Y4)drYSI:ldWg
%Wm`[57^?DK09i5\56]#%pg3+WM_^:3oV;`XoI/uM$=<JSkd!j<So#C?f.\6BF[8D8(tkcVRs6qBS5qlhU6t%1$mf8NaKp<$0r8WO
%Z9'LC(n5]<kf,+2KVTethCB2\4qW_>a_3(&E3O4)Wm='f.u?WQ7bm]Gm^++)+op"M?%56YJP,PYo1OeVa:0Z<-4Xu=ArW5M2E5%$
%Ch#g#.aAc[:#G-=7p%g?rA;^c1ECe)KD@%9"TFXrMIUSFq7'*dZ1SlE'Uig%7P%^Y@3B"o8gutJ+dSRni.arnkt6`D0@:o-)kJDt
%R#%GF_:p<?eU:E.JeUHT&W;<u3+7Z2_a6I(LEOdM8UTd]6Am``_9aAE7"$o'G=mW'*(]iM7!)iq#>WKB=uHbVmPRt-g:,"#<(^cL
%Pj:mWCoHRZH(kKV=u)RWLYjeXJ;n+;R1L`"Z6CJ^Gq)S.)7u&lb/&pR<BMI]^l?au(YQ:d_jj:.Wk]RjL@1hbeNXs"W0+HbCdpDB
%\.l)CrrVN=8)n"N[e_t^\^WKI!-,@6_qMd;k12[QZH0ndg666X(Z;>\<BM?b:s;4$2lD8qYo?WpRc=BcTX,/bae`'0GhgX@?]R\&
%:?`$@&.u>l_`]3"3#.6?'e#-c+X-&2:KHUS5g8(6LQanAQ^ol$VO?41[POGiWd/]X?&#V-8B;uY,"@WpqP)&;h\C(0Hb)n`@+(]0
%XZ^;4?V#nQ/9W!g`4"Y>*u;C2<k1=<'C16;:?p2GGR"rZi,hnrs!!i2MqCe:+\_Z"`k1B0A$&+3YZZN@,R#uh.7aQtYom[)%*YrI
%VHe<I*2$3X]-^S6D=7sqbkd`$:^IIDN=I19V"1@@=>6OY+M16'>GpuAXS;c2I8spd!b=k,_YOrRo.BNV^'?_"-!&69>-Yg7!b)?D
%[YTAV1bC$s^$lB-Dpo4:P5$nZ!SZT^%@K67aZb)1#H3^l.\H(M$4P6_&4MH19sF&H+m@m!jC0+;5FMj$+6IqHKT>7(.M61c>>q7K
%_e];`!fN@U5YbM<-lF3?3+?MUQ0;K_[H)(n9#brf8-,)kYIfD0`%1A2o.%fp%$<1-_W.Gu5@!G"L(tKVbq*L:/:6BBo@.Rn4e_hJ
%W:/cBX",B)fh>(=bFIJI$"?m^`tB$JS(.PGhE6WFgJ&c%pGf2ig1MaRq/OiP.D''519i@D:=WfS/HB9RaeEuY0[eHg%1;_(4sJKc
%?*sJmCe%:7&rSNVTo8fKXE[>@fURB\h=m8*%6>BFLUZ`f[!@c!O9BT)<*U*MX(58o*9CHM<#[-RpBSAl<(3P_B!]&"#@h`$g?_@3
%;<3;kJ%S$r0KQjV!JQ,Z85;8j+qR%.phmrr6gk3(V?4X!agfDiV@(tfg-33nJtgj]f*jIO!<Yu5L//Du_bIXVi]s:`/eP!T_#uc)
%[W8eeRg$4U9QNK+8sBf&G_i;o7*t>BV\+`Jr53tD06t:AGog8=G+RZ<A"(?lL;m1^o3OG6\i_I5&Y_TFU4QoK=<Sm^-kQWel,bWc
%\.-hq"_U7>1C%&^%W?BE<]OB?dG0KR^=f=2)n$@>G+pu[._Q-cd^k,V)*(*<$-X:D*EY`hUK(7s*'159a"\2)Jp,XTOJtQkf(#a%
%:SaH\bAa=]k$ZSB2dHc8h]a0$D8ot):sO^=&.]Wc5\=9184M`T?P[+=$4"=p>eaWgOqdEjm$eRLdrNsh`a*664=Ck04ZWu<JZGqT
%'j'(h.tZ48X#Mm@qJ(aHnb"Bg>5)UVp[\eS0TaT>Qe?DdLa[R+f,QGGJkP6-%Yh3,k#A']!#k!>P4)K$EEQs&.qL=iK3gP4^[m+)
%;<dtXCT[?(7+5.llkE1POVF18@GJN.2>km3`S!`u6G:.[h4&$INYb)BLgDl<'OF2X%1kGUnnK2#$diMqM2j,YI7"B%aRQY+_aKD:
%eiV,H[gW]'[0]#:]d>RL]TCQ3RRToBf$dkM[tH,)kSAmZig]Xj7Y@^lf_eDOW_3uKJq2KrfoDTT/.8Kd%-#[u?2(TjB4J9<NGd*G
%b.3;fP?qC(M@7gA_L>A$L!+L9-$Fjb&hto!@?$J'n(@6smauVT4Z*&6=I6Uf)>(M<4BHh_<O2ZT7u%nn:-eT%pd>3nO`%<fO$E<L
%FRq6R\o:nD?Zd>9NZf?iNQO4R-Au-2!Cn!W\mf,+/;%.m?hA@X+BG"`^>a7'34po'M$hnU40"6l!lCItE+f_&&81<SrtP&*/&<R<
%1A@fg0O4iVJa?cRDb@+geNN]nQ+gl]cDH"3c6*_!+O=W/QLp_[W"<mpH3OC,bpn7LZqiQHL]IfZ&Ei&='EgX)"IaQAjZ3DM$P@`?
%Lf8XG\mu0\*R[Se9oIt>q'/<#_)Y*^1_.(,[_#]&D[p]`#MY8M<r:#>1##!s7D#3p*(P;Bech_VS<V\\%_\m\)5Ej4^R>l'QRO*E
%f`r+>Wohd"V?A\B]1,eAKArCgUu:C.>.?q+358SI7HNe^\3P`hB.ZkX9THX95Y^+Z+D421Z\eo3,c5L=?GS1!#SnIU]a+2l7^&+F
%=Kpl&Ju:tt.14f;J3\ppm]"0nl<)<UdT2I&At/@l-EE_"E"CEUK`MSTX.tF5oSt(tnKB=d<'Kd]HH6.LF!A]lqk]`bWngC([%m1_
%f`5kd1Ll%rIiuMm1?u2gIu7k4@eU/53#1Uj"u]Yj`U7Bp4+X@3X[,Q_;;?%<3b1Z6l:#4$]W1Oc"lSkm5pF'1<.p4>:#AX=&I2qU
%kE=BT-13D(AL#&r6+AZEGb#Q50p%eideuQ=G)Di4?*&Q.p;P)5B)IWrC=)LgK[Y$_ABBF"*+<44[@1nYIB,XTR@^SI;fkZuG4:jH
%UG]BUF'Gq1'U014!;?od1?pDh6.DI%JV>t'fprIsh>*?;UDgR2`Eu3t&RC!SCR=(SqaL2MdA5,1.;Mc7d"AJ[@$>n50/7<aKL0u=
%&;->7+5e+JK'CP9fdVEWWJ!["6atbVe2Q:7Orj7c[1DOK-6c3$&np8b+sPSE=d*^eK-m3P9%T6(TIL[O2^9GaSR-#3/HO2g`d=RC
%?_ni^2M%_O;`Xq.FU].E72q"m[^DrI=YtIGS?hcqOd!InOV#h(Np7&?eb\FQGML@c]\%6)kFbuh^DPfel^FI":bQ:M6J)WAL\cNQ
%j44q":>%XRga0IOHBlE?S=q,eLb1AEqjK@i%>sG^R2sMfl%B*g6?f0*%DClI02KtiOgT9hEl2RG@?C2N<ojJ<%gL:!`gjhT*fLRc
%T+d&U`,:Dq:?l'k;<*+C%9F&9ihV)E+2jP0b"?p.#>oV?dNe+/Vrg</3NK*hW7&*u'%JEE?gTe,0cL@X.S5E7;a#"<O/s3'^`*qA
%RT"rp/p$6:?Y$>ZObG"@k%a1MQama'B"rQu#noI+/uD^g&eR"?`J[MmL`.1RP2ulX<%CY5&]i,Y&fS2XN@;_[H+eY]`gGU_$fKrp
%&E,l_7?+Ff/fDahF=K?%D2ESeEGZgAk+o"+ejsGsY37$?N\$pNR>7DuLml4OC4oXu!FS;n^?51?O='Xh*>([j2A8iU:dgi9^P4tO
%*/((,.$XlU);e^s'?!3-.QSN,.]>5\KK,W`KP[_:bDDb?VR$8ih#5GMJAV1M3"TKQ<\NT5d[YFXMc30&WcU2Cg[(H6TQVG"EXtdo
%XC9>C<5=l6m6\Hb=JKE7Jq.=h)B)omAhUU$gf\GG'k,r*^0D%6*/%ksr.\Ymlf.rK_IHo648*79/"@<=^k5X@(Qlm7*@kF#h/GJi
%E<`up#o'PCZ`ndD$L%!d@ad+j=me&o`=GFR(?Yc_"Xq&6`HUuZGV(/\oNW-q!p,r.`Mj4[q<:;c[WHppCmf>qi/h3(2Wb=ERM7Ff
%8Lp<-]r"ueZ:KKLJl<aA">QbXZ,!`DjjN]TPK>9][97#d=bs9GnP;R&ZZ/]k]\j>m<W^neS2I3HT/_%P(=$ZH33sZ"i!t-e]R>;G
%WX<J$*d!AC2hP'`*ARJh3^W#rXG@*NnKfCA)UYgXZV10Y>3.a`KqLG&FFmsRG_n7Mbh56/SPOIG1,a-Y5NkrIdtLD,8`^dQbaR,T
%Ji5l,D"h+\@X@8%Aq6g#_NYR'pVqm2>hn\QfFj'^0kZ%)WaN:&W/i?>eMO%!,YQ[>:JuOrKa!(JD1T[4C][/:.\`Xni^1I]c73W%
%B^ho^]9&>1Gc=2EJ0T2;am0AeFZT9=a!l.>C(]9<Eb6LC']1QZK#&$:duR<n(\A%M4"DDm\TV3G!c[8`]'_p\EtP.Q`QEL]EDV<^
%6a^;>$G]!4PB@je_l_@3=-7$mBp*UA#r\E4U7=<DRj^Z+lu?<Qg<S+/:m\/.;#6[oGmf69J^`]h/`H#c,(5fqS]eWY[1t-&.sdF'
%2#n"2@^Osm6!dR&'SZ\`RLDRgZ%kn=AX=U6[`Lhr*`l=Z&r[UP\,;lDLg#LbVe'X3[5t\*LT)OGCcZg78>GO%:)#-'YgGV%K<nRs
%DrSZ2poO-4M2kOt*qq-WF"K$/6uuR3?.q(jmB;^`hs/i;RA;cqWt9^bYe8gLr9^e$&]8_+G33fKC=5dhOXAEH@U\RREs)uCT`_kQ
%mIaq$?njbOYm'D079kg>/:(3Y@!uucJRY'4f!?-s?t`GC3$<"-o)Su'e['#<4Ha%J&?=:KS4T5mZa^a:&s#310i<'L'+qep<s1@0
%13#R*!7<)@dZ`40ba'L.o2;u[?[H9&[,`O,^qAC^ZV4b]f<!G]9`TjsRJfSHW;&.P+cmWeCCrsg>BKEV.P]-MPod=IS3nW[q+ZTE
%VR$[9fsnTWR!W[Coql2+Du$s[4O%WgORFMKJ23(NQVAgQgFY@k43blU?sK\@),UngU=<6<;N:oN`9`,C[h?juCMf@[[E%B@ac.M%
%;-'&fnFPu%c=Mb<L%KNC=A_b1ku3iuH2E'UMI:&Gab/$J<OlYbi7&!$7h!2J<!C:aFh3si5?BD&A]^sJU-@FBFP((P6ku_IQJNcV
%gN:g@bXX3^Ntm#uCI*P_Mbh50jDBT7[b7)/k1oT&jJ(nbOFsWbdtAWK7$Pnr>,L+*OZ(^<'08Ht>Yh+6Yup.udmZ0[*qgIQ9a3"2
%3E![.D"qgd7e0#AfdhO.^A,$Me5CWF>FN)@.<A/+1ili_97AMTdq.9P;4ZT#$`3Ku3S49qGOO62l"sZ7mUnuX5?,Q?hOld^6ej><
%kQ<i0AD0b?_9k,NLSC]EB%U_Q[_%;/rTb7IDa8GF?RSQRb+^EtF&7,NhuOIYM9L%J1+>$EWV,2$k2'k3='IsY%7VXI'i^cpW-#A=
%!6gj0-LB$P,qWpWW`'\5h3>$:YlupWiB"CN@R]^=0P8G5C#7:pnr+m,(HO>?/T[X\']R=OO50C,iuPaPF61MLQ!kn7Sp\qt.a=nf
%SE+ua[p#57Rb:]IgFcc-d.u6p0?WJ=de08^of?NCELeM>]@ee?E4p0=d)=[XZkbsrUG3,@1-U?F_0KkmhCs+6BhNaE@@YA?p#n#3
%SmC_Y*W%0GN:V9^Q&g?Bb8.J#)s#-s_mAWt;GiUBb?,:Dc5UDQGHp`hfb2--jF%]29D0-In-T5hbtg.r7'#UT$DldGKfF(?bSObC
%Oi)dr.b3]7)IPI:n)QHhm!'RkBqu.h,*dF&)"i97"a!7ka4I=[nLu-*HDjhb>0o%MqK8iiTR+>\T[tY/FBFG20kU5XOcqV6Hcbf=
%6:iT+gW9h<0UlH^Zf\Z]p$,W\<[=$/R^>:F4jYWjG2h6[do/Nt93PPck9[d0IYk7*H&$^n[YZMXkLHoS?`"-FfX*Kl,mu=-2-?s6
%F:Z)T^M#BqGe1Pj1'T=j`cZ=Rls:#sg<Hl(Qm9:M'q/OXTrgY8GhY]E,?q%nS:%!J8Ctm3=8*1ScouOZ(/7?kp(&>1+tp'B/5X3L
%GYBQ@VV[df!A21sb7)pXQ_^KLJr*lFNZ+E6+OHuK<2iiQCjjK?K4[a)Eh,]odUc!BG@$WZ&KLJp@[RNJ:hKn"&tOWc_R/+9\#*oZ
%8N@.&EKXYq,1]nAC_pp-+:R$,"6Rj6T.%Hf.CScl/k=s#3THPqMbiE@5VbrK#$rl-Bt<)Y]/@EP!h&;Xm#<oRcj)PEi7BHFAnZiM
%=>am]V?+S6@,4.4JTF@uDg5F<^b)kjWOjZ_:'Aj,aZUF#CtkTIK<LLQN.0#d_R"+nKu[6sE3Nn$<J,40"F[YUGYNb_ZZ<fq\tf`#
%WlW:#op'ak#7;8LOOpV'4<)GGelKT3eQ#>2\+9F/Hm-'"+eb,#"M9[`J\Dt>JUM>"610^eQ/]cV`*\Ic^fcRH<-7uH-LXmt^WMc,
%309uf=oI*^mQZV=%a/,^pRnQTdJGHA:s"sLDIh^R$aMjj#>:6!UeA*,HE^ILU5#,\b`g!n4XBX#&6(4g'J+J'F?CGjYX[Hc&h,*:
%klS%H:9s_\3&@h&KfeC.gr:JG+aOV<X1Sa25@,dR-^%(%U#aa4-M\8]g*E**8k:oKUo__>-H-CK?Bl'%KP$JEA;/nD"_"fJc0Gd^
%3usiB431ttieVHjP#*0X_*l1NO9eF`J--RU34*t5`lBF))AE6sX=dMuO+Amtb`2;">2Dj>3[#$B,#j'SM):P5*K#FfEEQuL:neC.
%>!pGPm^Za"$&]sYjKKsQ3Vg2l]N,0^_)4q7^MNEm[0G/H+t8\B74*:DH?NK4EncEq?NIm'^/WV<O=3bu/32s;$"a`=WqdunB`MSi
%6?@kHJriiA+e2-mOLHL5>SU?L&o(\XF+U[$CK:4oT26mP7@K%n:8.A9?n"<n0WS>A*"UVQA1tMV!C<5&HS"[jE4U'"-A;QHDZk&q
%;oB2-f;osp3;#fo;fOY^k-7R>9gNfM\Z$7;(sL@$oWqj2&sp432dWY3M=o\D,8RiuaJ\d!c'/7:lE!qoCge"A[sIV&9gn(6<foFc
%#;LcKqL>ioZ"O>:Bq1Onem;3sBn[3P1UeW4/:^9b(&`b+I.T\kRE-[h)\lY_<9%2NQ90bB(<W$g;PlAg)(eZkU79s`.7c9J4jK?<
%#%^,!DED,=bjP*e,X74?k!c6]I>7Ef-mQjXWNu@X2@[03<UX>sr@4*9kL.;]kSB"IRSc@m_H@U;h,)@M[TMR==i0pK+AArCY;jpo
%$tORQH,Hc6C.*ECma5_4A(6."_WGYqgRr"ng:"%sd+dq38aUe];A))H#Sh^BBiu1bBX`qjANL,tQqMS&RNo'UE)'L4-J00c/TP.Q
%_MU*m?81-CB)O=hYTM-R*%cdOK;]f,a`ak">`;N=WJ22kP=S#BR,rmP$Q^,8G>q4hfeU*X<SLZWZV/h@<u73mD_r7-!W(6':^YY9
%W_U1_<.K^,FC82]9JDDAFg7krKnX9%!-t7&>=?aW,obGu+iq:l[d"kL_nMscg/V5l_OAOeVKPZB8X7NuA"aN!H%lts+s7ZoKE@K`
%9+SjrZc"nhDsTLHakoVh^4ENLPYn2J\npfs=G/R/3Hr*U"(l,o%@K<T9=u/'67MXth/i\8ceW\T>'%OM`2X=5E/BL39ecu!?W+57
%7`3iG)m?b_lP@>0.I/V:HBmJHo95\iMs2&#nlP4ebYQU3UiuR$8WD'7'c@O&oB-k?%bOf^!tC-p:qW(6,UJjfZ+=8(O0rKrUk/&5
%aYHZGLDmNkLiRc<aJVQZ)-mOUjK?M2G+3U)"/d%QYLPN)-C>/4V6M@Q@SK9Sf+^Mc#R/Wi9#C74%&=eP/oACl&_aJPFFk#()mNYI
%e"U7VP\?1!r/CRX_E$&R+?.Mj(ab(hY\CY6\:bqkPFgqpK^<^kb'=fTbM!RFA'd<V$Yjiug\M;4lBO>Oc8ne8QF&>/RUr*J#N7An
%ON>&U"[AqR4*e+TZpAAL;BaV6Eou2UGSe?!/1He$^nJ,j_F910K7:=e=>jKq<<Yli[%e8@KSAtRrNaZ>&>*V^=Oh"S.c/B5&Ck#t
%<NSoOr7WLGR*,uFj$%RTaerpPJE+V<-8&Q,.(c-$TM*-.@bY$+QSO[7G4&0Q[D0qdfs6236#K`96M*PlWFO*ffn7X-c)M(*`N\]M
%[ugC/@t5=JHFldn;:`Y/V'$O?3=62:a\&PEepZdGY4W@=VK<)l%sX(4cu]p1#D)5$WuJ<gF[Ugt2jfKV<\5GZ/URnOGN89?+?et_
%)JrF8@Mrl2UnDZofc_^uBLN]0]3?5l4PQ@\b%"hBM_e59nS2D!giBk0(pFP3bV+?62pY9VKEtYfaYgaS/&Mr_oYcX7E,BTL=dZb8
%HCh0'r?3OZ8D0q9(.Ed/fP/cgcCI+s9:qS"j&fq]TXbAnJW9%ZZfhf%"-_.*IUZI6TGc':a\nbgm+WgRFj80K96\#NI#b3dEEZn*
%),:P2OQ@)sUIoD]%H[pI#c9F7\QW0.ii>CK-O*O:d2Z@i!iW+GK0`%CH9ec0,;:QN5hn%0*l]fH>^*l7JhSiJO"t*p,edt'oSKE"
%]YFg$0e[%Sk>e"-dW(;T]mucSmD2-&hM_Y6S:sJL$-f/,:X)X##I(b+\!)Jjb/.\/&,!7"b^Yj],b#1\[$sl63A7"36+!q;J[i4b
%513mi3IjHB\M+DT1l09F4Gp!%Ql>:]XBo,jM1Wp\'1'S+U'?aK!`dP!9NDB"@FAd;9cD3],bQHY"MuEWj@-?\Bm-f%#oBnrSB['e
%I*lZc6h=Oqe+W?!p1@5O2AT?,Ko-Z:=F@caaH0F"3a/#Q?\upkVed7iPac4@A%],(i/'Ud/Y/M]-\_`H8HF4D]'WfAJ/;M/j\:\2
%6HcT+'rg7^Fa?mQI:4\LiYO!6,*,albWCoUbj=`:4*$:>KuNAKi%14F>frZ%mO]:H8D!71GD-]UKH(T1['R(@84"*4.NdiAY%$3D
%7]\toU1;YgD8EihZ0?R1o/Q5CI=P$7q&gNY?/j)hE1.ik#ggpFE%N>$,L':"\3Uim;7eOm!Pft]0""V>=<d6nDWSBU\hLBBF0m4-
%38Yo0h$O?57C3_'6j$K@6]3ie&n]/!MRlPh_M!G40rocFg&R()<=Q-V<d<`)3lr=%64S<S)J@n?k0-T#,V2N3@nZ^G].C%+RBU4D
%I'R*qa/NR:PMM376R:"*Wo+5^#hVd`3br=M"W;8YlVabaZ\1M5(bI,)+]7lN<t5S18(ddQRdeu\B$%`qn8"U]1t]8'c'([kSI03e
%BBiAj,]EDC9M*(GE154^e@oR.<g=A*>L*B(7+tepTX,T_`)0,B$6^KtYb\+.2npeo=a$Y;^ljf?=1!m#2UIJjhoDls&?;X9Tk5%:
%Gm$3ejeT<V00@?uPo,mf%__h+=<l!D]P0L8]Z>NPU]SFGF(X8V9r^ZUi>L9*NDa-5+=3:Fccl_tkKRM:L1M"b8cb=,<SsXsHg"E[
%CLZEVUp;=W35-[uLcR,IX0-t*0J07VXK60`VJ86aRAqp9K;qloDK8UNC,*Orb(W?RrZDD<lbQd\OktnS\QS>P`CEK(VEq,5>u]_q
%[B::>gpd@$a%Ug`!_Au^EY`bde'Ro.F4[()k3XII@=cerk8$[fA@,>h)cZ[m0f4O=cKgaEC-3]+o5T[7@]8`eE*ONm92:A]>6iH8
%7I@uo-%-pAbV]u)D7Ib>[M7e.Zh5_3Ff]UrL7-nA@&7I0%Q*8*@b7=#UMX:L7Q]EO/KbcSpnNa-Y:DJ5QKN:\Q*QMZ(Ckj6S%R(:
%[9BG4otnog:"cm`2F>,$%/Z6V=#1DJ\olb%^QNXt+")UMfQ"3S1Im+C\]Ii7`aFX9jD3E^2/=A'fpK)9J%ES-\KVG#LKaVGPjC:i
%ELtR_b4T^HHspa[m.J_h6TQM'gPD/.X!T-QBQD-LgDh4:%2pdj`RWtKP2qKL2Vl.C1FZJ*7Y:RiS0:[&i_7I7>9o=uHAKamP27L_
%\6cnmp"(FELbigCj+9Na[.n!j)urZbjiA)&JA&pT'im"@%+mi*I4Zf<9%X\a>J?W:Gu3W89VeduNHjF:7n]SK`^<A@T=4$W]L3M]
%q)0P2pY+Tu8JBK1F".G'[:gn.BTa`ZhM.58@2#W*TS4m^O&`>cNeQlJ.6!3*]'VDd=s'#d;>>bLq?eB7ZV0p5cFI;dVY(-F3P,PJ
%F+8Inp$BU(PI##(@R5bPl6RsO&Z7L0],&Lnc"B2`[!TBq(4(nA8AQnrom:]pj-WLPUSXi&VtC**o$GTe()/BOM5h:C,pm<h21W"9
%Z=;iE%[P:D@Pk_s;?jd9@^2Xj8I^q+MAb2@1%C#m916,JQH!_UF*Wb@``]d-J:of2lfDh\`FKjOM+a&6#:2p-X;C+EBj-X>:rQtA
%[<]GsLhX,7PH],J\,_"orbaPt6^Q@T`u$?l-?I<0$Rb_ZP7VY#TnD'+H!9,\m)1c^$t4$74h5$$*^klBR-oO\9FTlPJP50#`3s`G
%b`bMBa#8@9l#Y<fM7A8IkGS+nXC-_@5k?cg?2bbb6aocI(\r50h9cR?MC#*_]]f$D,[s88S`+uGYjPB0@X/4=l?r;5jdHNe(8E%M
%jRqi="]=GlNg@^k3(C$6TXIE'KPJ/$<IMGh6:R`374hTJA;;!r@2+a]:3kGp._<ngf%$G0eS<Ka)!j#-$p1a)Na=GS.%E,<"Z2sB
%Vcoi4^")QuZN2;.99Yef1FNidk`B=jM\bg)ZK`bs$%uWGq1Z9ubMTBtbn5fh+GquH5takO4X4?B)aQ9d:b+`h]HjPd;7p378WgK)
%TXfBT-Bic+HP8!,MV^HfV"D60&d2C^'iWQ..sNnbR\]^FBSRWD01lb8j&g#,2LnW0$*&T:5a^nAC5"WhQBYJ'SMYd@/`!Fm1`N"A
%g_Bu^BVG$&Et:&i,]n,(((.-\=QO+GdeBT2Cr$eqh,`%$XUF`2b6HY5]Z!WTC30f9Z76a4"k:1YjH;J`9;osKj&ch,8*BRE3k?VP
%e!j(;%N%'n?%r"iW9ihG+)_0sN,EX0e],Wg/UG8;\Z*F*//)iV[`(+AckQQ2fsO(C^]g0#YPpqZJL\aClqU4)6;p]>$<5.!5=@]T
%ntelRr9YY,"su#m(k#OBP)#mL@)t3B].d9>4O0lfln*bQTVgTZ3sC+,dB-3T)945YPj)X^oV!o1fX_sJ6WKtr,b0J!`JV%Q.toZm
%NN1FMLSBT#A/nf54;>uc/r&=+lG>\nbTXrAm^bgId6Z;e@R4a[:b.Hn@4R+LfNXUA1o5tD6'Z2I4X,\9?j0-`5"Hp:EXg,lb5_pi
%\Heh6X^o=`O`%9+29%,tq\l5`RaKA6Hnf#sSnb_O?lot2!)%3bY\BHFad=7T\rl(El(lt!KO`%Nl&I]M*=D1;c]s2o0e6tf"<J(O
%4AFTU$N.4a15<)V92n,,S1qkg;m9&@0jdWbp<K#Np1e@1i[o7@EP!i(-5M).kj`f==3JR8;Q*/GKi:B]blpQI9nu_\64Rkn/?!>`
%out9*nXFDn1RnM@;8`>hd_^)Z3a\-mgHcsTR#\)-'q3S63cgmf'gWF"eU#q"QR=QF/YE0Qh\G'##u"b!7ciop[QAf[7Nf(/\sNL3
%.?!b)N`@]5EBrQI$jmgr*5<Xf2\'iH@),W$R'G&%ci?Y&`PN*'-jEeN/73E%S0GJgYQ_*]Y.-mGdn0s:!>D?\&LU9,]Nh6-<4#:M
%d`2Z*pl:9_+a:&A,Z^3U=D=jffbq0%(_VKa<6_u[$4P[e)i2CfN>r"PoX9FI!kSdE.V)g,'rM-;q#m$!Jj6=cK9^MCh^hm04i'"Q
%4C9;b9*duo)Cl!&TCamE$V'?T\`GZ;!;D/8/I,A+3R\m$E.'_]/t<D2M`B[9G6s$>mo:_P3iXUnBU&&o#e`P40;'Uiqa')mW]<UZ
%N+M!#H+CbuJ]YS9(6mmQiE9GPlj/kZ8#<GoI9u>qXAuP/<+o.\YX3<WJhagkXt5[]?t=9^Z]!%f,A*71!/<<$/m.\`"EY-.mm%/7
%=bl>kqI%IhnPTebZcNr)+;7Ub+pC+7'Oj#&TXB#)"0JskcKZ-3=B'I)okC#37<eKH@i(#K4J8;Y`))g/8La5#\GM>+d)dR7n[TB?
%QTDmD'Bs(n1jrDpZ*@[rTGW;ZNAW;N?H@.R1GJ"%l7U_H5mM4JB>?XVLBTR7]N=O3,s-0'nBu9VN^/qM1hN$"N57V3gY+JmNS?tp
%P;-<n>#1$naCFleoJ<=s)L(/52K,L]6;3>K._8$nVmKr'G>2E9dGh"L,tU*.8MuC0.e=coFO)#p$Q7-a"o!D3h0("VOm/E"aFQ'=
%m\-]c"!02gVJ9CLN7)sn<1aN_$7\7&kNT&5/?r\9Vi**sl);DJM+Yasi&7?cY!!/=hgrhifOVT;lZU9ZSAC+Q_gK<<\FuCo-I)Fi
%Je4MsU5T<>6i>t!:CCS$.^gA@5k#7;Ad5Eu:eU@?'hqJ8"^B;gb0(4m!E`4Aj'u3De1<'eoG5d9[<;XmVnD_Peih'HAOu#fcq=q]
%11DiK-B3$(D-sX_idrqXP@P4X,+LkR]5HjVo(d!N2T8RSQB`;NEbEk$n/CYW)G6XRb8//ZeJ5TV)IBg5-SGY,^X^>F5:U^dJq0RY
%ZGMGB>U[BQGi`(]'!9k'FAa#R9?)aK?d/#:jJM^b<o]sW(b"(c@M.*baqLt),%eO5+EUTS"u.rC=jY6eJ=P!<8POkq+hMfr*/cOo
%c4\D.k`X;83H7A+_Y:nrR/)n6HDm:B^Fl"t-'A]<3B#o9brZlT/Se$V'8[*OUM50(c:3^C./fKl5qjP]&nPsLZ]8*&dj?tI*5MGH
%i"C"F']"D!TKnK@f=fc-/QA,`XqeB"89tbl-s6jDW^*kf)2,#5*iHDZ+-/3(9^;CTj\kZEC>:FfjA#qm.W/.^SE!O-(+&g3g#1($
%+4j*P`q6k!^3!T0;3;o>Kqr=^e6j?Fop2D*.BBOUOEIhUP9g[8W'uHfU3[iP1qaGP>@6e\<>?d;qpWfl9SCnh*9<PO>&QN;A3k,L
%>?*9c!JH,&id#ViY4oA>>t53#VeBlsd3q1ubp^LPOlN/+qd:tCUd_%8:A,]mm0XYm6<5Jl<q[$P:/h4HPk=[g>Kps+MfD+X=1e#>
%,"Epi?BP_Uo6@f;7C4GA2'^t$b!lAm-3[Gtg(A.sRHU3a@a1!?H)u$X`UK(+*6B1@6m^$/7WOUC_73/m=!]#cVrsJ;oos/f$6/eb
%:=@*CUm^D_.J,=dU(N8+ZR6Z>Z/G/KXp&&ICX&:P-8u?JY](+D,icZD=WEa3Wb6-'YRffZEo`=JY?NbNjVem:<WY+]WQK\L`ISZ*
%lE6ko.Hr"CVm;fE(H'.nB.Z=/<i`Kug`q)j:it,;M3!g-KJ<j#7kVdk'@$F!7H)kVlO7Q#BHhJ"\7dIHfmp&MR*9f%jI7n/\0Te7
%;LDD'8^Ft*,_NHR2BqPLR3>nI=H.O1OJPeHJPNggGZTl=dl3.W%t\O].oe@j<utJG=[THKn-ESXglrkK(-CGY^r<\?NaTbtq]1kN
%ogbI)4On*i"iGkEP%fji35\[n`NXckclADs@2=ZH>p<dZWnNe!4F1tH6hRGgPt(nb*\HT+@Z[>]CI/V33Kd=U/Oq=KnR>inU5NMa
%MQ4K.\25[Pot!GYiC]h$a+@`7']M9go"-t,G1pRp[1>%1'NR%p(P]dVJUfjSJ3?D>jsT6la+_ZN#b1YfasELY#bGL>CUKJ62g[.`
%So86bL+\$d#`F"H8XMP9\19[sJSSq*C(HLA<gQU%Hq&/fJh`%t?1EJiG]?P=CF>D0()DN(=TT![A*s+Uqn-Q1Q*5U`^$)-K3H^:[
%.%TNe2=:qc(ZnG(Id6L`N,gE$'f:TPm1t0Ont[WR;+Og.Tf8f`op:l71gA>6"Ik1RU1p@oeuT_ri`PTC>c7I0RGK>O2%?pWHd:*K
%bV`aHHQQgVe."mXB2i5,*G3g]3h;mpoD2F58;u2W0e9=o[+N2m`/No5p+T',:c%RbgRtp_A!:u5!E"5;-eU\*[_/&lNE:"AhMPX2
%@fb)V0EGq-/HrQ$(qb$t8."6B<MR,F`=UJVZtS!4Z(QH<977b2Ui'RC8VE8r9[jf7h-`2f"l:Ub(o<"b3@4IA6BFjae3V]Z>eqGV
%VA=GU#=l+FMHu%$]Bp::U)9s-ik#r)lJ(E.07BN0f<ddKKDP;bE3"\/lGQUfj.,S/FTAB03a@Xo"6(N'rC.)$eq4[1@bM!]?p%3[
%U=(Se[TmCtSp#fh\u$n'!Y5&BZ"hK\04ud)rJ?\OF-0EF#8AE%CL^d7?d::@qCrMtXmeg%C`b6JXNieIP%A0`QCb/Hn\2M4Z8%SY
%+Y&2-EYc2V`[V3UQ"eq=@%>H^%Y]H\(.j=ZWN*\RZ;At;1:!9N?Z;j3H#<mcX=,H=DHdEP<`Fl7F]g"bZPoSAf#`M1$\6@IFM3!k
%,'E(SiD+Ge%=[BBoH:p__t[4Aj6F$!OSjC\0GR*(OCqDn7sYI'\hC:lCJ7HJ'PgP%A^t);6SX"`eNMGtVu2/1'GQ2995V'/TYWpm
%03N+Bh%+rBQP:!)=l%PQHW;ZtaGW"$N?r)(oT[s/dlXhAf!YWC9^$@<@s_#DY`R*ORa>>?!s_4+-:5=P>_8jR0b^$2b[CV^dSi`,
%cAi)"CL:K>VPUD;*AoD<B#EU;G*/!>*21ct]Tl;'g);f+IpK&DKrULD]kfiCamM/i\H#e/a]2+ZI^3MgcD`.EmA'a$S=%5rX.hdp
%"BB+TM\Y%KG#!9Q$faZ[&&[Op`gWM.TcC_!0?!R;e*<pJX\c=."l'5VoQh7O(udD+2QuAU*O=lg+d<Fh)>m&=8#f$u6<s0>!%YbR
%a0(e^g&-(C1!<;00N_GAVmR?tUU0=e=u>E0/oSo72jl!GhSdI!`'SbX6]gq0S[J@RU<t_2?2iO4HT*lU[^)CJ785ZE6.Z1#Q^m:W
%=A"_\Tf&H-4VXXV[Qk%0F\*tr6i`Ut1+Z/C_<6s17cD\%c_Kt6I>*"M7(!`BFA$Vj<$l1C;@GMjRA>a3lcknE4R47g1cWEgB:3_B
%MQl=MVX3c^FIJB>0AmrLXPtR.>/\P.8''.K^T(5F8$Dhg(nuj5W[lmPC&\R)BB-#SHXmaaC15D8,b\:J1&ag[/5*ET;d3DI2RbmP
%*h3m]BGdL>l(5m-&8LE<SE`XG'!@)>P^a4f5'"OBTJtm8=q]K0TN,TD6=#kSH0'h1\-[J#b$S3G7.BGu1TtnM#%?)Bkg&*iXH\Yl
%_$u]LP)?_(&UZ(gZ)!Wb[hQ5)0b]`%#,,R9[Y62d+NR0>`lcP(B"_Z[>UmCl'X.rKm*!9[J#p$:n4"[liV6,#eG7Lj[Po43MM9fU
%JVP"6]H^%pM%*H#k"MbK.)dr8SFQRob6fK^cc'sn7%[)V:<led8XB:VrHI12Vj-8]lHDd.O2L-i\n=VQWprdRU\"lTE[*9;W>L;7
%na_7&O*;@%oW5<Z;g$cIa[N.O;,[6gW(od/:Bp:Dq*@r-923^m)'teYcL1#,.'*./1HEa,OF.2rTiqsq$"=WVAH*BDiS`p"r`W/8
%(M7P1eU@lA#hk2<mOZ9W)oUCl(!$K4\l_XdY?0mqn$7AHWf;("lLZ>J[ejR(_fi%tLtd/rI\Cck:(*p>l\/s8:C=_eQ0448HWY5.
%Rn]0Bh?!)p?<Z;4#^8#U;*3)5L\)VC+*oP$F3\GDBb/A2mC6?JHB?iP1m\"i]Wl<B%8;u+Au+ClU'Wu=Z00aHAt^8ZIYG#U$Qd(B
%>uj>mgO0Gmc%8@m#ae\Q2tFb]5:ZO[=MPh<0OBJh\0(X9]6cb3/bd9E^od9`aX(!H/8,mb[SI^!K`"[6P;Fk4Xo+%lmIskl.!Lir
%m_XX;PD)nP6OR)?C@[N[g:Dj#`OrGR.M5:Ce=VbRm4;4=TtVieU2_l(U'[IFgg`993T)^Y??NSd(RYPp5cf2KGRL](Oa=@A5Jt*g
%IWC1+/<Pr#Q"rrtBAG"'+n;@3pHNUq6[?JU(U-R_.oheDC9;h>f$s@D8PuO0.J6H:+9g!mX&j0d_a="/0N"[N7(W>-HI:&4='SdG
%W>AWek@dn0-=+<**9%^=-E4"$0ndti@CJ_JVF3H-*<;sj;t7,hKSL[qMi;n`qlh,@NDZ/.YtD],2/A@jnqrMq']a;:kd9K-E\1pD
%\'k[/,5p&mnmj(u,#0CNb9eE@98#l;;+3u9T>J*hT3FZVT&^]G+>0#bZP9?BPmYZ!K,Vl>//c&G=?.u=Zn)3VX<Cp+\X0p/,83'j
%A)bJ1W6=6<G0SX;7R+U6"p5TWmW!F:O<27]$g:WA.I\mF?[0:LZ6#lQVeMgR=Ka[#P'%smULC&)VchfqcU'N$>A=MKDBDL1cqBh!
%B2Mu@+sY:k*1Ne7@aWoNWq]J6^V=C<F=tVOfX13eZG([lJuPTlK:eZ)kh5[6;@c',WTI4ae.c`@$YH@1+GHTeNK.![c'QgMR3>8$
%?E>Jsc@]?cCX<0I"F4W6J4Lo*HL`T3*aZCW.O3I";shC]?*;>9LT-)%C9348EPd\,'dOH&OA`hg2Eo:u.\[mI:0`X9(E>`^mEc,3
%OdnDlC(Xo8$+`d=qPGYtaR#`V/#OtQ(_hPZeZ1faSSundVg'03,c&>$96s?0l&4q'"kN(2>Jrj>CRTr-q^7KYK%UcBiC.1u>c:od
%1qO>OAAeEi7li*]S3ZK+VjI9CF69]+Ap=B5B$'\D6F`j<b+cUF[^''.ln%Xg$/);WJ^tMK/N0^Ed59]R\QkT;^#1Ce`KDTK@p^,S
%F\I>IK3^#/qoSK=JYGRh;*6K_lWKe:Yhg)VA5W#-ph.^59pk-L1J]a,2J#WV^4W<Z!R/hgJcZeiTrr1hO,Vn]3q6s@c\`9-]F"6L
%'H&*s>KTE=VQKS:NA[o.HI1Dok6*4c/U:A)jX;%jU55+SM-%%-Cs;uN98OS*HP8Lt7jcnCaeL1P/)_XZ"D9\S)gYhqlemKr,q#`8
%R5\:Dc<[b11bB)%]5jI<^a,7GrLGVu@C'\)U]J"p$faa8mf:)G&hXsGMW@Nbjl/;_TI:aPL)N4uP5Qc!@ucj;0Q-utOYPj8icG::
%b`\u,^tQ:\:+>3/>"rp[]eJDWA<7MM2+5CGeE3[pf2j=,9;Uph[)`keZWj#-$4F`+]Y@\7E@0c#Oogc@l%q+!/.$`/.sI_Y@$imV
%(6BjVA(lR,n7nQsaj"OcdlK_0dTF3=6KV\O_)%#QZp+l%GRguO%gEnB<CMY"-G51[SF-l"`?0OVPHnDcdW61b!KWM?nQ!J;Fc)[S
%]q+X+W/@Ye/,qo0gpB8._%/e;oE@geQs=K.^S71mCp%1]%&9[GM,<@KE.<J9BdK"VLhUb/5,>G0R11@EZ6"TdQ1]Ti!5:8j;`,W9
%i:Yjt).QIKgqli0S$%iEkWuH'dnH#6b][P\#ULjpgot+:d,mVO*\b3r>&ABAbI]*$`S[K\7oS>!]uY3%)'KD,\m'a=-7W3^rF8Z/
%6*O1tnHpEedgUECWO/C4n(&4H&7'J#$gKVp[V<*Rc8C3?;u<`C-n46>2`Lu;.LNXU1!$0[<Olm6m8EtTZB]#_[[0FM<N)2T8^L@<
%3:T(/[ZV/68WEf<.VcZZA4amX-a2d7a_lg'l1\_U1(ZKdcdNM7$'U9))=e)G@6Ud:cR*&F.2aU0?Z,pVr\3\4(sRfYea3!#N=<I=
%d;!EuN_Ym?K9ju=_oISE9#e_,LE8,p)JdrOGG)YVZrT*uoMhs4+8`%`AZ:VYc.id/cNtXqiuARAZCcdXJ=2jiRW2*0SJ]:%`Z*B"
%Qr6i'j2S]Cb2pL@EVfB.RmQ"j7/LkHN<3//bpN^cACX7TR(#WCmJ=&%%si*Zm+OJG)CGbZo*,)5\m4O@")Kc.bWq"*!H:,)0!MFs
%0=cc3GD3QLq!E,A6hgn'/Bm'p-g2;rf*S?VkJCaF.c=rH0kTY:qJ,dEZDKr&Fe`;4@gUjJFprL%^+S;b^3-jFWO=ophsiHo:8(4D
%9rkC]M3(r0II%/@XOjD1lU4km=LDSZAkS.-bi:7TD6^6c5uaXmWLooph/,m4K#-O@6;73tE],>f`_^!sKC:kT'pUWodUm&W.2FD5
%?CTMV2QWLiqTdk#j`bARVTb5EZ;&u$3,q[T_9[]P!aW!]_.M'H72VTlFL6j<=Ofet"Z-m8JJ%u^_:#3oTgtJmer0[69q]`o0@q3%
%i\Y9.U]BsPjYKG8e4\X8Nr%i5nV]2!X$^bl]WkO]_qQGs)nfE^Kn;hE3SDZ':aAnXlReefFhNZ6_#!'B`!lGe`Nu2^??*2SJ&m6G
%-mr5Rf(:ttgI+]fhp[iAJJ6FS%#8<&;926=eo+BDfL=B69/Tjq3hnr\@ngP-(;)'Pb1:d>+2Dt2Zq`bVWBCl7bnAP&$8BB)BinNN
%#E>:C"0/:l0Pg`%BnJstPls.WK(C5]ekB/aj@&F<UqEJ-Yc=Lq#<J?M#>.T'X\W@W((+k,7I-H*rsBYoJLSf]!P_8Z@[f3!YY>5$
%]$-=cFO.E(f#(rqCH?=<Z;tld7hBjg-m883Y6W**l7A0u[%EaQ,q2j*G:W;Pad0WPXM(]oI>\D3ZC^$D:1-3faWG^2*F8k<8Hr3h
%W$1Ye;,acS^`AJUAjP1`WNB,Tg[[I<]%6K4nk]V]<.!!gSp@"8U,)>]1q<shBQDAWf)S&+X">SjRaK,5K0ic.Jd_LVE!fdj;6j**
%_EDn^Zti*&=K.Yjbf*BSiai.GS]kUYVs)SFP*KJj\[:UY/dY7*[O;t=]-eW9Z6FnV(`IQ"Bam^'e5![ue@S6i,q/T8Ec4cdU2Ma#
%!,>fd4T#]VP2!P+X@dgpmf6Y]>*@g77Figr01n%#)Kh?tj-F4',t9N4nkC*rajrfdRbL,pqc5VL-/=L]dS-5ao1Bm.(;dLt2-B`'
%hsSa/%1>N3Q+U@hgjn6=-(fk1iZlJiKEh+]S3GGI'"hC3l,&[k#RtF5KJ+Da)s<di5JNW\XoR/=RNP#5]hl86T!]:E.lF`bPfsh<
%+WSNHe'P`baHO.TEZ5.S%p.:fPW@SBK,G`o`&o@*6aGZ^9B@@6C)ok[,HT'?!h`B$>)*KQ*PJ*Zdq-@OhgaYU1)L&%B+Q93&dV&\
%&A:YEiEX-/6Ej/F7k(Pn[0NhS$PjHbamOQh<XB+@7Z#49Z=g5r#`0.$'?0mf2b(8Zd:a6\3CKoB$0tlGLmlYGYmDdYa9tO;X<tS=
%&*rs^<Zjn$O7p7$Pps".Z.[^fN6#E6PL$`l)&UC)oP\(a>,YPcF"N/7o!/;].uFID),;%j;R@DRja9dM%aH&S@(_5WWfMgf#sU',
%/,Ni'RHXikVf9I3><)#u:"CeF(-Z>UdqglC18e5k#Lo75=9M\!q]4G38AS\J$`>I[W8(C<LZ1-8TLNKWdo9O$EE=F,KnUmOJY3Fi
%.\I5mK-1B1@=VPm$QnF.fT);,CEd9L^nM9B.O&.R&4FAPn"M+B8$UEt^PpSgQf^ZAIGc`C-5_R_.pI$]0Lj^5hW;oc`\uEjW_9t\
%#W+ULE/g9e^2Gd#UV.g%KGe^`mq9p>;,f5QTZq)g0!1B$A_*4R-%[<Cm.c-\js./d_C+3=:H[WFq7V7.M%VFf.b+$':6\f%$Y$HY
%4`nSS$*tt#^RoWTWVW8IF.Gs;`pLmhS-^fRdD3=-;C*Q:KPBL(p#fZ%F18Q2XX212g!kt32_epIL#5KYC7XH%!nk0mo1NMfis5FQ
%YFDVR-Sj'FK`t/&<r6Ue5+iK5;f,Db!T`*Ql.Z7bEk$m8Pu<fGG(0pAAi^`LYgirRPRE\E/$60MBa(h!*e:t8cr2fTh-F]>TJNqj
%FBd:b0$,OQah9DkB6`9<e7EmMC\U^<l1aWak2hQ.k]X7i&]u+dCJNh5_ZMbmT*af#9"7^.QAnLJhkUnML'B%uNqe=Xo[^BV"RjQU
%X:s)>48Y9+3GI8JbEcah.3UZ!9HaFPbckR.'QAJ?#`GR=7ZDBS79GnlV#$nPq9e4R5*2;.87]tb?1:VYb*KrKBUafE-;E"9PD&;Z
%%'Q'@b%VRbQKCN/D/(@$bH1sO6VspUFa>1SauMkp6]:\QjE-PHkA"fJ@Iih$ZW4l21^4KrcAWke3WhcHg=K`SWV^Tg?Z<4?$^E7=
%I'CK%4B[d^_X:kQRph#R6=YT3&+drTBO2(OTDS-9$ejIeZo1lue[VQ<XHf?PQf]<B!@%?rQAa=@r>[J_=@:hOh>Y2AnB)klKNQJ!
%I=k[N#b25D>@=,QQeFf%g4QNdDRVI$S[9I+NT#!T5gAe?.84FtaC:'ZerMIm=(-gk@`9%Gn8D`61p3-%-70^\FbSZ]#%Ot9r&#t:
%=OmK1ZD__!MCT("3A#)jZV%PpP-S2.E<.MU,\IId"?,5;1tbJ=[6KDVZiL9'.)&@&<`P,HTYE;YW#Fc<kDT?"_qc:cT18@41.0LB
%VpUaLM'3'GQ)'Ku7Ts'h3l+=0W*diT,^#G?;E^];K9NA=)C$`%6^U8-F8o.kVlbZ;2"a<eC\HXpS\]ZDgCsu,,NOGsMANY4*_e[<
%TG]>;pQN,lNO.3)#5u4N==+-1559GB20,O]2P(RT0.\AL1d";KnfkG?&=nhO6JbTf7`fie#RX1oj<Zj1E"$gUqXWe0XdE;>.'T(G
%a4buWW$k2A7'3QQ=&actjQ11'irEGK@0@J%aJH0sj:V*?2o(lZ0Q(H6!:LGD/HA^WqS6N+.ur%#<EL,pd%6HZL7A6A9ciD^.W?.H
%$^It>=tR\l'43AER>3FQ\p3M6=fC`)>$I>g.VIeNhWoGNe/PK@kPUhXQ"r:Rk>Y_&WX7sMBFk2DF#"Lh=PQJN*^#^#*$)VS3]MjS
%]VZG8@-\.8GX9TLgbVS)SQ.5`#[L[gq=jck21S"7@HcE*.&dp%b;W]H*)tos4k/]hC'#m+Q!`Glj7*6McfJeUlWuOfm-QVM+Bs_"
%WKoc6'Fq_laeM29]X6oX[+[F//Ng6e$DlkubR.<6d4m?YD`_b:rp:6LhPOkZ=,:)hH(f7E[0A:Z6igLu#fIJS!CA$kY*0[(AVC_;
%dIKV-[Y01qY-k?U)<@EZe^fm\V+/2G5?>=8>=?(-Ue[?u^0,3)>#nTqU,',EQBmJn(GR/kKe4lUE(WRKOqs.Bcn<\6!=?8m*n$5&
%S2j0ZA>*73dQCWd.--S"=a5'm[).p'37BJEeWl&..'Ok?<@9s9r*,(KSM[=n)kc>`Y&\H@%HM,X>>nB-MldG^9NU0A\c(BS"g%g/
%(A3!;XT#:a-pp^2+o[oVg:FM?j#'JeKl4%O3D.+$%%ILi+Ip/-.,:11iHtrTWRdeE@(BZO;+n>o"(N-N&'?&LUEJi:(X'St:(1Oh
%e.uSDgD3ULBUO`fgN;G1"fhBeibA^]@'_[?CSkUWp7+nT!rmeJ:<05W:2N.5'V)cM9kVBEk,I+8AHW.5ZTC(UgcPa5c"Y]f!sNs=
%KXTAG8s7baO',:974@6N_2>;J,_$8nQ,#QTA17rHg$mX?<%K1/%)K\K3sXn+k],!@IW@#_JMTkeh$[YqOB=?dWudXRN;)m:C[9AM
%hibh5oXMhVeWf:)KoJm`ZC)kS(*43$..gnHI7d)ZV`K?W[&hCkN!r1[XB:jKe%EhOF8+g>6k7"'&#_ZgL1RJ_l!E<fgdFj#hK2q)
%$Z`g[j8^RYS9uOhfK`Y53H(g);i-HK'm+X-45keBe7[K<B"0DXff(3..r8n-^9Cu]_6\&cdF^/6R4STQnGq#!iit)fW2G3Dr!d)C
%Gc6es[;(EbC#u,+VTHi<4]t^<>S<!PmZA/?L/>2SM,R8n>?q^\ZL"Z*B-aPS9j5qtJVA@\A#i'N)<.A?Pj]O);"dfk,pT)6XT14*
%,ZhijJ'`-gqeuMY]J,&.2>XC?[hc+$.Tt>/MgAImG#0uoYnBQAl3qh$f>g$rDSK1?U1LugiDqQP="r\el8^<'n3,IU%#RMpT]\<_
%*d3:j1;qooEtXcp9f"%b@jObaKu:c*RY?(s@_;l>D2&\rVR(pFPm+emDa@%[SY.9ecq)I"N#D#DH('^Y6+q7@-+fUs>YP''q0"@B
%apaTbo:SPAaQkN$UC19'ga7M_Yk6<@TtO]#/IDt(dhnX8>53O]pN]pcL1qGN\G(G:X$&TH9rZR^ltOES$&k].(8p9r$&D_/^h3Il
%=KH4j0+:=KcmHPV0[bmX&ZcqX)GE8-gc7@)1WZWNL:eq[,TRcC&+jB#hgleXA>r+Z\hJEY]?qs^G=*d4912Y#_2UX:3YPRJ^=44r
%e4LKR7(3rgdt3_\0s#`ZFhP:gJ5ppHi!,a9Ed1%W:r6?e.5ES96pK*QbW+#"dE$$)VE6'Cmf^&CjI.523>Q2s.[9DLY4m8u[RAVZ
%Fk&A/dub;SZ2C2[>@E5;lB<;NRcW>2jVYrO\ud1[U2K_BmaI)G_)p>s-I9r9$BpA0?Hi>-<cS:NdP5N^&+ZmB4>_Drs14EL`5DZY
%:7(0M+lMkL>W\"4b:W99POI<o#fQ6u*T0iEbOXiue_?'_L(6Ui[UJ3XITl]_DS._W=c)VZXt8Fq4,%h#2j>.t0ig9@01p=]M=8L9
%T##G]BlIMpk2+[C,.mQcSiKTm,bOL9q:`_ud2m>[HnR'DU7J$8,>/?\O=M2UZ96EM!=kGI"8Le\P6$$D;:Z,uT!ckb,qdn4\0]`h
%'lWMeWN&W`T%/7eN/1u-=&!$82hcoSUb06M#C;sPc/qftjVFj0OaBoGhB;5J;2VBulWmj&o=uIp[9tU.I].r6\D.V3'%Aa16.>E9
%N:>I(T/=q89*,@DL!#*nA?%Btc4$Bh,?YnnB3JDMNb_@qiG;fb_5UHOUf4X"?M:a2,Z##!),(IDPe'JJPCY$^!q'TmlOL&)fo,=4
%h0a2b/8-l:!sS6^jVkEs$Vgm?L>iW;,mip'5O0Q^F_-W\]t(`T]RiYaV#5H_%$kDB3&_C<Z[o#9Fa3C2Qsc="6B?5^E\0tiW#LE/
%6?J2s!1e^*6%qmg?k2hAc@Ak)OdiEF'?SM'GK+lN\1<lGe$c4ET]C),)AM/e'43AE\Mrn6(o_l$,%3#H&iOl@_uZ\^-B1Mk0B;$C
%3V9$&W^irJbX,c\TjHe*$X,,TYbO4pbOn\(jr7@5@p4+Yp\USDmRAOk<hlh0-&j5Z'3Lk\?B`m6]B))8ip>fK/$BSM,Tje')]\q[
%.]1J,0hdK5T7`7q/#NqaW*HSOMV\)OP]j=J>nj&r_@hDg$Tnfm;HR9#G+F?/#b+HT(2#>rnccB-EWOZ>`[cidj@ZN;`Dm.]@?Vk1
%am;<gc-ho:5o(rG>-W;k=uliNDVd_Zh(AAllLdL]2-R35&<D2`Ko\!s9QQui4F27U=Nl6R62+bHj4T;9&5&)os$H6IQ17:RA_h,B
%kUTW8p5tCg/#O<0rr,NWMo=;6BOb,beo1pX(!Y+s&.4RgH@ZCN8S]NGX04P$Z<Snu*9gKRL"lOrHXiG\bLQtR!Rfsb88NDtdN?>,
%[F.GF)BIb@8mPXJLdB?j*:/C-p/pF?[8h:"0at8LF[6;]pW']N>6Y+qf8HPuk7(!Z$_k8hlmt"c4.Yf`:nLQS((YrNI\OpC4YP$X
%MB.'54[^p%WSUJH8=5<YS#qJ%1!HsJg-&8C0X;(M>NAkK\009THITG_9Fo,7NQcD@;L8u-YP#8ZbN5/e?jF\Z_aF:5)+!?E$4^rY
%9\4)H:Qdf_pZ?Km#j;$*.A@&.T$Nr!V^P_"C-_QN=6d>*9SA!Ei3droKQ8^`CqfW^=$b^qQ;m'*c?3M'VsEhq41F/t<F8QN-O@=9
%-ujKd6YY1UJcI.8X.ZcKp^#;[O&`pP5/>Z*\SC!:7&D^J3N'!^l0s@bfD3Yr5O"XJJ%GISmiMH!5CEB3qpWkEhgBJ9rq>Y2:[[YZ
%2jY`eAGbf]E``8!D_<\=0",[V,i/t*Gj\?lE1;nc;"OSQ55<6Hr5!:krU]pTnSeFgrq)gMp>%'452Z;.5MYDGpr2^:)D=.q$Xd4u
%iE%#^P]VR-+6H+&8s:\ghN\Vr`c]5?]DXi;?i.CPYeCtS1\r"nZYk<`R03Hi3B)59XNV/#NC9k*bm)g#O#eB\+fE'Mr<]KspcT7k
%C#gU@j4V.S3AKC17=Kn;N=@q7:*ohZ%T"6$Bd'X82ia]!pb3Rl3Jr5XjMk0/2M?pk!N:#!,0_@&UVe*EQ(O>4K^jd:;4ShMT95'e
%KO`hGV,j<GmC8r06D7+!+dGKgEXsR+nfgk/a>ejD6h")h;eZZ]@=SMQ67[eb``/$fEai7=*meWb!WYP2%g&]P"Q%!Z6R)m#'nj+P
%,T/.1^f2MOO#WQk[9BEq&.0L$o(sTN,m)2D@F_2/'m`h/L@RL-0Sd`d0um/ST\r9UYD]t;(jsak2A%^j1^SrkUM%DQXD.A^$jVpd
%;+e\8hhd"=A::lU7qtWW:tA!Fj-\mRVPZL!]M?<P.mR9!m=Ei?p#$Df-+Tr;-OD4:BF#=qN.f+ElRWI<PhEtLefo>0E>4o^6H>?G
%r6;n7DrGqeD)HUb@rMipcbaZOG7d<4LW6F\/Au+MohZ:'e)9:@VkoSrg5N.fFlfs27p.+Oo4YZ>!p*-FjOlCr]S0\FUSoeZ%lkDB
%WP$k/-Z&5p7pTE_*^%?kP)srZ8Ji%U,2r#5ZAp)e2-E=2HsrHK,%N+U6`Rf"E2QJnfF)eboMBemcof7:q/M)%f_>QRj%[BI]I?uq
%@(;OE.T_u,![c6N\h/U?(/SsJRuCe"8E1`OTSK<J\J-8KKCTI[jQfGO%f;'o%@h*!_I;#rINi6d/rbMW&/ak-*Z'HP$f?UA<cbK`
%JXA1,1=\W+D;:'9DRsSE3NoM@&GfPM5l<8\<t,DcR3&/D856jr%oJ"%1M85\2d0(W\?)djJ7)Z8]L?\n9+MN`%OnQc[T#b*SUa4e
%j?pm&Bq2L:>@kd-JViB]agLdu/@WK"1AKG]L%Y1WC2(fCYKXKtoDFolJnQ_(=hY"iB3#/+/+e(CaI*\%>b*C.:Q!Med@#]j2sGlf
%7p:2@\K\m?L^gaK_XVLpO7L.>g.C61lfhH[U6FIX'`F2VH[UYhGj2VF$O"=W6CXD`SBaG'*'fe/`3'(`i!7@H@4HLBehGMs$]012
%HAK4,q$Vo/UbT^QYYYf@gdnlHLR?Ea/TEl)S&fC*;]ilpA#R0S<+4g>*'tb-lljF7=e:N:dQ%"E4UeI44a>`iM9m':41dK_[*msY
%3)/nqJ>uV5/G!OA\iq8(dY].[OIRM/FP8F@#^&f(U9'tB++k$TEj=l.dT"]U<]Y3GNaX5F^_f-@MhoA'kZQAdXX:hGH9#bsKShuJ
%?2)dbpgSl/c&nS.Eq0'*<s.F\P!%<sNE'QKG)YfA9)S;/_pD.mp(6<?7n*q<,$I$)bR=]Hj<]E40ks9^=8!F%AP&ILlSmlTUb7NQ
%Mrd4G$9XA?HAQd4#NQQ&:#`02G,<>c0V&\*O^\8\%tr$q;V)S9Tigd2AM=Fq^%J2*?(p_V3EaFH7<ZXLHI30UCr3c!Qm%S9o<Sd:
%77n)IpERcf.a(qmo2,52o:-K<4frEZ5&>.9A4+qZ4:]:$+q.$$;Z2bX#h=@'qLpU[GRJfJo+:V)qoYso)WuXLDUN(H"'L>j1NhCZ
%kM5[&5SYA.#T[&JR#:PZKiTa;ND.aRBPgoL,NP=o&YYor*_FX_`*CJT_Vp!c$Stci#qH@g=:YiC@J8%\DkSYB'dW-'KR6&H5cKL=
%MC2=qpDfFYcPCcJk[#mbR9d`Nks-QR1IY]VGRPVU#$E"OX2G<2%uJ#sT3J-ZS%?BeNU_oFO!QCOPHMt::7*MlU\kE(h6MN^,.I)[
%EP+n_-F4ZA!!l)$JOAc^d'pr,1OV&YhVm1GhP((.bL9V\$%N!XY))bo!<PX'<>emgC4VLc-/YH_gI7s;,qVbkq1(6-0bF""RE,ts
%3_@#kL<phfe0lAm9RB=iG]LX@(`;[9oLtq%=*ok1'g*"oW@2L-i(Npb5"d3a&;i+p-E$I*8e2%W:Qm,1Ac+O6.[<j&kTH]>j$c:2
%>,l59P>m$XS<NOO.1;NXd26JAiZ9(HZOJ&m(O-r&BbcLL7%L]BYY1\7JdWUA^Dk&0Q/tA8R9Y>jJBeR#b_-aK%&CgT-AhFtNkr_t
%J]t;ECGMgr!O2JoC)sJtH20mnZ]S*`iT?NB:H!f`!E]7?0q_,VH=[q8e]ETAN:7uYS3Y;?e<j4g=VW/2FQQHaMu5*tO9087MFiqb
%Wj#[F^QM#0@t;fil\*@Dk]j-?#:MYr:k?8M0MeC@Dq"S=PN2P_MA!8%_A01U"r:HVTsN.d`HK%PUC3mf21b\F?^'FCS``d%Al28V
%8U(Z#mrc-qPds8l$:&3gN>rrV<^:`PCs=.-?M7c<&kkB2M.W=>b]1d<IuKtQh:n>f<?'F>fn;#$GGdu\"m?b)f6>?PXFsd)6uO5F
%`'^ArJi<ih+d.5s=<f\-iJd8g#munlSjlF?XeP$Hop@*MKB=QH\\KP?/OH9WE@l30.sQ>SD0e&(Z!D/)Y:WKcq:4LiW[+8m&6O^l
%1TUhu@l#]co][2SK6AtT@\U+m#*YMCeajWP"upSdU"f`,L9Y8.bK7)$Ts%ug6RtSC(tl;gKZV5aZ!j[.A>*g))?YP]dd!Z"%46kS
%keaAWiSoRS!O\AQ2hg:L?O1("d;HqJ22AFd-p:d+]Lp:,j>#R2WmZK@L]F0KDNVq>7n(j4U>mb9p9Nf=SY9C@na>skMHOd9.TY[A
%?.G,@Lrmfp52Oe!rLa6X<n>@7&JtH-M\9J`WteG'Ct'*1^Zm#lme-5OJ1C/EG;$*I3lYCeiZJD"gSQlX1DrR.o76Bn71W"9E^`$0
%@i)Te6n;DN0O[da-7V27n>\P0]lB>t[3JHb6I9e8]@\MP:]6\)Vs)!Z,@o#U*'%#ioO;\&jPY\'ItgN)X$.Sh,IDBFCQ[3VB&(jo
%="2:%'4AH[9gND)cBm7;B_V$Va'gS]-R/dHS(@F7&*#@=H1;m!IAs,LCYTb2]13l/V0T%gp4.^**>iZi:\CO.CpR(i3E..BM%E#L
%S$;,R`oX:^r-!nk`km^jaW3qVK((nl#t%]eABAIdGsXEbngJNd/#gm0A(ckRnc>=.H>H6JnJSLQP_H*a@0-d^O\kD",d!tU,uJP\
%V1MYV1iQsQXAm'mWdYs6dZBP]7r:!-HDuM%`mY2hQ9I]6`$l<kKU,4QSJb/]^QMi2$4sd\_Tl@+L(9r7Q0@NgDWq2a(n'QKGPUZe
%2]W4Da5N=j>"7^E1W'MTK"`-`N4^S`qk69ijR]);_RKIhZjIq=O0.,)cDDZiH^,X#7`@^IeI_Fg1_gHWUB_*r+kMrG2Y=MX<itOp
%#K!DY'4t<U',UgHm/>975H1,=@/O0/H\nF]T>Q(2Q\_f+Bpism&US)lMhXqUK_n1C(GL#j"_6LjEGPgR^N(]S0beq=VJFO.%S\Pi
%9*/XE[u6\MR%Vs]nO3^Z%RhBfK.cb"FFddHD'%/JM8ln]<p5+<Zt+Ir*G@J&XUNNdA#hKm?<bh[![dQun.nU.T8YS(Zd9\\XB,fu
%HrA*,6Z?R0!A$4Rj5??PV[&hcj6In"b0%%GIhc1OM1a6,2Wb8U(3&2&%]Ca_-aM+h[1:GK/(6AWfk%FXpoGfl4As*/$u1I,2\(2Q
%"6hB;]9Ou/;MbBE)S<jf/X<VdRg>KOM497H+^BVuSVp,9EK74_i&C.25Z5=AEo75BYqe5b%!Nhq7].1*N[0M=a=Z^/oUYFQ)r@1Q
%,N'f7bsGh\?9Da,(QB$K3=(Rgn[t@EO2/Je1[Ge)o12J[c&jWe)cC*d>VVPt'EVcp.i-9$XEQ1FL4UE#<$4RJ2ES@/=\);%AP*DM
%_5jAuH9%t-/m>C!M^Kg1/LCrQk00++2Nsgm=_UUJJ99g$4V1=/J"U6M()D(s#8RBtU/Z])6,fOFZP/7u8WBb#U@&<SibUal?FD+\
%KgnJU<J5J2ZES>M),)((V`=t@Z6@stK3*lW+ppb*]aI4*TQ^tdc6C@n.ojZ]9A0KgjUure^6bp,4`;IrHdh\RSt&q(H+=B7g#AK7
%3V/HYgES8E2-eOjMSa;`MLLKRC6ch)GQKGgm,2@7b_oHq'-'RK]mp=Wk`n:=F]?:`;jeWCV7A>BQ8o[DL1Id!lOS5#]moBpXdK_@
%%_=*(A%!nN1G1NkIIsfMm4s]Z=?:A;=t=c;QeBk[EeoOu7;5FUc7DY:9*(`mqe4d#j=W&pOp_T-;WLnPVYA_dP@qEDLTD2X'@fUU
%&do#&PD%/D5rVGi[o/W)1+ftj_jD/bR9\.Z.4&]p,n`e`RSu)uegi7PUb+BTd+'5SW)ho<'^\dC'7@.5>A=/@,n'*bOuL)IQ-Dqf
%PB*AQ27\8<(@<De<?@UO7B%(q(XmrW)M-GUpORQFgp-DeU1YcC:4C<\8<=EM<bjPh2?Vp5E\O/+AI/5uTbb/"^PLco\h6T/0A2jd
%?EZ#K6kpHb42fu8!44XjZ>^)NOY3/)@Gr?'oJ#Au=RamZBE$)*A=6B@=aDbD.7<s0?X6rdH#n.SGBWfMkXad!VmQHJ#=&%7opWej
%jn\fD^L+YQcgBuQ#=&%Rj#:&C\!"T"q8qa?]C!l*MjlZ[S"Dn;QQ,qYQRCtZBCB_5Y.m.^Q);=1\iTk)'/nHd0/d0bHSYT5ht3h9
%,P88?+@#^T"&6=e?_!bD4o'_$5PXO/rT0O)[bSoS?dsj[Z/8U=`TR2lI!g#0`T?l8?gmXco';M2D`1+T=/RuiY@!o?7r.PQOl-)r
%r9EG*I.QW@H_I"RMQk+Ua8F&WgXG\^]<cFr2n["?)^Bbc=4Q_2p`$<7#NcDPB:URLGK_--lQ#pHr>R-0\]75=(QMlU:O[c.5=:b_
%Ha`sD4ZhMMq)JB$='tt&Rlm3R*kR0!SMr[YSc8MqJ+B+M4PA1^O,!(`4Ql]^o^I0VcA-E3_rps$]gWFuFU[`QL>X5)[*b,epsDS2
%d;AI%L1\bM/EQLWT>u_A[4%aG,?g:=kMS%[+$-X@p)MskPNrVDWCVH>?Z!R,+)_!HpB4omq/Npb4tNh9Iq1,>_>hH3GQ,5E_-YrG
%J%iVpi$TWFgZ?t0Qh53cIi9R-j/:Y@-h#CMro9oGO+&rMe`IrDRoa5=fB6@R`!O5bOEeu?k]NAuO;C#as'ZDTaeGM1r5"(qD;cDM
%%m*GTRm2?QgNi/Wh/m:U`g\]I02KS<D>s?`T56\0,K1bg[Dl/s0D4u(I!KbH*FFS/j3-'#+8:P?r+c0/p(#:(l>k)]?K1_ZKpg]o
%M[t:-jlrIAqXA]9TA=AWYQ*?[e/s-[IWG:EFZ5i5iBV2b]GJ&ha=*%`0uRE.YDE0-FF^9@e=nmW2T)1Xm#h-kq=u-3D=c<Oc0Q(Y
%&tKeVNrb*#o\G68LeBh=r9=gIoCK$Om"`KBLP(X=;dpXinDHcgE_+TS.A_t$[W,8kR-N,S05n;Rb@R8SU=&j+p9@:BLh=JUKsB#N
%c/6;6rac"U9Lj3s/PAS,.paa"*$8\4j1jfg@70#b\jM7f@Im0@IWGF:]?E-4q4i#O95!lqfFWVSQ?^h5c-u%>o3iJChORb-^(Tre
%:$FWCBTs";p_[R:1-M5,#L*WC(>Rfn`m[-O):#$Br+m@3s#0j9(ERI\,5lbri$lbaPbf(==;9?(]s@8hp)Q3j_p=&No5?it40-'B
%%oF+2p_u7ae(&T"0k4d'N5JR8PJ$P@BS8HqU''2(!I/m;!LcP5WQ@Cuj*d'WX/l\^3mHk&0>BSHI+T(q[53t"*;>Bt#1eo(r\Pr%
%K3ijC(<-7(`q?$aVh&ETEaS_Jer9e</aEh;`'29/b9Lkg(S$7nO$Q41,>e,EGS..6`Y\AjcV'V@8Y>b6G"c0NgaBDpd:K5\@H-op
%<#omJ'q$('b_Q$7:,4H#kZ)tP45W(%Ht7?!\g-]t8uFO2ctP#Ecq!V[i8J@]%!@.*Y^Y\1$Gq#8?/t$`rQXG`OtT<]('-GAR]]J2
%^s:D#86C\1QML;Fp5(hYE*JNGH26fgq*ura/B0rD#2*n,)CrN0Q;:\NO1f\l>s>c5NMKatJ6_3.\],<:=r%8i4)rJ*WdaWkS\BE]
%fBLX>oY*L6TYbHjlc1V?J!A"\`Mb#WhQXlcI?rA,SJN.g9%ob`glra.m(0MCl*Jb)g[2*RjZq;EUMH[-a*R&HN#e^S/5p7U.?ETT
%m(Mq_5K@F4_p?p.-Gp+nMhurMWTk;?!Df;J6m5*SbLl&@]s3.tkV)".SQ"N'2@Vsb;8SBa:.WnPY<V]^UQXt?G<S%]]/p7CCkkEl
%Ni?tS#<i1"Si4;9o2o/0>2E,Dffd^VQpN'YdnF9`,,*K:&^SGeTbY:D$'CRHoGZnKA)?$7@rM73QMlga-+YQ0dT'"CWND/i1M/kl
%SF7uhToO-gi;iT\*"5#ejEl1OqKV/6?u6L/h'iW_UVm8WN9YO^UXDDj908GpZtQASqd7l%VBDP`FDkX#B4E'\Yp<ue]$L!R=+$_I
%(0)Y`k;SO+QG+#%S?fm/>\;ZM(C[[i3b$n>;C0I$&8e%A1\6K^41Z`m8QX^8qAiprB<I3,>A3VhrRs?Z8Ym.;oou)h*pmY.*"u5K
%F"E0Tbk"Z3o\*ei&CDc8'GVCjSnT'Dh8oi3RgsJqdd(]sl[5+;QQ3au0"8&qLXp;f)&pqbkuEi-RqZ#a5N*-8<NiQ;S!JA=0ul!R
%R6R(^AGs$Zp;sOkI3jk_(5jUdZ<_X^$;F1*2s5G5e7bj2Bc26*'[iX/-fdWH8i(RZC7G+o&?V1[eO#(upZ*84H"F&kHH`Sp/"MT4
%*#J5nURgPI5Mb0OXRjBSMe;O6=%@CT+U"8e7/E\_Z26`J_-@%rT:"@g>PBs1<I=aV\56W*i@ds_Cc?Q>)g4ghhoD-dqoLoJKhjlu
%HsilFlq!\E:VN]$?bO52hJ?M(]tNHlS)9gN]7fqPj9$J&jj'gHe+cFQ?iG':`QcNd];I_Tr2U([ilh'T_h[)rFn4\]jS[-FG?]-d
%+!.&eH[g>3e"'k:5CZqLq2`enD#7:T1KbsgOYkY?m(-5j\3mC+`/:_.bVg)>UTMgrm(6OT[.`:ANaou/0eD#El"%tGCgbu"Q13d-
%=&)1#1I9A/kd`9,Tb/7]'N!d\(qQlS3RJfg"K%W_=R1f<oE.8.V<=Nn!rniIE7b5oI#s$&g'=Y1o7=]TPaj-,\h8o?5FUoSgM$4H
%7<gRl4R^s>VM][]H,hXB43jm,iTUMc-cS(>Y]:=2fW<)llJo0bS$g<0n3HOmBotU)Ie)3Je(E=qY.Dj$\#jHN*U%Q!b^J`85LH\Z
%)DBQA`D:2_q_\7fNBc0K5/Uk([)=k%*eR)_LD7^Yf<7$TX0Gdk&+mCBDMQp,355NCPRqP1\ZobQppBn7&iu0TJ*?4r2$5m(S#4ke
%YA@=:Kb*)rCRuQfJg;c04gK434,_^RRG(<s2';*&&EK6S&5&=E:Z(EsO9+)ck*:u)eU]Q\k?bBc_6,.UU.7++3hRr^l9Yo;Zs7a[
%@Rbb"nQ5X^$0]9+TJbVAFJK5_>:0a'qF!fXfBH<&-2,We_fEO+kejL>86[aS;0c2*Rn@E7"?$.$pM)_@l'J$di222^Iosqhq!@]l
%-dK=G600GC@>NSurl\C#?bF*67p#_Wb"$+=V%5^T#6!f:l2-D+jkZg^G@OhUiD1Pp!+BR=le*_]XX?'bMr=?%+91Wkc1Z_'ro_O]
%J%dnW*"@p'md=u<?GF80hYn34ma:giS"#WAd;JqU:KcDBIXQD=k%8rhXhs4qcc/r;?fQY(^;&OI?[qj#?f(eHgQS,]J,\]pUK?I^
%Qg]+PIX?ZcV_lD#gcj'rG<4/I7WZ3=YCH:FFa8,?IEjC7?_)YPIIjOSd\d'>UNjW,B:!PVJGjOqEib[1gUgh?gH=LbfB.S-7If9-
%'`[s(4Du^p:0sQ2T=$JHo;2J:?O/l$.K%Z(cW:Kfqr:fJGgFk5[s(mi56CNP2dN0XFF/W*>F_Bs+$P1Nr_MmM0q]WCGlDo(jkI9%
%r<V!Khgm,h4[2%,hkS2P,3#2rCd.]1HZK,<GCSI.s,h!^,:XoXIc+/.p&24'lh_dGCN[X%%o9pjG@tj^^4+Y68^"lPfDBl@p?q6Z
%*=16g8+D0uqg<F,p"5bI^:G8L`prcih%r"__m+X@47<.47q5M[[X<5jroS>"$'HS6C5VV4Mo5=n?iKti^UUkc3-f0tmnDp!Zh*RZ
%X`kT$gAFIG!Si7@hKcrLPFHdN]4"tg`cM%1VpB\6r?(uVMCBZcpr'94^[FtDcgIBKQ<DrabCXt*,Ao/@Dr5s9o&Z2s='3boHH3_V
%r11LdjjiP8"b(`>IWb7`(Z#&+hoT)/hd!k,g"tSWIJ^[\\^UPunr?LJ.'LtShgBf+:;#a=lF$GKiXJ-M5JNlk4QfPPpgIt3ilAK:
%T=2nFY4'XgcMm-t!SaIDO2_ZVd`hKY%AW9]fKY6:a]G7=r#aJ)DVop;UDV%jp?q"dakb'G@5.Yp4dc9@7P=J-[3M$hpE&hoBARRn
%Z>b3cpX`B_G.50?hJBnGa3OBrZWp)Sl1XX[I<0gg[%Z6\MtcDAD!k"TR[i0g]tQP<H*]M:(#F?R(G5W,IIcOFrC:.`gjX<O<S^tg
%h;*!.loJ,s<E7nFla%BO9-P9!\X?CfnRn>Phqq^V^,ig<gYN@@V,&R3QIH_u)1$RKq<c;kX4[n4)u7>Eh>#7\q9a3_pr.l&_qOh+
%IW)ZAo0hJ6^\$[Tp1eu?mHAXb2cfc]fa_rmqt]sZCO::%LmtTVj-T5$n+ja$^:Cm;rT<DDh<*P<eba,r)r49`?bF.c*\Et.^loEf
%?T'I[mVYcPDm)sV[Q=A9%-$Wu=Gm.Om)a]HAM_Z&mBs4VR1@pp2rAL3^Y\tcDY*HYB6P`,cP?c'=h"8ImJ,c5h><C[gWc'df/A9)
%Cqohcml!E1oC^YYh<*<jS!U<b4g]_4"Nd6m55sZqT-%uNVf,mIT:Be;DL]:3\N;lAMVXuHmf):6=3&5RI!KjS4hfiiF"!XMP^g4^
%TDe'GmWm.Sc0]\gV0f:f.U_"NmJUN8Is-*`rr*A`!7QG0Vl9<=n`ru#LWJDgXPpKU8&Xlno8DqHmpBtYcYrOnm"&#>N0"#7an>2S
%l,i@BHh&Q!Su9Qaa1jRPo'W")J,\QgWHri4rVblBPLFHSOY>TSeEsqV;:-UAM9Trkci/=eql[%b5<1khJ@3enc7\!ZI<W:Qk^-%L
%G4sPE0`0/^]fPs)kM._F(HhT)]#5fF/8Es)o1'bD3sn^nI+tQJ(%bSq#Q;m4&>/i/r3N?%m0ES>knqk[qH<g@ITHHRT2kjC&"ETB
%In`)32BH%,pLY)Th'^g?Her[cOSW_ZL]$AnSI5t0OsbbC+8?%9rpZVXo&L>A?i%[QpAlA+s20.p*&"BY2m;)QIX?3t_K<&\cQHQm
%*RUFiX]J/?=(QdUrd"tWp=:5/-ekiF$G3m[5AY'XMf3oF]5;_ur\G9PrFWe(a1(q<rP47KgMA8d1!\@6]4hEN-e@IYIs/W637O7L
%#0;=IDnNH)BP(9aC2Iqi:cgnRL=Pq$QuW_+::gO_=53=r3Op*T)"5)Mq<ZR7qWl&8$>YRkq])5UVtJd'f>sAqUX_DBAgW!fXG6'.
%.DQRF3Gd>4I0G8`kC:48hV'36ETaaYFu<%Nk,ioLf4q0hICm2'7LlECgP<S\I1_dAs38TVrSmeO\PDcN'Q4Qs\@[%G)8d7M5J,]g
%DXVJG^9Isi%,]rXIR?lHdC8.Y`i=B6Edi%S\egO@pR>*/e^H%El25gO"n0I@DPrqOFB!J%5.<1$VXkM;'Q4J_MTnZ+]"6YpHbUKh
%5QC<)k)9,C\.1K7L/[o%4SI=NA@RD`rHaKAGo/KNs/]LUN/"[rb>YU?+6B78P5FH-Y?ns\*maYfruYoCj#K+aJ"kW`2eUaGa*7Jo
%:HRoc#S\gB-[KlZ2qp&+[p'%OH/9CgRCdlf&DD.Fa?Q/d#<[uq]mBY1jkHi\ZBbA,&\5QC)f0S=8PAaAp<;[j_`rUaI<5,]@e#$L
%A*;4t:]=H!AoFN.VL'b=iiAV5;=hK/`/aU_^Z@WQamPa),6Qa!QT$:1cCerKL-k$!_0t3ha5Q2g*FgN.]h?*a[s7@CIW#NWneV+^
%%r\Ut;(XVPF<[9f^TF+m4l$#AcO^'B)&)Y/Cu=RERhqToq8giHUGlH+TH8]oKTl9BfAmd5=$FuI-cb;c:Ub8_qn:[qrdOJ'brDZQ
%>ESft]\J>pme;0VIhWF&qYH;O^=S6O7SbLch-o^FFFNi@ip+eK,JSNqip,[^MoQ&TNP8\bjPa^[_o122Dbi:hp9ERTX6]B+miP[[
%h!"D$p<b<0NUDN[DUHFUbOXK.2_T%\Y^*7rY`[M8k2Ae-2cnUlN;N#(h2=5T]3j`/UYGOHmG6cqLY][(+,A*N8).eKq@$U#Yqb.M
%\D4eC/?HlrSR,UY;=VS7NR%JO`Ba-^bIrY>?_<8jEkA9sK?[dN?#FTTcAT*`T<DVg)/"^C_)?XNoV9CUp$("*/T)Z"!G_/erUUNJ
%HTume:QJG(9ZR%RdmoZ*[5tk2]\:+lfk^;W.R(OJ[E+-<H1C1=k',S3itNI;fUL.#J,&;Q?[V\<5M^]+*dFa5_=^QX7l^F2@>o$K
%bXL08/j%_Q0EJY)qAaHuf7pbYkB`GU`O"Cp!q/(7G0@pNV![gobg6+Ho1*g!k/gs*Zcn_jGL/<!-mUKg^tZKa[Ce</oZ2m39lH>m
%lB-.Q)fp2_e#29WgUFZH8&rd8jSa6,NTW7TgTu*jCK1/Wg+kJ][H'50g*a:5Qg:CU:MsO3h-HO5VGbd,)r2LDZT<>I%kTjoOulnj
%4uQY&2+.@#K/>]:$=;Q(%QkHE^YeVL:m56nh>EU#pCB)*[pc2D#L%rXb4Ch_B@n*Mn1i+:%bU.pJea>b,X.'!-S=6IOga:Kh4<BH
%0+VNc6`V8Fa(C'KJ'[IC4BVB<B>Ys@WnkpO3V]D(JU#c3PFL;spUqFq@m<,Y-$EHf:%=1^2nN\h;pBNn7<u-9`Q?@`\+`AkN7NoI
%Hb/`.nn0f:)>QR>CZe.DhekZl3rK3]qUePTHgpmomFC<n4.\"-MegJAH[LYYj(`pbcZ"d0!H[@7:G\+TH)Tu>B.5PP>-,X0p-V<)
%)fe(/.GJKZgE/6hfgZU@qY'n?lCMS(&]`@YmiPQ$ZfT`nf@uj(\V4<Qf(Nn;AIX:R)&E5Bm*FGX0=NlY\,.>;qr-"*QR@Qkh+tc@
%IQjiiZg75Ma7k0Us*VTu?a*Q!e`$N1.f")7s1s9kE.%6Tp4e.P-EKqoe@kt=#EV_>)8bFc"A^flj"g)uP/7914GWL6J+M?kRt'.2
%lT^B[4FQWnU\SgZ+5@s^/DqoBj;0r0n@*&>a8jlk!G:7c^uQZCg>@C8\,5sS!-"Qi?J@`F!.na^?b6$j-WZsQ_W+'%>QllrJC&ao
%:q6N&544NiI&MkEmkgoj%"&>Z@!*!2."b-h1CD:eaSmap@X$KF"V>JME9<>l@NJpqU;Pkb-Lc82Xe=q8`K<-iEZCC(%ujW9rmL=$
%B^,:6_:!U)s(8;:Qo0OH!bMfAXim\qo*&Mr4V<F-<t(PnLC%nk"4lB)&bD.[8t`+bIO%R];btVHAHROC%&.s<?UR01j8tL?&3!u,
%"J"L$IcXoN:sOVE'P&O.<,[a[eVaWrP740Fl8O<=NVJk`"(`V]2-WG;b*5+55/gko!:W/XBRhc+UWD4YUZ^i-fOXL>J:4g=^5X39
%0Q<&_bEt@<$d'TRWM9\P;$'?"!eR]"@!:jq"@Q,l[O:RJ@Xnan=W8PoM15F.0+4*=$t<%0GQ9jcfI,oRiC*p)bn1d\^]^2A0RU_6
%P/c:g3^s]CW,*Vr"Vdg.h2oTP4au">V)HBfU*m1YJ:%M+To]i-bn8%&,1@Cj8?An8D#"m?]GrR@a'4+!nAl:>cZmV=/gQP1@/_s'
%Eb/\p!Tg&rhdXHX,R/4YJ;"VpL6*)L9HE)5#Grh6s%HY^6'O1F$q\A%3#ZSSBAZ9I$ti'QJkdW^&'($=+;,#i]NT,.YWu/=i'?bp
%.?*/8$jnQR@rh?g@-b_?5`5!V]4X<K&chb_8&kaWOEf+LQ4Pen;?0?I^4-.W&pOHI*5I<&NU*61`*6YYb7BH@RtMp=VC*!V0dNFe
%KS8"I+K:c3lS*^**Kq%2?[0C.4BaW@(5^^eO-3j^-5.Te&E<;&/*:@eN\;KQ-iVBtFH\?Ao6S=G``f3U!(l2##(lE;BV=0kSO/L0
%XI:8rj;G-NrDt25c_(oG+-&VjI+=01aAsJt<(mEc[n>aX>sSR:"F@3Z6"/p3,9lYM]\?q]ohB7D:_FAqZk1_'ToOE67VNu'*87/A
%2.dnNjRI4Tr]$b[s'CL[EMsj\]\%-4"@:C#!83Mu(dUK:"Cf>@8g/^>G6j#O\<$^,#RCdIK]m%\:iGBB$Wus>e-'GM_1,Y.X$t61
%!lZFN,++#07\3+H^.3lJFsE%T35L\%(E/:'[pZ1/3qe`/R$f7knD6]]78M-N&]@V8'IY+KC]\<bje%+jP8VibqUVV\&WoEnBM55-
%hO%La?R)n?J[/f)d*-%S)=1bHX?6QR=r\Is)Rb4<n-I6TL$>?g^*I]'2qhTbecc?2@pj.9#WSAgP7gGJe'c>K*V!DG+jmj`S9UYH
%FXIP&A;.huKI"(IH@DrYJn5-5V@9Rb*nUJ*I0:U6;BFiuEF:aj!p=BXnjBWrA"+$.P,D=i^iL'O$=*[U;Tp%N]W@MfJ@h5&6qT<X
%c\-O1N=s_mSUIJ(T6Q^<_8gUqP`U7YDm0Y22koD#%<5-o[hBqjeD)2c3`#N;WQ,4[5Y-_kIH^FQ2;"Ds:p5nd(0I`PMS(VKj0t/l
%Gs/Me_!1A#:HH>t5a5\G%2&.#%M;fAR8jl0%N14',_`scLhK:Mj?T`1a&8boP$9qDrro_57P0d`7[o@u9?0[R=ES,R._&OLb6Y3>
%`len:@.^-U#gjmH("s*I"JWmMHg!$U8EUTkf`U]J,.-1dciL^,%];#m[Zr![hF4_W3rKhrZ>?kqQumRDnMt9[^gJ3TPaJ,-7F2qo
%HS4M8M+Ms5^fI#Jb,,DF4odYq$J7qmOTuK'_a24?NY#(61^BTUh/uCr@/ek)&&T`R;Zno)EZn9^K3OV5#mIO<PqTm=QQsho8-?ad
%#0+ihJA>A?P499DUi&^R/<E+=<\+B05g)`R?I;eKPWdT;VcaoK,MkA8!hF;E65@qk8OE@C.i;`<M1KR_<Xtq`+.(l^`$->]PDB^p
%+W="Z16jKsdfHF@dLMHA6hUsMeq4KrFP$;)AcnoA6Fu=:NfE,a769oEETE.d+n.jl9`iUO:_/aJJI(O3/CG"cbefD#-%fA:qN65a
%V#[j/K?nUp`i7BsV%!#r_:(*6j"3?l_cRf`TNWRS<p#k\%LD`f(MAIgNHUBraXSaXOp[*Qd2J`IFp(2j`ie$\Q!J>M0_DG?M.Laa
%Z5b#J#jL6NSR>=L=cb-O<R<O0&;5a!>WYJA\<mo"7mK?^P0Bg*rGpP*JVN@XAR-Q[R'o(%V6iu1#Q7:>ZJJp1aUFX'+g!lP@l`Ye
%dl=-DGgVXJjOWj[iF4ie@?C-iHI3l;>Am)LO,Ud)@ppgkk2Nj[!MI%IUjs$H#n9aL@c%8PR\gGCB-q]%ZYgX)CaEH@[`*6-'OW`Z
%Ck`u]_#R+=M@$_&/1dfOEZC7I;?3Ob'&oP(:P8#N+YCo-RYTT"4X#a'#HoDI@u*MrFP`*hTHjU7-H:t3LgU?,4Ydmn%a`0?$-#pO
%+jgLWPj"/abq%9W6psEP&_T&cJS;R!q?UJ#VDS@'#8lRdNL'#E<H6mR0S6TMf\`8P*rOT!DrGK\Wl3#8(!$SDOg\_5]*<dlC6\h6
%bM1YYM^Hk],Vn%m0L6CY/_jW-d%<\d*).EsMST.NH(</7ZEu<rHQN%dpp1Mt;igU95R0kQ-4Kj'D3(<P`u7JSC7<-aB,mgogIrjJ
%^m=YI_B*3&%80>P<+\dFoJqpNkU[QPQ+`XeSX%j*"fa8YRpd-:eQLrue$>1dU[bTWHX^Y(*#@K"c?QG2SO/H+Fo9*h<XemD)ijRY
%=T]F-AVNQ%m%r(#j5B#dV(3diYJ<+<5:Om7Ms93<K4MNOn'a$s3M1k&b&9B6r<jgW*u=H-Ku[@GhMJ:co94Qtik9..&-'5)dOL%c
%Ye;l*C`!P&Zl9*]A-EMd.QY`UJBUOWfK&lVTeneL?jUMG@hY+-kZ(OA`8EXNfjX**cbuQp<7:PY^nHasLr.>A@aY;;n*l8;Y0P=9
%bZI..6Xi$p=7h;l%93LZdb`*;n=]Uu98@2@4e"]U8.ts0,B?Z&J4b4Y<30jiZX=l6A$L@Hk+Jn32@t=A4cCI(Ya?Ih38r`6lUO2n
%=$3V5[n`MH)Z1@,+9kF<H$C;<@<Q_0./_Hn?991hp^ggmU#/l\rQo1f)XRMOhA4d`.29<5:8M']?r=+$B+/ri)":$l?=X!U6Ndm$
%3`Cg1#BH,^K+X,N+Tglts'`UWb8P_g%Qj:c,mh<ha2Ib;a8>r?jpS0n6qCg!".m.L2DoYf+@-6cpfL9o4R5<7KeZNdn`1/rGiYNF
%D8ZfDIYEc;(^FkiG'=:`<S/qV^Bis9S399ll=!pc87[&eiKVSLG6N;V'I^bOL\F-=#$_+@X@,*E^eDp@91"u)QY$CLp@oZXA/KJm
%)(R;VcA1FQ*[N]InO19)D*acV@%N898TA,(?Oi?#,+.'E@AAWkk[jsq-$D0h*%0aM_lBrW*t>n>bT'DjG`5`l_iSpF=,EZO@"kLu
%"Yq\KI"4at+"N'SO:GS>KH#[6&OQ^A\/5Ar"FDP0_E8nRj&s^G8tk_m6:!>K5('[$$>f=d$[#g'D]EMdJ4`:5K,3Y>V;umHiXmAt
%jU7+$iZol/"!8Db$H58!+JpK6_+=F['=h'blaDsf5>6\408J=,;M\fhOPTJjXmAm*V"QK;3a't,L&t$Y2HWU]`<;GUjuLXSH6IO"
%JY+>3@-2Ae"GKkgln._,MsD39RA!_dn>5WJ1-$>>q1@jP<SFt@.<kKCbk^\c+i>UuT!%RC6]rnR"Y0Vf0>/RR>rk>9T7?LN//!8U
%FRCQO0dI@Lja+QOX8!5aG^In1LH-,[AKNiVZ3!L*F^62HUQ:"ocklgQ2.16_5Zs19B3SX#d1*)[698s46J^U55uJYOrCloWLE4P+
%k=*'RbQen&VP.'$%Z[BNfK1HD5;^7H^m_hqUkhRO@E0@B778O)];oT^28Z@Ek$2IQ^nC?.\c/7nLU)FV=kQI0#TV,9%2g:7&L^O*
%?@%)e%[f):PH2n>`aMY'$2k8Ua,Ig'T%%<t;^BIF!/W'2HUu/ec*>XSH#eFW-nIl#D2ioq*.aV$)#:`-8V2@s-,`>bk4k\?oAJGe
%I@(Tu(J-4n?$,E]OYKer=@r9_n7O5Fi/%Q$DOfP#QLX<t5sh9);nelE*A58I6%SP:*>cgP(lG/Aq#HQt@:]kL6GBV$_P&dokq@eq
%8Bnq9#>$34]I!(h?t=j_*3[tKnW"P+">kluM^QBI`4gpGlg_lQ_.7Ec#9CR3$m*h/KuU@qL1KXX*^YDa$-CgQ49V!>(Cj1-*CX;T
%XoPq,mSVaDR%^=_H[.nP.(O_GZd<]i"!8\5[W6CY'\l>;E6?P461O+]BeITn!iH'g-Gtege>e_EM-pL=bf(_6RlP.U_)7b=0(O)1
%)8*04$E.]aGu/#_#?UAM"=8&V?LhegCnX<bo"lLmK,80s*tO)KJ6!8;9@)rSP[RIt7Oo0CK(j)e2CCQdQU!6"$f2TPVSUn4F)lN#
%r53OJi![=3F`<obmPW%T6-pXB3lGr&M*et07k;i1)$U<kCuq<;YRM;Vd%i]8XI@(.NQ7;ciuR!%>VMr39#.?Dj0*Fo;jctYpG8)P
%Ts/RjbGG)hb'%]@FF]B?JA=2kJ`9BkP(qT*6QNb23RMQns!5FL_521iS0Cp'M\NWGY-Om`#?$q]]H=RQ\g,6AnUh5ID2M?R^t'qT
%qL"[[jAg5R&X%/32jQ_d5gj+L!V@DG?t.*+K>,;+lRmb8N=YmUjU1shO>.bqM,X1n6Pi2*Yo8C2VG[$=a@9c'*0T8Eo&U\,?YGs9
%Y+k-[.n?%_8?6p8$=Z3:9P(N3403\3eSo1[`&0#*5l\Pi`$L&=@5O`.VC*]m+]1H,#FpN$8MF',H]d!RBME.8VR538*X;5m977qi
%(8=q\A(Q^J'gS4=\]tYb'NWDEj$M^Q=_eZ&/NCOSpl>(m^)r5Fi02S0.Lp=,OHD-RH"RZDe8[+Xc_KD>76*-3+Ds$U!E9X2WM1gs
%T*REF`qTp%i8Y>e#s7Nu;8$oS)]rUPO\P6)9S];"gk:<9&-f`=@kg4[@4dS(n9fXL7R,lQIJ>>1&;6r8bf<7XOh=J;QbXONZ>g/6
%/:r!PJmi1*^AQ",lHl[S\%+1C9/MVir[u"H#R(5a>Ys@Y$JW8mIr2l'X"N.i[<5hQs'aaukQbU]]k>[?V%,^U=J-IfhT9B>.0Xp\
%<0`@@hL(n14l;dA$5T^'@qNH#lA(02/R%*2Sk!1BqhRN[5Bi>D"7N[h5_n]#h)mTWf6r9a%tNl1Xi:8*$-rnN7<ZtJa'r-lCSH.L
%@4''YDp3B]lc>6_Ess=@^F.%K2>r;"aE2p!qb9gV].H._RGCdD+V!leE9Z6k"+I%fN"%_bJFm;^\tA&e=SGGW4OsO\fp9K)n+Uu'
%Acb,T$i@68U-^[2r#E6(\S.G`I8$/(^1KCOpOQlPb\hiXmULQMpLTmSq#&q51&g##k!e(1lTH6V[?2HrFjH\p@d?FurR[LGm1+O-
%#da&F>'f'1nn$/SqNFM8%c.#gX=X_8*<uT(h$4O=*W2P:p:WqO/LH[-:SU.:W4H9o!Bjgr9EO(*N@&tlD7GB(m[N^+fDFUs+_Meh
%Y'&V%Z,"'0'8T!'\33gb:Z2`/$qKh[&iUp_$/_;kp<%$,[$JBWCI-aF[%j3+#p&XV81h3nh]IAf"H>L!jLX(E0'QGM*@H_"YQYRb
%nVZaZN=NkJU3?AP@9GK"##[-jSTd<E]l(Z3!WqupKp@I3a8M0>b<6U)eGFAMZN9nViI$%objg#grdbO*#rhQ#/%hK/ZHBIHhigbI
%J]:_0q<a-tqu3a\,p$ael^k,&*Hu=%^ra,u.c&;#I;eL,D;)>?XPfQ0!1+r"&"e7q<X"(hI,mcPg^6UTEqN*+.0_BQ#&'19&bqBj
%noi<.n`uqfF<2Y=Z\,"*.?#CRe(3g`.//%1%I`<ui+Ag1p3YaRqf*o,i"nT"!@MrmdfFb@4g>r5nV-aq/&731f5Z!'=a9>pJhH"S
%Hm]P5lhr.?5WSr>rSU]V.<eWkkSu.oSkGEkXlaiF%D:j09sm!C=[>EbHgtWN]onsiQCt&JmRUh^T,6*sD]X-fjH^T,:LUqla6al8
%8YGHd9qZ>6Bh>D4'9V22s.=C-S/h:d?U6>=g"[(9bR[K+f0JnrXcB0:@$$?1KqTtgF2i]97Zbdc\Dm;B3]d.nhlnE,^:2,B7D(,Q
%bM'O]FnIbPl(u;sr";*0=YBWbi#o!P4/-V.glY:Wbe!=aR<0@^4l5QKcfF;;%C_i#-U"<PWu>MnYF1WFmr[o+!n-]%h]XKVqsF'5
%L=j\Xs8FST]3:@So:tnZqdlX5%Lj3LGl7"bjH]n"nel8]V`nE3EZ@"55(4TbpS9=Cru'kOZ6_U.R0d)MO!\'0RPNq8Q@QMeDTO!S
%S8NBPP%ollq4=VKXrr(>jtmCNO;4@DO%KBN[fqA2gXZLKk=QqF$`E9rgt[AX]aliU5)U&AVBh\pd^@1=!*5K1)l]O[4O@=:c(Ni5
%bUKIOZX2M+jSh#;o%2$!c=m)l"iaNC'c1UZ>="9j291lMCb>E$6(1KXc`VdMR-NHg84ImZci.CZB0EET[\40.cBR&<XgU]#?fV":
%dE#earORI4ppOapF85*_=O+YScQ:5ibFX*"[6>*l_VC53K::A_/R&u.m)7%F6hphjQoi%C60L>X-O9h>?LD-K"(WW$Qg%b:YVMJ.
%h%0(k-OI5JNrkAuYiB_6!,hJVb0pCF(#5;8:r0>'ALfjK:t(_Y&C;Ce8k0Vpc)g#^*Fd*@D8ihGMN=S7cQ;!N.Lu`^C<Xh?)4t4e
%4K^nN#?Q52+29FlPIDop6Ze+IO5^)CX?#mRqhMb)ML3%(5Q4/hk?r/,46WaSm@H*)*\fpUGWeP]L^`ag1`s/=&`'&1na@I=pm(2l
%qdH@I3idc/brWPloj0=GIXQV$otEoW<F8MlHLAo"]FUP&lg*^Te&t=3>K]V;r7p<EJ$/ZlP!:o#3q2`[cd2R%kKSoE@*d5$oj.mL
%,VB"QQ(L)fXa/7[ithsg>BYUiXN2DEeXVrVE+Te+:`3PA40]B-o5N37'!Q#\3Vo=#G-Ccb2W8Yj\jQD>/3ZXgKAc@6b)=s:%XKhK
%9V@b"#OjGK\:s[)Y5et#g`94`2SZn6$>.,o.-(JiIY<]jPDLu%_%//;iHA=bORPdg])qEpMGuE:aUE#5/6ua,R_VZnhA$GS_>QN7
%dl;-2mVm.>K$kbe%[/TB!B7?\=7*i:3d1YRA!_SH%\J!&40\>*,#\AGpY('Lm?g4QC_t8#fjkZ`dE_*3P<hs8Cr9bn2acfeTL?)d
%2d&R>W0[=h,gM[%'Q,VX`8Y7J<[4<I6_uQ1$8W!]F$Jl#Wr#;L,\Pt\lk%m';K^mlI8,INCA%l@+5l.3TB:_7AWCZ$SB?lZ1WYim
%J,]P=)pZQJs6At\e>Cq&g++Cqi]BeC_ODi?F`32sgYSfnbSR-d&[FIKA7U3Smcc)T>k_XD)r`'%[2aGHd2BDKPPXd[$^Ws,$>m#)
%]CQSbpb30@'UWcnmYkj+@e.)^+'GX[j":R0>1?u49hQH8$qhH0][,o$Qe1=Vn'F`a,"rF6\)e\/P-hXh_N;$cIf'$aV@]'+NU'hZ
%M?bV<2GOe6b,?>RMYI!17Oe`(D%c1&HAp:Y%QNO7pcXoe@US"_lg?jkpg+2_Ep^(4[lc57!Wi#"-;/lSA=/[Zbn"tP_I2Sq<Q-et
%d!Bm/a*KSa;S.Q@KQDnJZ3.W)b@D:U?:h8DmLgrD[U(Bc\t`^'_\&)B$WAfpR.d;j9Tid$a=#7JR/eiPg=ckmHSFgmbiO.1M@.'B
%nN1pMF^R8?(i\F*JF5#ZG"_;u_XsqA]8uOGC=:sK[B0*PFF%?cJ!^;=Ou*L8`47]+Kl80n/eq&;dKEcM4b\8"U1>g,>gi<K"$C^H
%j0@b?^dPN(<?dU`Y;njojldT(>ZLR28X^Ne4/u6\`npsra&-l#=ROrRlI=X:@HWh`i!i>WmdcN1DE&S<$Y.:7EDK&@Df*9GfiTG]
%&1>F!I_QK^Xjb5"qjhfGmTO?GFV>$"9u$>ECKc>709pRWf;-T6>AKaS_qgjqdiIcMXR"h/VWm'^KNG60hg]L_qi*f+,\LMFkC&_I
%WRVi_eoDNHESLeDT[R"(ioq]SQ.a)dm^c.N+"!rufK-pQ%V/YN@ZkW(C!b2[B0B.G!6`Ln$_tCjh:RY(cSS2r#(,j"?LjPd3:MrZ
%8QHX^5-s-PP4tiq2HSibmW"?Dg^j/%gUcBRZ3Fk.n\C&?Fe>H<#`=gDcOpj_6oV[<$?]W8.,\?s9>rcp2=0AT>%_0*ap?7N:`!(*
%?<r$0VI_p%[rs&Zp`18KhrLB22RL48cu$)YTX:pQYhY^N#Z\01>44F$\&a+JnHu.AQ+&5$W8YsEYdC=[C4(Mg@JmK)n@m\=S*AXE
%-6F>NE&:Q`=/_L(G[&/)h$Td.c1395&X,<[9Wikbpl8UFFX8*_g(Rb%.Pu7$_$[X\;^_el$#B'sXu;+M*(X*6&m.t(0>`T4EFsWj
%'cu,WEpcfS(*E8nb9oV-^;]+6S7*n>Qf,$c_8Rl17c#WPG_b-X6XY+e*_Y&-3-(%\:<,\)iS66/[d/C$K07@8H*Lt;Nb(l7?IRR@
%;',LX<oXIj5Y&F<gN/4f9YhG.PZPORH#T+RIMF#Mi8G[:JbTB<d>=mmZgUW%VK(>l`#R8/0!9%XQ8$fj1TktuHa5l')O)%4&#jHK
%9Jk.XUZO62)"KD,e,-pceto>,!Bp,TPrQu=D6+h'-q(@Q9`QCq"tnd6d5*-#kFZ_h<_Jpd*Yb\a3f!0poJPP,oKHP//g0KE]:t@7
%0')RB%hl-pS"\=5%<,$0H1*jqQfGW$GbN!@'iU6ETF.3Nqc\k.gr>j!#!FcUN4%NbQ"A'sdAdpUfqIl*f8></>,Snm[*Cj"2\J-B
%\87Lu>tr`4.jXi[m]mk*Kk4^c!aa@DH_Nd-m4[p:5--VJpbEY>90V(0f2!!C!t$)o4La>4IclGiGZ1i'[ai^6>MXs2.K]cOLi/UP
%Z[C?!V@Q^5/OiO'g\dS?hpEpP0g%E=!-rH8Y+E]_n0Ose$-;:KGkR*Z6n)nRNVm0QaAA]#+<J^Z=lI3k2'[IiYOt<;hmmL@A@Qs$
%G6d17)$#bI)het2A%_'(6EaSq;F"Q*Y!#LoY'3s%X9";#!'r_?MLdWB/^)i<NgIeYKt]m>p`O0-EK3Wi$DpPY(";5JY](W)ODH/8
%aF7DNIubPgqJq(hn60a/d\&g5i/X%Di(W*Qm'EE;I-/FTL.O-JYdO"ekH5QH@^QgR;f`:2L>i;COk(H%F+HnE[;?6A`bogPi,/@q
%Si6oTo!Gm+5r(Lu:8G>*<"d"g2B9XY0LDQVK2#u;4`%iQ838eC>T-3NQbA#d6D&%J@.5le2D[m)UDLgl=o+)3qfu.mag*Dir:7U2
%Li*,0Ybc=l2`GHLbb]un@t^8#Bt'l?]!2oC;b#HUq\_2']%usa`Y/h?oZ+p:2QCS=T4C*6hf/M`^\/k2+"Qk3VDB@i(=JDD4]H)1
%Mt/d2jq7oM9%3/XKRf*mfSXTL<Dp,eXp86P)0YfIF5&q)3u/%-?@#Cifp+dIk&PgA=,e8R:J>7?PqT\G>!S+QjsYELnl%",Ca%D+
%^-2,na)bC\jUU'q[MnN[CHWI8S?Y<X5+*rqg#=_(#sfr'EK!>8Fl>V23C*]hHsf^O,/11Z_gmQG49Z%o.iAIdU16'TUY&3([l)`>
%nOT=(6@aWIZ96)0,.N)@4q#n9QmrBtW"J%N$!b$.h^7$+h][AO8![Lm_V]7_.O<ZF)RcLD[k$7e/u6KUqj!Ba956O6.bu<m71Q#5
%@QLMA]1LnM/>UWk2'*\;'.KZ^P$UTF3@>ga@PGDp>r4nRoSRH1a2M>mk)QCGj$@s'#@DM7`[?OGb^aL@9W+XKATO36YZ;0P9]mFE
%54#HFWWS;_Co!.RS"RnF6J7M?$kO/>XRGY@[`bI&N]m7UAJnpJ=dsV;q*Di9,())>>2/P?Jkb42LF[LS9o:GJI8!=I\H[".$e9ff
%d`#X&YKL1'e\&g4@-ue@F3F!e^@6;M]OM9M*g4Yq;82^+bDU:lUBpTCgbhgl,]51iV2;TISC2\*1(sECj^Lgc/;Wam0f]/P:Pd6]
%)C?2BIH2/R?Tjh0=''O\ZXWh`<Iph->cSQm;CU:N3.iJ1[&i<LJb!<K(/k(b4E7F>E,EFl+_eBb002?u]4B49JmqHMqL69_^$5hO
%;qSu'NUN_H:?X.'<3kuQJ<L@/KI.4aB1LV_)80ghWcs%$ka#dBa&R+MQ`k`V+XUodd>7%.lER`gE8?PN_N5c>-mkA.$#@(QY8V'n
%.cab:%IeHLit1E+V]=D3esZ<D],ePf]E5)BO%^aV9DotJ;QBrYX;B]=O^1UaN]PXnRb)S@emu?Xm17bSfYf53A0$uZjXB"9.:>0j
%GK=>Y.#.U_Q/uJj#)#U@;"P4J(4[J#A!n=C]lO.;m=c.S>AQ1RU<JHNZRRE3AhU,X1,VsG."OHTWFj20lH,5V'%s/1J0p[&5G<Y+
%0VY&N+<:`&g@m):]05CGdmu4MFp08i:.k#9N;UY<^KPZX+LKGi:;t"\]u9^o,;*#-?JTf?WJaM\bq%XHe'/_)k(RC%.6QCd(@`b?
%q,E)m1<6AT3+eQ\Gm#TO/7:0VIif7Mf=^9(9+(.>Z_lr1:FYCB_U[mN+VVNN?i^X&!7+]b#Z&-3"`/?`b8iQYR[/nS(AOkR5`nI*
%3+2,lig`YI^cHG?Zo(>RBkdc<ZIbAP(TATS%Su#n:';0-=rArInq5UheikC&;Tk&"QE(obL2-ZDb1oom]N@:R_cf$aH0,76kK&gl
%4itBam'.dRV%;S`Jln)sb.79TDJ3QX7<VOD8I[\W"qj9TXpgaoWc1q6%=;qWP5>K.BK)E7J)X5I<!OeH1Q`/_-C5,gp_sjV3)24?
%8bsQ1<t4k&hHk?Tq[4LPoJV`EBj]dn9R<=56q"J]M@h%@^Lj>3;XRcpMRGnU3&@auXllA4UHNE_,+r'>`<P?$!>N4<<`r(`#i=OR
%j$?M?4I/4_Ws41nCsA/\Fi-kUU`I*;5O?fkmf89qYAY7DRtQ`jM<kC>U'.K`3-10#<lfjHm7T2WS=+,ReU+$^)G"$UL'5'4<<5b1
%QG6/KeBV2(KYVhsZA_390=[.D`#*.V0aMf$T;j5.1>lLNktH<#N$,GrEot[<6N/9mhB`MUc,J0f69k0,9Ys1MR/!1^Id.Y'ql(`Q
%B=T8:6Wne)YfA#A*kl/u('LnS_$Qr44@@H)W*N0OHP%--A+/MmMeQgAn"Z%sT)2JEU7e5Q;jRr+FEE4>I@J<m&6YW*$LCU%^L'=?
%CY"*Q;'!;76LZ8NepOGa0Ha7pX2P?k:`YHWGfpkmJo\4j*C('6)?Nmt+p\,O]C=[p$K`1jT3=b84b0\G[p->q3tM-C\.8#omLbYi
%4e@[,%j\d#$OK.nB2c=,k0T1i*:@ZqUWDcF1uL6+cAi(t(**@-0Q'#YXJ&D1F=`^#*-eQP$n[N4$Of1!.._ZTT^(*F138heZs/hV
%q!qEk8]2MB5-0pF#WEEM%uF<K<0gZq$+75B?kuRQ[htZ_$k+E_]G!oV#^\0EPgLrkqGSG``2AnOV=k\]W9(@[OgC5f=k:a'Y':a=
%7CC?Q$dQf'S>cfu9iFAh9JTPk$>$KD""SVGR7mmrU=iSN,2@RJe=qqmRZtt+$OMi=W^ZA,)Cb!k9^>]>]9;>tJ-o)i"'G)d7\T]-
%&6M`5Y%Du`ML7gPDBCld'4RRaFYg'AqNs"(<IF-Fn?hpdNEN%7f/4Z`PfV'c5V\SDqNIj7laE#81jg;i^_#?W$']RQ"u*Tu<?Nk[
%Y#WRt,4>>CrnOH:c^7:29\8K^)k>6b\$_@VTfPn[+8<Fmbd-Ld:.U59Q)(F`VLBMI%usOO):X\+[78lh^?9pe`iN=)#_&UlEKT@7
%:Cb+RWeN3:g<o;u:#ki29lM[*\7]]`:5&\[!fANhF`C0YGVRrNM0-0?b;876JQKY\CUrdLf:)O!(=/%9^CR)W*uAL(flci)<k!(.
%@[=)J+BD@j2:iOFBP^3#!OF&TC8J^2fk3bme+7;J.=]8;G<a%8>D,)WCH;si44"Ft=I(I?&<,XQlSq?&0P-`n[#Q2k3JCImZ9i03
%ZRCi9ZeL:YD0=bW%?IO<GAKWeC.EWVfeOgR3'55nVl6$P+-^l:R.X&k[$GsSDq;KfT7VfN8'VHW"s'qPQ]A2rZqG8ZX/5XM<C_nT
%0G7=#"c=cbnX.%s0O">5WG;EH'%lg-W:\%cL9jC9hP;HW63Ofd@C"FEZIRtfX@JA=;Flhinfh`6,N$STYRZhsV(e8=:Y)KA:*\')
%'h%tL6D[:_Vlu!3FA0<_Q*4q4a\s_PCbYqp$\+/9'#c7e^KY19>?2GR6n.()<q^oFb6,H\7NHbZFnV-E"%<M9H=I>)(0&?u<H9Zn
%q[k?/3)g^BPG/2=q#/isSd!#?Wn\P0SsE95LaE1#&'u1p[3bQkDd<Idd^=;4@N+R1hG@;-;rPlr,&l&m-DnVRk("+JI>.,h!:FLW
%ZS(#s5Y;"Y=5[;)4pHI=%5Vd2YH"^76Fn-;T=,=:/hRFkSp1J?C>sZ/Y'h<(Gme-[.1QoJ1X93%\lnW'fmBCd/`ecp<AMIX-c_pO
%WE!4k$f&\<RU?=HRJ]8Mh;Z"[?-f0Sabo.EjqGu)Hte)57YKV6]T7Ca$e&gVID+0[g`t>^e7/[+n)lh'bY[3C-nomC'@N?=UNa%W
%f"/_VC*/QSeQ":5_C01B8K$b.>]R&n+6nDSZuMYC3qKA-Bf.G+EaZi#X?@F:h;X.QpZ%:(f08#`V,&K#*ZE<#/,p:T'G!O3Z^"t$
%*PeseG9+e*b\IiNfhkPu1a92%.tf^*/]Fb5%D"R6@+&qe\?3iKX0q1Z>W7K`/@U,;c(SMAc=mV:dj>]Nph3Ao9&HXt*qo#$j('@"
%b=kn<=b#V32<QJiNW[!AFE4Fh=2<=$=eBcA03jStHJG0(PV@qj1T@Qtekt&d=j@a/$*%!70[B2lbiIL]6VKF]'[!oA+dG)I[B^f5
%:=A5>!M;=h(OF%Hk0e=k-&q0K7-M0u\\oP$l7ljr"`0Ul8ri_PmrQM]k\F7,oVfrV;\>t@Qmu<o)-]eV^>?TfrFY@iOZhCg*!C&]
%689AANMUB[+r\?60Ss8ND=+ZOB.6+Yo1-[pR)6etk-jAKCWZ'.@W>M>/+;f>-2Yp#9nFso^4$o(]-=3/ZVIJ*Q7EJ<!]nPMh'RMo
%.8tBlcfIu)'5Jg<QMi)3JSA4W:;XTS)II-QD9LOiY_N77>E;*0qF9)%'hOUR<D6WS1T4,Lc,A]J6O[fW]%28P*PkVeS6H2hc3IuK
%Rb_Ihd(M/%iafHS=N9W0,gQ(GZ!,B&[2.Z#MMCp)8<Go^bc)_C+\'C$]16:!`DJM1\+Q]eppd2:/3Q=3dP>GQ8Adh*#i&XM'kSUl
%g(RB3>!GN*0pYA.ES5\!c[]KTg"ekA:r^<tBp.k8T0:kO;/*-tm0Lbh;bPP:/#d\g*T8]<6%Q#kFi:-S2Q>ZurD#'r(LO`:Qnk2m
%-aV*;XuRWUnl`0577&\<dD&tUqcd=K"Din";,;g`'ii'"@8Q%7X&mFSX/Q1p.DY[CF!,Eho<c-Q5o`@E!;Tg!6uki'A-q=C\bTRu
%Qe+b4ELigEF_[StFdn%k8kj?gYVL9d4Q@'1V,_E#)ch.glT./7KdRJ)_G_&$?]Xt09#DE$;erB>@iS_sWEsR:69Nia,=)It`\i^Y
%<]WhKBUcZ>?BCF,))He(5?Dm2moO:gk]Y;?(14>'&DU>-&_C@8jR)`J&St[N^_errc=BF%VGMeoR^p]FDGm%QS4+C=l#M`V^cS72
%,jSC$;`U?"4h+!ab+@9b2>\&)`3L^h-a1+8gg@?LCjsmJbFfEt-@29s^KB$,f:#lrF-a:E$J7kGo5rAgdp4GEIm.gBT*ts\g2bN=
%,@4CgOaBYR;)<Tcp[p5s.4l%opinJ%>b-53]#rO\Cl2ggI#_apJ`8EfaJQnD_o'+o_C@dCSKH/Zs31$lCP([-Jr:\\5<K=!)FnN/
%XpTtk1[ZnY%K-TfJ5aX"/AY+Gm9*F>R+CLjOf4E?[C0Yp=J%O@MS"P^dEc#/5MJgp7.o]Xa(4DHj/"U%34E26q5L"&Z5nWu&4]B-
%iNd`+\D<"LDUWSXBD,-mS!XsTOQX&]0_('Y-Wm.,*<[.MKe/F=!ua=r9rppJYLX/k*7pa>YUs";%"%$5P/*(85EYECptd0/;VFp:
%)GWDlD,XE;cS)o/3:]m3mbmGjol/#SZ,X0k.TbQg5*mu\A5To.Na'>jgi7UD=#!m3h?>85BER,\r9$u:i@)Z=XKM%"o;Sk;\bCQa
%7N69hh,,YL4HOc/;R!1c/..uiG:?F_-M]/U``h/-_Ui0TB#'=[OTI8`7D)Ps8$KmB$Y9,Ts&t8(Ds#iM6+E5L2E/>1jL):n<nb/k
%?jb1Q@9YC`'^g4]EF;g+^8Zlg6iMn19T$>/dD&io['l6G(GeO!H5D=]\Ho.@E#P`J6#1bBSkFpo?GB#j.FB;#>[%PIDH-e=a\mc[
%n-r8(ir'1J^g7:C`&0qr7l:(QO)b'a3>7KIFGfsKhPqttn,W,dL)-1X>4-T:!:;0L*1%T(0YguaGk;YC%UG-:+F62=!.-H/Su#8W
%(T#7)2KR.(2&p0Y[:_"TXHok"XccsD-.U(:bmq"85.@f[;,,k>ZZMIM6a]O/`UYJC:<Jr=8b40'efr)s)G^jIc-64LE)_7hP,:Wh
%9<;,IXX$T7>lqcHD7444KPX<9=mFsm;&.aI%M0D6CLni+ii^D3bH^bG$fZW0s&P.#3/pL#MR0Y[(Qf\1Xa8PDpI@AP5(7D39KS[5
%)EPV$&T,0!g;kQn+8,,D=5Ze)B+D$!ckPjbjmbKRVd0#a&_2s?hn#,$$:91dDAXBMg(iShn9T$n*q:<3U`@GsNiX1b1]aT),36*8
%\fsC4GZ3s#3k[H2nCMJOPDl/4.HVcSZ@)bX:^W+)+^T"WUq,m?c`S7bCZh-!s+qJB.[TY7eh'AO">/:9n?:ojGYh4::u,1;!3M&X
%d<7en*mcU'*I),(0uun2\u;G_;EmaM.l]/[kT3K^I/Vur:mFlnW"68,M;^R@.sVH:<[!mUI#%$Afa`\EW@>=Y%Nh[LjDk([99stA
%+-e;4-DGk!0)+"K_At!.fTi:?_#]a;cV`TI*)IS1d''J<OOB/!,-/kTJmJWW#Lb:7FkC;W;5$5V6>`hhfQmpS9e&?n).(k\]WF!7
%?D-JE/SpMF>luZ7_"Uim(%6F(=s:0-61pB/VAlTcrY`R9Hui!?0fa,e8KSK=b/&(9!onSP/a;t]1=1QNOPk1#iJVtr9,j8BR,qXY
%0I?&KOG(*9<60@9"\S.aWmm=.ZtBZ<'V],(^@$m"#]Zns9:RH)QZH^gT65uVC!30<Emu(L:gmL"+)_GekGdKe$pa-Mj"fU[^i@]u
%Z/dc(J::JL#,7Q<19=*VUUh8".Fgr>O&Ris-'\u+>:9j9&^""-5#W7%n+`tKFT#'&!&5!unq:"UnNj_RPs!"9!e(VN6@-h*[5<(n
%YU)u4eV%#&0mq&UCm%T-hq=jmH,MLpgs6/g<VVO+FJ4#G(`TIql5&5W\[8D*(aYQ'7udeibsBtiW]H3hYCQAR7GRWnOtM_#dW8m5
%Fgts_:lDB?.8kcXWjWu3bd9aB5pDq<.$a%LD[@^K>+rHGB\^gh&(SuG#D8b#30euX*kEKn+Eml+%R$@tY&jiN_j&h:'I5jhb:U*#
%J_6a?D69&P#IHTP=P6H`!jY@$Oke5>oY!P.@Vh/K9hkY<cojjSH78t9S(5[IU_/>W4q)u8aF?[6BH1**/Vo'O]+"e=qJ'Ceb$cK>
%Y=jmn>^A'2E_sZ^;nZ->QtkU\psKY[6W':ROgUP"Y\g],(*0N)Yq7.C#pPZLWN_&H[&Lr!2I!,'X@,_>'e?rGGj7u2-N`7MV]r[a
%8"K*6/jpe`oBcQ+mpA30gmafNGWOF6Hqa7;\gQ"ngh,/l<1Ef4"c5I.Q;F4+dd:I$@,KH,Y*[anOO1Zo7#s;JS59;cj$!7]`uYoJ
%jjVri2W3A-CZJ6l+*//o?JAL,m$8l%>K1c*C+Sb;Re.N,@8S1>65k'2?gDDunsqkNSW_Qa"+Vg]!p\N+mSFp,@Y5'8IZtQ9'LP\A
%M+T*VT<*<o2VU54Q%pD=n!d&KAhn)i;(/$P[&T51+7+,\D^]O,-/<((VmaRQG5u");WLBZU!*ec8MET2*n,G$HLWm>a+gubB0%JP
%aiCcjb?58Vf-;Wq(uMlAF[WRiU5)p?Qu,ZVTng!<./`jNFuE9CYo]kHgIu,;l4+!CH1QiAl.0@ufZS`<GqS-0CG_9Q[P9(.3:>Y9
%,.UVb[$CmG(P;$r.LeuTZEkI1?!Z92S-]"!NO?X5Tgm)p6Iu9;Z(asG,q+HtiZTt=N@?@*Vs)$B`1lTSGT1W-00?HC6Xef9c\7!R
%#n.cmNMd.WK))*Tm?&_5@@N7aW,L?Qg)8?[D&%P]=5[hkT>JXAf:BHT9PnW\n<]9M8p=!'7-GhWGYmG:^46l3bD1F3\KXXW.ht5G
%@?.D"]hqeg>/JRK3T"HYqQTi(YFQsqn"^a9V4>og>4#bqXDu/bD0(5kYTl%Yf/+'):l#l&]41KV'2u0P8%5=P0akb[r`d#*C3k5[
%.DNRo:_)86p(`j!?$^ijha[Rf.18lg#Ega0JBTqI?mKeJ`FXS:2QB1\&</RE6gZH`rakf>_N_kF2Gcp60h_.cM<+8FClp+?,=[s1
%[+^oK;lXno0F+3V?Y'cDXZnYV%7e;kQQ^*_iLM%O-Y$$hD?.?(ilLGoa@tN8.b>\M)gY57\=MjEga9N2&lR%"5E1@jp=.$mk!hY9
%"l7^`$&Mui^]j'>;j%"oo0j7K>H@P7[,72:$u;lHnXTm[?`h#ArCGK'S$6$:V'?1I!.XIiVZ0>j]/A"q.-lk\Y;C-*F/aOEkuGMr
%[ic9(RoNbCadd(P?HmHA]0_-d8TH83GK0S+`=fI:)ccMmb]5<.Cf'ZPU-=VtSn1UA#HX)$fPdq>$LqAoCLAV=9$6SnB`"!q0\+ZQ
%@pK.B,>s;d`&85K\CK$cq#&mJ&!2mo?*XC+7f_e!QQ9&CMQRS91%0hSHjKNg"\E0\C4lmJC@\pPrUhKd@'+rfPU<&k/j0\&P'gIh
%>pellm;6l]99ULE?2p_1^m[S^:0l$XQ/-u;q-X:q#_<aY$V*ugFe)S)'s?bK1*\[c\F4cUc!7P7'8Ol"ZDZe4hKCX=jG>]FWU!gV
%Vbq@L''V9A-l,@`qA)`$<nO+=K'tHGCL_2s?p!J!754<s'kN<a6Du=%j%O;_K'K[cnKA(So]gL&gT!Nsq([]Ef!YI";1Qg<Gk&>V
%1]^b:c[bBVec4c76!IFZA\OAZ,22s?DbJW'r;M"^a:AMgI>+M_6KmT*_/4&/Vlrm2CAYZ`le@ndh_M]VKWl$?U\)$XZs!Q[^.'(M
%6!7r)R`6E#nb`)-hqa>5=9BRBl5?2XJE]Ukin(gLQc"qA-Q!Yf<9p!-l`@"/:KP(\_5cY)-5g+Bi0sNK`Js@L?>B[EPsRZmM3eb)
%B.c33'\N2^:#D),/YMmHN;6mcgL!UFeuHgfXGs:'K^\RI9BP#BR9aA6LlB[1fWfDl%d'5)TJ?-7gY0@S/\CF5S%u&Ne+MED<m$Cm
%7Xqi\Sdi4W,FA/u"5Rd!N=K^$.\hZ\c]3`/H-L!Z>IXI<h_rR+\pI_<\W]X?K9l)]Dca!)fDbZe]\7;HSTO;XO9t$oIeJ$fZj>a-
%*!5'(Z\\D<3<VWh#G:ua5fr]\L[\o+A'Y&?ZMY;MHE]TINBikA\An[ah`?5XP6/8JoO7Sp^pbbQI_7:0V$cd"hALk=[^W^bVq?$;
%kiqGboLAoHm1j*<4j:rp>\/`Q^iD3P*@-.6Gb_nQbC$eZGL(D39`K?a\Q\`<3^<$dVD)*oV\rD5caS+Xob_-jdgbIaflJ6JI<Edl
%E-cg&k#0r%Hh@;3_3t4G@K]SOHTR8FK*d`kB/$$:3g(fVk:8GF9.Em8*Q1d"A-1m,mARdKmB;VM4%U(u4crYReCn4@Q=Vgt0Ja-T
%@[j[\_DSL#*92:_FW@ou]tL/T5$:RoKo,bsqY<oL8O_=3HIEOMG$-'1rd/a%eXFI<:Df"(Ys6MIlr*3dZHbN]VD><rl?^>1%WBJ.
%@)gh5'W&5)3uH#<p?j;Ca5l58,Pu@1XKVC&!FSXim(j#_8X+T&"YC&4?H<6""=4_T^_2d5#KEtJ$;BkH]S!LA[5U=cLrG>l$9Y#N
%.Vu%Bb$t<[5eIED@#CQ+"56krV4u$Mh4[<eG2jYY#ZCnP'.^BF;e!Q^<3kR`G[c8#S@W%?NYA,/"akGG.*J*BU&/5(h6#:"Hm3&A
%2&p`P6E>/p#pauQ(8't&2u7=Z0)/j*=hF1S\QG$UWT;\0(ruqA=(lDfI>auWpUs:*AYq:!#)orNrD:q].d)AL@hCThF'SN$aUeSk
%rESVma@(d(#();Q?E'W&$5\c94irgH[tVQ4j0$h'eOg&son0H.4VK,3#)4ZsT_\0saQuc#8OQ0V/C'Q,r^Bc6F1LjWc0im<ECLnn
%>F$)![D)'o,e56d%(CVW'E5CB@[.j4%^^5s(R:X#)0gdbGG/'QWU2Sf3BZS#_3!-S5@(cor>R4&=-PnUCn2=XbS>mDVTI1t?JVl%
%*GFDiZa=GW!faO\oQ7CU^L!Z`lg!MJMOM"<R.\)rqO:Y$qrSfnOJ\+`X+'Kf%/4HVZjYk;$;>6Xb<orcLh4IbhgunR^:W%ObIf$o
%:E"dYILr<,j^?@"RP%cJC54rr%uKEV"a(hm9VDLA^6bc$;]$^G<9*sL57fn\Io0IPa:!@2BhQ^qL.WCJ6)qc"f:>54Ch_.V!Fur>
%E7l^6D<:ApCC+Pl33CFP&gI_D9kD*,b)Y`)[C4Y8,U3J2joK9[kD"7_@M?Q&*4>DQ`NMfOS%O;&&XNUaH'9JCgEqguX&75)5Et?B
%KWMW+nSKI/^5'u66fX1.4gue9JR9YV6'Fa\3_pAue#YQ(bt->UN7Y)$Q;iNP@TJFe1OLeaS#Q)qZC2+?GmdjPrI&Df@_+q]Zla9D
%qV'LmBmlm28e]WH6YYO1>`.jKMb%"ZQgu'*Q!S=[=&gH1q7OmslJDeDo6K!u24;M@,'Yo@]0*2gKnNt0672AHFl(Z9]I$+oH.82_
%^o4NNB?P^<kVQH9N6)^cjHgoH]jr,RMbo0[e6BAmY1Z]HM7>+KB:8]n=H`)%>\$4]Po^pi.Pp4<rP49=D.`cY/*hQ0aLPq`$4=FP
%_rFu(1ReW_8OsPkZ^kYheK]a+!_o]&/ega!TU;O/pBIDXK:5QAm^V&^I7[]C"WAo-NJa.2*8.47kplG`,t#sYQAj@kWd[TFF;aD(
%Wqa@TWrl:N?`l(!Fn<AKkCWH6P_BA0OJDm-SgYB0/=!NI'%V,bC;Qt#(nG-].ga1d*&gqYcRf#H:;K`/H\]%2X@&)d**;jA.pRVT
%L8W%m#e(N")/C?/WrDh(qd/Q<,KbVp7r!a^kf3VO%I_CnU*dq=gF]XBB>9<@LM8hm0qit.1Ae:geA9tFAIlm+Df3l\Ld$E]?IkH%
%1#Hu$BdAS_"Q0kA8j75aM.KX.=k7:Z;:0-%E%h70kh\T:A0+GRgV>LBRN<_l&Z^`N[aM2f&mcO\9C38m!>*$MNq3-adY"WBj\"L,
%6)WiX"Z.=4i43O\Yld$QLf[higWWNOL)cZrW%pu-a6l\mj81KuYuou\SOPV4\\-;Mm<Gt6^gGtT4ftZ'CBb!QX]9+M#9gd^@u7r#
%RNV>_Sug;c<[!VBOQTe?9n\mRNK&m"P?QR$F.h)><O!lC]DGi:WTt7`B7?Bmk/9)DIG[PD9Q`!>L%2K+<b;Q.+#o6;<%0Cd"\SpX
%qjbdV[\nFJX)'FtDZ"K?NU<YH%gqAPm742cmqcNb[?-T#ibFX1N1_^t^='#34^Kt9iF\!_/@c$H_L)0H%B&ZJBsF^/0AP+qV'8X8
%A'8M$U#o`dPD-8tH&JXLPID?Ajj(?"A1n/lip0)H"8t5TYq1>el>a;@?8G"GA#iROO@<C</G2"A2'=WA4QF8\X%eC]*]R&[@f:[$
%_-T`2ldN)$OYXJmJ1!^+S0=a,V=`/G>?uu.?>:$A!ir&_Q$3jl!NakSaAK@$N/J[;9D)]pEpRQ'`_4+H[><]e7gS]PY.'b-diaYQ
%Rtp!\Uk$ajaB77\[L1P9^Q<dmP8'3r"&.GVo'O%fJ/m"H,E^lPL<oGbD+t1$l5gRn5F5Z4V.SQKEP_<9PR^=VBl^Wr)(th%JeL0>
%'#66$dJX^`Z5.P`E:<HKNB]81d?BVRYD5VGX"pD'8n\`HM:a]DV<:k+"9C>`i(/.A6*XF4ZGp'/)eXj5Eq:#.*>9e1`OhJu)W`Om
%--LnjIcIKVNcDS^731bO`LL;`iND8C[R(d@BCaq]K.L[#2.k0!@\L0F*H;>L<JB@d<S"J:ntb7Gq0`:_mWE.gF&QCk;+_P,]5e4I
%HFbb6+IF*fQ;U,[Zt%s4D*aL7\AKs[Rb0%L`8&F6/2KZ?k6#"PXYC1=BOVL1geO5_%2,.@TH?(0QE+%J]r:=E(<6\hJ@5%t\sti2
%!3g!>)KF$!Qtq;r2?&Y04qAJ*D@Tp<-&A9<O4:.+jk3Z@ZjMpSPSVaV)L743SPbpH8;Q'LH@5j?qd/^:dL.QF+eBj+[#2+/F"`6$
%^@r!4lmLhd.KN-&P)OdCa:CNRQ'$qm1@8pHob6]>.PXsC$+l!2\V7Q_g$P<-d&VB,SV?gh;qT`?-kjuaE47'NS5PHV<F@4)ma3K9
%PQ;joP)>UDAU"[54clBj(=AjFOl2"CRgfLGU332u3]>KeFn^BM!@X+&2SiUk#M"c)Pjrt'ND#fP*:h3%C<6nDrEO-J95?"=b83ga
%"ZVmGL"1V97;$@S?`c#k<t6lp.k1>fW((a/_H,ET`C`o/rA`bFUo]VNn;<6TdY0.B+@d0nO!U0V!MEq7DP2oQklPq0LkSlA-8qN+
%^kRli9_*fKA-E=No1Zs,QHJA?lTadQYKHf@UhZc;Zg=..lkZm+eEoI!PF/0("H37]%cK4#qC3fs;:[eCb7G'b[T)al)d?AN%90#U
%o-.HG`',:0M5n"0/%"eKb#u4oW4*?ZX:bG&qKEgUSG"^&I\k)OiNsrq_mk9'C-7h&a>Xg%=jHeIk)U_,*+!:7O+M(o=^QBtb&CLL
%qgQ1dc(n1RHk1$nd2meo(/m&90CRMm?X.#d]mmKj>%$JodQs/orr/G!E`iD*G>HCM+(L<@)qeC'r>nFemds_5`Z+OHOF-_\8k]_r
%pZQa/fFR']k5's*4IhiK\dadoHHd?1$WXm3l,@DgQ_hGD+o?K5\)4OBGj-.8C!DYWZ)KbXAb_4PM3r&]S(^]Wn6&Gnfj"<ZjD=Oa
%FuafL9n`L%[o&'N0O$,Z[FEmB0h_%P:#&E&\W"kR'+!e/pM;IeW70kXf2B7a/?k2eR_;,r[(TL`7osiEs6K`!2FdE#fd\\X9*"G7
%;!@US0BKV5n;GECbT0<MiG&F&mUOZF1GrJX*mYENbHiukn4VX1ffs`_Ol(EPZN=H!s5o%Ei+9g&caGFVW#GS\J)B=Z9H78,@%3-E
%54/KVf]`4ip_?o[Z/K[f\8JT2O..?e('aWYTCE,NK7=j_6-7'?dll^4d^%m"7gWk_M;WB`2T73#rc61M(#rMIgc+3>j=8?ro?:#s
%V^j/fR69<KB?\&j0Ak2IP0*Sp&!V^P5e^N(Dg5',UO686DA\:+cPP&q7e\PP=kHZug#G\78e'>2E'#a!oXm>.X\4,J>^.3RWhTDN
%qI7W>#JVGa(Y[5/BBXlFXcI1'_C[?+i@>O\'Sq]4+cCuQI]`_kiUATc!RPG1?S_-[PW%WgEa4;s;X2.FI`5UI3X]Gh!"Dlg9kP:j
%Ea)u#-f,Lkc)[:a+koEtN+_nk>WSR/:Rl-Cf9!UW5\bbAc1okoeLX+/`38se5-W.=cTi<I2YBsD\83,:,>$9Y>]#cqqVW$;Df#j#
%4CNP06&7_pr;48:r8$A<lV)Q=*72D6IPGgFT\<tLrbhpu5I'a3-.j0cGPMDL@,1Lacl+i`pX$0>[)OjrUa8A9Gek`:),bf.]!<WH
%/RV$RL=L/N:\odqYZOA`iW40Q(b<CuTHA1.'OA@*,.Y,I2:3-_!DJ=a-fUquXbGt4BSr(W<kaE!kmN0116F3B[X3QpPP!!1F%gOE
%g^I,M3Yo0dg6D@/6/Z"cN]0jKZ?5DN4HJ$-,!6t*D^_u5]FdK"1ag553$QPh4ljb.T6R-FKVZZoQlON\E[q<#@Ob(5KlaOVeQ+^3
%;,qJ.Y;9V9A@Q9Oai%8c7M0.iYcMTI!#J]%3`f_Q#L_]Hc.^hUqrPW7ANgC)="SOi"!t:PV-V/p3KLBG$Is;=*>+AsJ,KR[@kB&"
%`4EL1,L!6GLh$:O4/$_eW#V+TfNf^RP'q:o9N@bU!pm/r_4JG+5F)dn&,_K&/!opm-fA;TpHS6U4@B,o*;F=>!FC&.n_mEj"GUhU
%rq]<0pdo.9p00^++*/O-`/1s=:%XWUiL+!iQcd3*4BrSmKT.WE_9ksB8?7h,p<N\G9m+:9.,nGY^[S%_r;;Bb??rFWQ2G);W#-N^
%(-PeO5HsJK45Db>p[n!uMdb>'A")(,O-4)G:9u[%.X\@?*0s=!q97O&q8Z9Xjn>4;+p(OQO?o*HjA2f&_,7u@aXLC5kt@GTa.^B!
%^:c:d_qpE#q`U4DhmHanPUC6U6nY(LW7A>b7XA]Dop=K#T2_l:ni:%PfU(]`\(r)ggF'i'aL[NCY;@rJ+(s`,06S2C6U-E=p8:mM
%4R$LmkAWY6kGbj1a#fuS.IBm&[.bnUE*cu8a0F>0k*&>KGXOjW8[hph@_r(+0+Y0/]XfJAYNq?Q3n+!^/MbCRHiU8&W1/o.@,8Aq
%,9D#Z-=+GH%7(58?f$/6h+5]r*``C)9uWoQd2socWg%sG&m1GFoSZ=-7$Pu(0?+186f-ZFAoOKXM*C88K!#H%?8N1E_F3Dp+,%G4
%l(C/?&LI=@<YOR4;@)%RRO/J4+oZ+@`MJ+](Tc`;C/N\M0CkgO;"S@`\dqAEZhpZ5OVaM,V?Li!cr1EGF0GO$EXjEfs)/M\f16.Q
%L[ATBT%Xhg-\r-un*EaiZJ;Znd:*tj+.,5B%i*4'a/]s2Bl]O'j,f_TLYP;FjAOrN(f4=49E&Nq=`PDZ_5(%-^fbX%,[OU^h#^,s
%(g8h_BG3^Ucbm-XTo_FFUjWG$04l'Qc.;G^a>PilfiO)Fk1qK4oOan9Te4!GCKrcVaiSG\NiTVZ7>%qL2-$rG08IJ9Ka3fAVs6cK
%RMYp?Rr3ck]e->*rph/\ia7nTs"OHMYrI]+)Mfj%g(/ar)`oQ3oFMH`eU<7.&e]K:FSg;rMuQ)"n;juph6tJ"l;m0D?XoA0qPb(q
%6ls/EWfZ"B-)#[8lHM%aG'MT7G;N'tUZsT`?Dh"a!Xt\FpMWg_X,4\l&H;tD^L[bdccZ'$PB0I)^0YtjdK?[>Hs.;e=*3T*@_Z-g
%/U(XSonRY&<E[0Q!$F]JIaXu*5V=2?S4?A*lu2rr\+"nnJ%bGDTg53rI_B8#;U#kXplF84N/O\jRDK6\C075/a=$J`EF@Wa$P\Y<
%D2MOJaInFUf#C@k!VF&>='k_5Wub[0gI_agnrJSF::UYLCX3:)I<6d>mWECR:hVmh="KUD/WlNLWEK"K;%oM+([GCUq**LLUcqDl
%kp<&)1F&_T;f#t"B))6oE`baF"o1[!K@cInr$1]^WO/(k$j`^n'l5P:&AFnoksnhYg4[i5UHTmnXK?W[;l(c,*dT9a-tf8'RMSop
%"Htm[^T!u9%7T9=;3<`@7,>Mo<n+rWn_d')-"?ns?qg6Z[CYOM,[N[B)_WWWK`QNNnJ7Gtp&E'0E\f0<TfP1HW@nDne=5%1Ce^lI
%24iBH`]?p:^UD\AWdOE/4If;D+-i?\@]`*$;bdSHG*\;MRQFD$UV-43k?2HtY)eGN<.LF4;sVI\rO2Za-kJ5_XOrS[&BW"^/5p$a
%P@YTGM%R_,f%j:WdcAWCdRLJilM$H,+u-ZgD9gpBEpb!ait57B_7Q7b8O-#3-*<<SM*R7mhdn=]AN<5`er+IO-OVMl@nKVXY]R.*
%S6FWD:ng<*H](S>'T\"&<25W5?eSAR=XAL1KX!`#<jlq(9&N[b_Gg\[;_&7)51\08R\F!6i$0p4e[OmOAO12_FEJ-a8W[j:YAW%P
%."*am1o_%\Ps/cqfRD-)(OYJ&FhgR-Q:GVIh<Wdl$CEnk(ZidKIrrlt"f>f&&NK*"R*<mA$lV:NW]L!QQ\MmgXqt#=%?l#4O^H":
%g?><\`oF@0?<`9+9hDfh]$Ds<WkXg=SCUE#80!q/S30DaFB?rkqFu"5j&@+5$-+Jh8%Z3mLS)%C6TFb#IoEqRESQYM4r*U$0NTh]
%VJI<Ng2UKrHM44/6]BIP_r@it&aQd"h3q^JW;=mdYP,=9s6DR:M,\.;"OcE0-l(&W,\ZB4lRJrmK6D^i+=LAZ\t39L?C!$IQsSuh
%kmOM485K+$h,=d1%Y78*n<$H3-o)d'IN]);\)!(mN$Z?nc1ptH;/;,5[[KgN!i@p_;uEo$b8R4tLd^g<2LpejB$!V";!:Cj'sOZ!
%fqhf9ntsTZDf+(f^/QZ\I&)hY-)P208lSbe9M?Z?-XQ)+h9TPcKIO6!HZ?m8Nu2M:p@LuP9srFSQ+LhePkXMOMF['>6pPHQY-.\@
%C8"ajm<Zs5p(Yti.e-A1j")e2WD_G`=dH0tb*gt;]L5^loX'G_*l!W.d[E;[FH;5-VXP+od]*Po<.6@'np?5-VK-H.)OcPSb.H*L
%]_od9%]k*",EXngA*IT/6B"iD[S[@%[H=;MMfnJ]>st7;ArALD``09]l4R`kIUmAdYjV&4a))rilZ(2ncZMMo\"aX^Vq`n1@oJ?[
%kjmFu2VN:"hM^Jd5FmkT01J$aIC+O<6j\R5@PGK1ldNSDL"eoL65H3A+JpH2O/hkP.^g5_151deUbR:=%IQF6a-]?o`2SiW.4N#u
%OtnV;;sO$(/iVNTa$24_At'5om?a]#ZYbA,6pF;iQqG#/l9R@OM+8RDKql3")D>MK9K.;MXX-92%^d=:O2nR[_.n9FQf,b\[VjHp
%Vi.>Y9Fp8DFgF^dRuZ^?Y=p\<[a!r(;fTEPeD8:9T$#j\Ibr*2*b4c':==H>+/*WL9h5*Y,m]P$f[9dI]&B/^D(DKn3$rXMhc.\a
%5olrn.9CC#l9-n[-#2:9=`R!FeB_uR]dV6).d>_Z.Dek0Fh2O1Xd*V[rE)d(9kecTC[]$[[q".;?3a2qGH<YcV]L5noJT)hebE`d
%WkXgc[orIj<1,f>hJmkR9XT3(HBbU?ZM(p4'1j;EqmJZU_,SP>e!>7$92;+A@UAW#]<>pk$;>SkcX!91nr`IOq=bI]P1'6JUb=iW
%!]1(fVHUoS*P`uPC04:q"rco5K\3=;!OJRsI5NQpmPlVpY<`QNWRMrAcC6]$Zb+?GP0hDk04hP^!fabB9tB$3FFck-[8uba%'2qM
%RDpB"`kajoRfd4[HY<cRS0b3lRmJsD.7Q(j\jp.3dZJ,7R,A=k?ba"CBSX[!U-VfFbrQe5i7$;0"i$&Pb,58pf!m`H;[+Qf>CH?^
%\65U<d&Z[@*P61$p$'i^?F*&DUAB*kj-X/Mg$kc!*K<VPljUc1R!+1iI0c/2.=8NAE?F!>0kW]`9d(+mXsNP354)(sW;A#o2>a&n
%R_'tYZWg%#:%^'>b1Tf!lZP]0Wqro4)RHE!?!8qIjQ<M6Mn^ZVs7C`UJ#QaCZTARj;u#kN2DUh,9^B'WIPZ*4cI+kFdWFa.8#_-b
%mPVLi,r0g1/f3R,f;B9WQdFR21csjlBOCC=T@Q'5S@,NF#!?0'gLY+a<Mpn.fJCq<D!?R$qN+M5+&&M"s6:0FFUQon6UN5JRr)_K
%_kA\I;-3/8RAfF&V#+"hC3KJ_\Ll,s7m3S]l`]2,,2qr/r]Zm:Yj=DsZb$hcd@T7L0_N0"Tm59K&Q#EMnEK1*GO\S>I5QMk>&%EN
%7hk.?(&lZRb4m7LOBsN:\EksJ)RD@;VU4Y$%T\r`"b4"mZ;(1Y*a[A1Md*0HVmCGFf9+2Kn9!=J8X7kHG2a^AML`dsY7":NT7?]`
%)1(]<rRLlTbNN[+<@u)_rA37Y?bOCjC38ZPdkONZ:=F#Rf'O(8Q[&0Wo8Qolr%pM,XdCf4%FM`rYnZm,oM)+NHiYb^Y(iWL\Rl)T
%Y+4D9hDSTGq/]]MB2:H[b.KoThlnB&nEph-%gL%')TautXf6d'bqZ@srL$_k3fJDrU1XEd9MXhJP<3Bu'm9"I1H_`jS\o'k4=9gM
%Y4A@K8NT"pfbS]C:g"VZVt+rql`KrrT:UM!Wh7J8q4DYC+(_iQ+JsT]+P$Dq;t]VVZlEV5\h?q-UAM7Tkqum@3uE.q3+!>(9rC@;
%p:1$B7)\.7qXdK=ZE9.`T*C504N:RoV8YkDluJSD@<J_77&mLd.'smSZKBoYp?UrC8\eLiL=mpee!<\GX.^fi;5gSNZ\D$3cgI$d
%Q5oR3A(`CF$.`B_"5ri#N0pK0m?1AoEZ_W5VUj(O@^F[n9g;u,jEK'hg6m$2EMpBp2ImBnF;_IgBX<b!RL"<[Kf3LJ,'dH77I_SA
%Sk_`)GI5ITHFc[KK2SfJQ6rBWaOGH\g$7a:GM3a::)rihMi.7l>.^\^C89,$OVY1o/%@`T,.L]9eu%.m)2586RVM;Zc!?ej(=lj]
%*jBru92/u%`M,H,k6]R3(.0R:hd'k$f?;L4Q1[jSP,oAJ_j9f'<5DqdDXYBUBJZtD0#rfAI6-P#WqO*/(;!\LOk/m<Mmk-$p=$:U
%fib7RmUN^!jo/.,p@J@InPcaeF:)oo>KV'aZkR,NChXkIHOi'*i:M&X*Jslc6n<b&AW1-,Vlt-K4D#A,=QsOYN!n1<2h#sIAkBP=
%eBV+<i*u@peW6-+c.M'c`m%ciY[4?uar"^[eUa?@TX1V.idKNLhg8sKC0sbDkmgFcS[HVMpAq90XRU%(h';FI(/k+4q^A&_e+=R%
%[2ZopRU^se[k6n7Bqk!7q.-h\2Q$=]YEmsl4J9d^h9ConYVA4eGF!ir^opes5f)3`<k)VbE4m=EJ>]_5DgBa2GdegY9,;NX>*ZE$
%<orf:B?kg)H=WY^kCa,MlaZoioLEQU.C/d9U<X*Ro('85lV,Fa$9imk)=jggN2M"a5ZTsX'YiA7K@uW#s7CpK!f/?+dl"kE6E\en
%T'bVY]Ve1HGkRhLrFpR=]@Ai;mPL%(OO;e&h:e/k5$L6a@o_!TpAer=P*]M.^'EW(C*f;&QEpEX^34Mpea^6&WV%ZiS/b*T],E][
%Col,q&IAfb8FBFAMucO-IVGJ05r-dRl):Pr<d-R\X"aeS6OpeAW<qH0\jt@..T0BLmZA?l!'-OD1/ts-(NO27Xqdkr]qrfAMn%A\
%dV'2%^(;r$p?aV`&^ZD/h'i2oO6BMk6&H6C,9_0D:@?HZH;Zf4b#TY&VA&nA4fV/?%OsW$[(=L#FT#VMRNeJO@,+o-97%u[Xi&j"
%Q6%0$<a6G)I[G=P12F=f@Un@j;O-M#@MPBT.`Y5]/PLWD/J_.W+uu[cj`e(4ZGB[`>%b!1aC0)N.6uA.4K:8$hiT*Ro5:WiPI7U>
%;t"62\Ok6jETB,_q&E)@UT+j[Z=83Db?YluG0P[9V.!SKMa%dVYZX8@1"&:nF#pP,_57o;Zk/LbfWTTm=:`/?9-%\$Lj?/s&IgK)
%iJ5,QTm0P&Q6k]H62ng5G63)TVM$:te<e84VpssTa>(euEM.tGZZ29?@G2T,VV"nH:uR;[Z(I9QpNe_gqC$7nl!#<faUO8M,>lp^
%S*UtuA6SslM@GuVjEM^3NFbUo.[M.i^5f6lV\"?RgSf7-h?W6fZeYg&CM?o<3N<6^rD"g54]AN-`m%'ZoiCO;3P-0W!$E]eC-K7[
%%_@#(PPJ+omT<,3d'"I)qAKr!lak/L?W!ZnI2h5r0Lo[TVQi+`ENt>`d>hN+Z4J\hPcA+,J>6Y&>o[5lk=cstpPt6gI!HHY1=lWJ
%Onm;*MWChrI]#9e0uC_`8-EYql1\VgYp+tdb^k;+>$T]+Ds:qW`FZ4#ELYCfZH=T'lq^Xc2O`-q:7XeE@Oi`OcJ>6uWA,9'TP9=J
%]9+u/$@*CpF%q[<mWdX[b?EF.J`eAjoSYPPnq0nkOoi9jE8>U#"s-$C5pG*VmP]]:FL'][6IFdY=Zhl*Y1&ubG3<'I/5H6UMDr)+
%Ytds>+P1Nd3[PT7^FP4\QhEU8_RFFjHSUOMm@G=U8\E.uEo&ErT">1der'5u#9'i$N4Es%'-dE,>$-e'`S4;MBim#L96S_eE\m7Y
%oQ.T,F8DJ'-Bm9?a!c$Bf25g@9Joap<D;qA+]73**Kq&=<CN`Z(I-/%Z?_6@q3'iH[5rG%qj"f`7o*bnha2/;SXJa/P7aUu(JK?Z
%IWDpLMN\`(K$+Lh,&:F@*Q]7Djh0br5UG75QuUN2ji@g%.s6%3FZZek>4/YY`5\@p,d3$>h&Nm$0r"?T'K#Fqb//20kUgRRGfjJ<
%o;KdfQhoXWjd9kLa,=*bhgLQc->%Vc%8\LP&-l6E5!EDf]OiU*T-O^?Hqip^b95n4j!J;\"sa*k%PglH'$aO=C2qOJ!]+H>)f>aj
%A+JH)&Qi7haLTQ-N0qiH(#G:',sl2Y'eriEVoe?D!-t9c@-Ut+BnDoV$"&G2^eiunJ/.'/ha'Rfrjgo7k7UL*I7tJo(GE\;+_`GH
%B>Xki>gb,FA(f6`SQ5(6/SOTqmY-8%n<O^7-E7As)2'NSpD7/I..pB7((!&rh(W$bE=WLK1>j-^!pto!nQN:rXH@VEC49-lbkJhI
%Bb'nYbLL*caRu*&2l/,F*=^+<Mg23h8k/)pNW<a<I,nTAgk>'(qMu&OBag`b5]:8,%;\UKpouaa[=s1*\r%;5%N,MP0?(NRF<i/P
%VJW.o<dgm58O4E%%WP=.'Om,nC(!J.K+]>%i`5IcaW2Wb8afgP@1l#W[(/NoG"iHnmLA(5GgNe$D9VhtiIE0d`T"ijNEjs7`_-+J
%n`.AXTi)`E$oG`tAa4H$gX3&8?o)e-3IIp/rLcsk1S(UhqcW+MQ`/Q4Z')\(H_lQP`r051*D'3NqD6A[OBY&sCS&"B%u:tJIKRJ2
%g=>27Ec2?Yi*,4$1`#TO9!l/X+BCaZ5`<lN)UK1d,YXMEC:]b(i.TT0?S5.<OhoiRm#cLi.80sZ_aK_D*D[#_h2cjH+e[>Z;sZBC
%rl2=tM[blX:I!f\,erA\Cm$d'i_;?#mDX0a$68[8P9L#FB>%d(H^.7/kP7b@!RpFiSb`6Og2kemQ;;!*k%EbTAFA9)>WS0&Oi*tQ
%"qO@.W28)V\mdDl,$W#tfe/a74^I:h9]^,#2>>%5[>)+=@p,QW+K<VUY;5?ts5_C>bTXVA4"\:aTT??q#pEAW\dP6qfOID/l+ka^
%hC%>I>3QZ/'(Z6E(o*-c6ecL*/u;(5-Dpi\>GoW'H$d]g0HKu?gDVH+LL'!XT=Kd*GdE"G9nqmC5VJ'='#ub9!I3QCN_@uf#4_aJ
%OXe2EPTcZb)CT<.al_2JmT8Tf>#-;LpbMR$B$A&CiR_Un@'I/bX"n$J**A#\>$ajdggto3Il]f[Jq(f)4hnI_Y"5gAPQTf%?kI1a
%gJRq")Yg'EOjMI;W"s/PCL_JjDPX4O-V%SVXj>krR%.YMCod1[RiNYU6dKpu)Ga2)!IEEt;7]nq_f29!Zdr[$Dj+C69I)j45WCKK
%0.[IeEN_.N-;ELjmNT8S*hW*p;^SrQaG&nebpo:l>M_uU`2-^%TGJ\cm,^LcXSO;gXK]*(qfC8n3fA!9(^`GW;>=Y#8%kNc#ERDc
%or5F["EbYY6VQb+:Oecl^XC=fO(#]+*20lOg/WGRmqtSq5FDY$r64K.LYYS1m.!7YmZUTMU#k7F/)Bl/h2cm5X/_W\"nGQiqaeUk
%8hI4HGU^PJTBTR.SP%+Rr,59RFr`X$,QtdF,$oh!]i>PqH/WYg/K/"^iO6mj8;8!/)Y!\DdhY?iF7G95kK.Q#h_l)3hICR6Zm]@b
%d,L'IntJ\#WPm>X$srY-P.PVZiLXWHH7j1'[6tJX/K4G\hL]<!\u,8D.r\&n+5`$2W^VT=DFFfHl3`j5^u.KO0SnrF;B;IQN\K?6
%E_0:-P+au`j0^)kiRYW/ZgsY:!SV^[C&&d<>t&!<\;cU8S0FC;;f\fV"Tl"Tda9E[CWLYWDO_RqS:qV)$F5>G\CGXLQh_:q<(%(@
%>$di^7[Em5/I<@s^;qmL20=.][3,m<Gf\LKLD^_=:dG=bGcNrYL$h&RF>G_r*,#D-*WHrX$q<*^kNebA]A_''*T<M[WcX:[UkO(b
%o:0Z^`Us7q2.Bnq+VTUYC<B==_5+BnX4LC)o*@o;[0-mlZeq$K4*MWtZ5aE7Oe[em%&OciKQ*Q(Dk.VcSOpVDS6hU4P&Bs,lmlY]
%+&WHC#ipdumkoBlQM6)r&V=N/)JnG#e,;,)Cs#j#'ci?40'ZT)=^&d/jB'UWVCL-+:tr\:`'3tE:O#uZPu;nSo@G/gc<*V$Y3Hc4
%`*)J7$+^".#egEgd_3&Sc*_CIi>[NWL*CSB26k<FasJr/b&UNXq(dO[.QPX?]il/iF?9_!mr#O3ZArjZZ+"M+4.:o]O):JXRW,C1
%d$RkQT9?DH\W\fMIXCWahXQcr,HN"DfrA<sQ&p-%@^N2JfL\^*@B5s1D1qgdn[)HLB\XZg0iA/EFo\6S2g*ZBc1kHUK/@RCpK`Z9
%No]S'2\.Hk]&.YJH[pVm"V4p?jY^qt"k,,l%@WF1C>,6!'Cp'5-YM'LO%fSi0dddW!2`/@g0"`u3"+Rc!/'>4PA=^H`!td\R[TiW
%e[$(GblmPQNDl-N'#9_V$$esp^7:J/Ia4n49WZgT>%Ec=TVLW;S"M%REKGSrrEe>3A5q%#!6./SeWrm@M`d1f2psJ@H`"Zn]jm4S
%q*R)si06$q3`3:UEiQP7HEOO@Oop$p6@2jmDceF:6<),+bQ3=6Am?=@#E<YJet#pAYc$1(Q`9s1B[2D)N]"1?+:Loj?!J9.Rag6X
%QE4h@*T'I=:2A#gODY\7Uo`Q@p"+,-d9b?R>$4WeRP-gLD?JQI?$[5??1mrlk1C>*CK*MhX?mXoT8VM0;K1SlZBP/QJTnnC]aiMO
%$r//R?cb'_D5;6F#N=@cm]:GnNqSo,E%Aah5KP>rrKo"^:/\+Ce'7aDKEaIH#+?<HYnN;EZ[>"]L1X$JZ-=:i7BD#)pi]GcF(:HR
%iC3%FkEoG-O":$=D)P=2$DmOu<^R.u:n?]I5N(cjN$;gW*:]7;YRD"C:1gBg'4RaMC/WMY]IiE%%c?&q(sj/3PVd.,jq_"_2M(\4
%-HuCeg*#o6\X4Q!?DTU=/e6Lg`DK?OM%:+)W`9TU3d\@LS[Doo>`sqmDY:5!oou3$nraV(:hT*<>sY9+"-qWAM'-Q@:-tn,4m**2
%0EVTo%>"^&eD%kdUk>-Vcq5kg(k%-m]!G`dgYqK4H#3#7NbfDheo63*FnI4m:SjB=m)$!*@5dDpg0*l>q12"tPSbM^p/LTtE0Q?h
%q50;`aQd?YZ#Lq6!ZYam/a7C!q'=_@n)ZW%H(q/3=TWk_T7298/S62`gPHuD^@h2/Y7Bs!T34eWbG'_U!r>G&GZ=InN:r&pmh,<a
%c;h)FS$C9b<h!Qq2O;+M]EAWE(mJ:^4`ZsW-#n5HQe!G5=].>fTflO-M80]e[D%Z;c_]jM15\**X[QP8qA6hc2D'%:W;j\^,InIR
%].M07]V)Lg;(:<JMG!h\:W'H6aoo1hFq>c$O8JMj-qF1`.7$Lo,V;lU,N5g4bgXM5fmqi(DlqSH6rXq3'<FZmXP*-O_F@.H//0>U
%Zup4.:\Q,t5#O(XP\YD_H?BmA'nS[:^'Ea<<[mVqKMR6r2&1Ymjq.\GFo,)Wocuuqnoqq=OhQ<P^d&+BEa+1,YLTKH-Wu&o1eXLc
%N_EcBaS#Jr'Zr0@XOm(@5N,\?r6=^C/eu:dKBh-+M?(`+>i9@lBGuP:`a8doUR52Im64XX`N=0=K^7bJQ]`1Rm#"82+/Su$cD"uf
%\)M.\e$JcHWFn+b(lo/9[#,sg>+gTZ[2JPCNhVlS'toLsYb^P:)du;c[YVg<8Wf1@leX7(J99Fi5/lg])m!ULXZ*0p=-?sd)#("1
%Fd99A/<:1d+o3OGF]sV5AQn'.S<F6a[r=>s-(q^rih6(3bNi0qP";HfXtJHMceM]L$Z:3#4$85cdZ@KA*NL]r`GAaVb?GfJl:P08
%L2#(u'q=(O*0kNQ$"rr@e'`S70mFop5k%Pt,)Z&VPkLtP0'Ff,<<@g;(ji*E:#c2K@mn7?I)W3E**h/RNEuL<?5alPFC`/8P]NeG
%_cE[eM`$^Mp"BrDZ`.$CVQ%MSG;Y<bQNe=gK8)'6(9P_6X*I5\g1h,-=e/!;Jb$Jm,U3pfa&QTaF0!\5j8bl%*<="[[\D_O>M:T^
%Q\;Chrjc&PmL;^#dZ:iN@WqK67'N#_WT-;5Z:&<CiA>bt,kXLQ[T=+oC2:[)i4GdF7&q(99T+#gYc)fG8G[.&VidNK2eG_6nrHnZ
%=BhJ.B00jrXHShEH.oFgL^("/Z/;2#A7TC#mN/D%YN;7cNAir>/Yule$ErMWCnW:'08Xh&dgnAqe-QkJmAL8H_s]n2X_ObM>%^>l
%XP7/r8_g4OR>`FIb;N-34hutXBE(]k"r"HeAhe+UH"B]Z]6"?VL\%S"bIBAen-esNXs""2\0JsTEo7k(9"6Zhp1*A`_o#t$.B)!G
%%u<%oN+kjpFh1`D'sUA0r!CCjZ<!ipBmg-Q-i=r?_Z6X*CRQg=kG&ADNfk>;n<-JFbf31-;N6N4cWHAthNG&@Y&dg!MOpIF;aj:o
%geb(=NT?PPD-3"Z703%/634CSM!.\!72+;\X8*g,!ATPm]m%)3+-h<KY.EH,%9ettUL4IDq9_pF<4_<A^=0@5,`f/J#A/rSnH:Pf
%'r!L%:$d0if<qgjA+gL:98Pi'Bs)V%*>ONnnj'pq.uftD.j&Z)]Z!TJV(PH2D8=f;lPW/,Q8e+nc8L/("Y?OPi:(n7`).j),TTgl
%G($(=RB#FgBud4mEI55`>#`r"./qUG^k94nR.^VPmH>rRbHo'`\NQ;l17!7VAe#*;\nlUW$aUqM87;>TDlo-+['-F^]cPg@m'LW#
%5BhJZg"CBggoFbu/bUH*lJQO4j[6[qD+$t3F42(6UW(RiA9ITL.uET]kaZ89j-7#'7`%6Kn\4.GbA@<Y485dDAIO1TJl).,Z?*/7
%,O1@HTN2*^c:Skd[N#sd\*6slm5RUM-"<)F5tS%PQGkXSK@Q;*9\=fLT6Ge2q[#OEm#DL[-,Z%fA<X6QpVhGl8G"S;mCA/"7Wk5F
%fjmiQiJ8d0h10s.*2eEC0@gllI_QZ7hM*U-1O5Jjq-P7KPAcD<j\m8/=0NL:/;?%+Pma1b/0hHJ>IB*+eR]J,,jk='<!Y"0)4&?d
%Q-9YtVDPF.PgX/2E/5Nf!8KEo&Y9T(@g>a.U58_,Wuhmu4=7"$p?[47e/H4SAht(i;!r`bI08s1W^b]hF[">b[I6k=*fVtBV&H#%
%+F$mBE&Jj:O=qPCcqK?L=t5RI_NmsO=f_6llmuRKE@Zi"oLj29=-lBU.;hY>j@@jFmaK-oe.]-mfI:$;aW'&"(uBFd)QNRM:[RC]
%nV@W(2\f\b9MrR5\fId^@qiXAP1;qFg4lue$uDmbA[=[UJ!uAG>Eto0K6o02]E&.RAN]:s6t#&2_F0idVn3n,^hQeiQ4<m/^JgQ&
%j3\K]pJE9UF9;;^UHC_;Gi^@!3)Xp18q#VEDo-BVHYON4:TJC$Nsa[.BLu2H22e`$#u7ZY"`q-E`qYRP\YQ[FVn+Ge6c(NiC,6PM
%Z"U7X=Y7DSM?9q+?cgQ%.Fo^Q4EBc(Ukol]m<QR!/Q?,RS_+^B.a,kIqU][uH+fQ><[X*0/K]:5#.jX[W0O]"s%=q>I>H*e"dXK-
%dCS*Gf5q.<GZ`8qI(#SApTb&fTp"K'=S?L8!C[]X;'.c?H_CCC%CVBJq?>m[=IIR.7Y.V6qU!Y1\&0#G3"Ee!$oUbaHfh?>WN-rI
%>8gQ,K9;lmQL[Z+IZs#3W$L#+^8?ZjhD@38)[74q[dCPf8:Qd`PJqH!&_m]d28o_1^Vr4#SX7qV+&]St=pX%YF7a..V5q7&Q[k+!
%ob<9^WA>a3aA*o_TWO(10Ee(U6e-CS?_`t,J37,g>G*.[Ci+_PZlC1/'T\<ALDVpqauqNAJD]T*WrXc%fOJ_.g\^?g+\cTn,iOAD
%bp\'4mZDg*8LEH28<?4oMgk+GZ=GP5$XZ5G[&&&dm#FD'*XlV:YaHJK63C$dhHZCEW2N);YSJo)rJsKdFSc4B[o;M9]0OES1<08;
%@g>EQ`T0t^WQ^ceCN_IB+(,an0TK\LKMSb82>M]7CPL0G=u)H`gMZ?8iOe=rMK6X&N[c.g/c0mq&k,.>1Xq(sXZ9$#`h"huBe^%b
%<BeXo#+gr;Z`LrK5ij%Ypu[$kHJPW*/'"hD6n)U*HaQ%ed6;_Jc4'?d`2mD=(>-ago$,DG:u+f5,<J_kI,I(W?[iYelCZd'j;qXL
%islM[K\kO&fmOXaVha=r<$7CuVf`6LPgE9oNMH3NMXh9"="NqndK(ekNu1UP#pM:#aPBCPLG7J=-hJ_V:9*f>"Rm5+gf8Ld6V*\I
%,l<fSJ1VA:2_AACgKfhDW=KAe]0S,PpX5dIC#22B9?<BupaiF3pX[:K#IHA2!'Hkug;)W;lSpIZl&61l'QHbH5jC-fmjdEUH1H<D
%b0[Utfk/f+5-e&j&k*PjK0k7!1=@+4I^<J]0"k=OUC4We!jl:trJi>NR\]=.D/IoNe_KX]8L'=J4uEmt.b$-n7#>6OFCJ2C`snkN
%]S*rZ&[t:^\'B"P8NW%K8O&Lp/?Gu?8UG^A0t3)_3IYDhh1AB7lTGCEaFGLX>_GJ';9Tn0fdTF@)OpG"@"_g\FL:F!C-mlh$"'HR
%+u%\RRPZ*`"gqt2.^-sq6_1``=k9#;3%WTl\Yobh>0$80,48U3Ug`IhW)]B`G>\F1kln+$\qDB#^,<1=G>R4/:P\_h1b3<f\Ud_l
%M#,5r;8t^ZpQefY:\Bf[!#CW;aD(mLUB5_;;*&!J*js)Uept)G33>$B(&OH&"[JJiOFapn2OF,<D4[YUQ._1>H)OoK=?LSeORSeJ
%R.U.R=p=&oAk1*I7)t<>FZ0?r2?ghcAcO,V=9/If4L)2MhA9af*`IImn,9quiMKn;<nLMP'6MJ'I)X;6?<29l6DAe&Uf#ZJPuLDB
%B:g@l6d;Cl<s5k[l<g9nl\YM'TjOfNJcNlp3;&VO*Vp-'ZNJLNVEktO$59'`8ut8_#"Ad&cl$@.S&P4VN($Y9fFmjefp*LQ83huB
%%9:7'^Jo`.XKs3R<PeH/W_SQZEYoOX%-=*'A4$6d3:m8g.=sd^@-dXPjm^q2^1%.4=sk&\qE^trd#&Bq=JFji]^e.o5fna\eeW0R
%3@kq'F[>,iVlnNAj6o6c&Q4h:G/aorOdHp9ij2Y3_HqJ9J-`]2(tU7b41:@Rrb9sMK`P]*kQKNbmb!GV@h-Ih]nM5S?#ek_('nU5
%*\Qb1W<KK/e/-CI9KQUt&cUA1cKp7O>Y4R5T/&:Ln@()^o0trfX0P,+WZd6A#md<iRlZe@i:H8g7t>d0B_0/a`1h&O)#-';WC0ar
%XsJKrfn?i2c,$[j\F#,EJ\)DG`*4[*$%T:m,,VhM!Qq)m&87$>0?rZ/Wpp_iX.M5ACQ".aDj85kb\'_0=<SmM!o$lc6t[*g^%\N,
%(-0.H&k_4QN*nRY2L0Fm^t`dqj(:Gh+f$SnKRqi.X1ftbhX"+Zk9[YFX""_a7tS1dXsB[HI$)D@PDKt29(TJW&6$HPO,j>s0F:^=
%05)V6Z"F4R9)V$(XPnm4/5K65FO?Ppr.p/!gI6dUCFKmKi5dYVX/(V,XJE-RNKTRlok`0c>dC@N;(HrG)eJhZ-KZPVT4Es[B?>-F
%krs"Xga]6(SY.T+KW56?bpPd>Q>!#.H(_%T.O17Hm8_[IEd=k1VcuX"fSTF@39/g^1Kg08M?l[_\1gtB<R&N>jB#S?g7J-D+#W.4
%&7e][eOqC#7t18p,!7U]G8m*T^HuCk<7A_5$J@_^92VCt6fWu8"[Q8)-bfkdq[eK.XAQ$p9i4>5n\e+<DBrhjpF;T!nW)]h_R.bJ
%AQf/"S(diP(]lp"#QE3PIK.6hrruBA>0.9ijk,q"H<\LjoqW`TVK^qc:2r1.E-<?.edh76>\(1lmB@F@D1@5=nkB3g]OM<\p4t'C
%P*`0aGu3;R*T6sl&V]S<VOT+FYS`Dk?)H_=?G8q0_B5O>FK-b6T0a9FV<#2FG?&V0F3cq[[`Lar9YoO(9q/Sf&J$<[,#\kj"a9Tq
%?JRiR\PlHVJ?Y(TJ[;f,?+.Gi<$oWHO9F]kjufUS5HAJ?c944[E0KH5o1$TK=\-]t<pf%u'J)hLg7$k[8'4e]GC4M+=:iV<%?Q!,
%(3T$.AW]XW4Xur-\'g`+IA[/:1%E-Z/e#J?JUY7SIK(9/g$31QH_bqmUS2uIQ\$Z]a?cSRm'GK"o,1Z&-dD]3oj2AtbZH_KDO(1g
%j4t)1[:=R?[AM3mrqmo=_)VI<-7mFDaHN<AgG:Lh?jG[uAlD?\bBSPY0"UZm]?e&9!_e?UY$*<@g8VSS#Hm1nQH?p?ia+mUTnlOL
%HC@_KgU1(o[Pdm,gTj9IlgoBC'0iF<Iihc5YH+e[Zm)MK]pe(@:feWN=7=Dp*D=:K/C"&=])O#!3H[4E!S''p@9V5tkc%So#4R%4
%YNDnQV'W-7=`r(^$\cQ<m=.3HBh=!^'ts>Mo>G^5g5:LI,pYQOroT9'o-.V*?E\.3^FFB.JaRq;-jN@/V?FdQ5ViPK;1pjQPr!l7
%Zeh1[L5Y+'3HfGg4q#iH3);"rrZ('%A^>XN8Vpl*44du&0MH.Z3$g#!2i]6.m#3&O"-*dG/!U4CV0X="Q1$_fccI6Db3U7>8C`Xe
%p&9\#Xn1Z77fEYQ5I9B7rD.qCGP?U=YQ*Usr:Ri&c[Yt=J,IoJs*+M4?i>3's8&Afl$rTjci;m0roNJ32Z1JmnE5<!bQ%>jJ,V\3
%cbKD$huDLsrp-3VT>1=#o0<3&5QBK1s6VK>fDSL[rpa@pnur)eci<R&?iTu;s7?8KKp/)Aro"suo7-etrr(aQs%0s8U]~>
%AI9_PrivateDataEnd
